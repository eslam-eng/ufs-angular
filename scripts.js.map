{"version":3,"sources":["webpack:///node_modules/jexcel/dist/jexcel.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,CAAC;AACD;AACA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,EAAE,KAAK,EAAE;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qDAAqD,2BAA2B;AAChF,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,a;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C;AAC9C,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,iBAAiB;AAChE;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,0CAA0C;AACzE;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mCAAmC,sCAAsC;AACzE;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,gCAAgC;AAC3D;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,gCAAgC;AAC/D;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mCAAmC,6BAA6B;AAChE;AACA,uCAAuC,gCAAgC;AACvE;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,WAAW;AAClC,2BAA2B,WAAW;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,uBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2BAA2B,OAAO;AAClC;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2BAA2B,OAAO;AAClC;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6BAA6B;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,gCAAgC;AAC3D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,8BAA8B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B,qBAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yBAAyB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,qCAAqC,uBAAuB;AAC5D,yCAAyC,uBAAuB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,uBAAuB;AAC5D,yCAAyC,uBAAuB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,aAAa;AAC5C,mCAAmC,aAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,2BAA2B;AACrE,0CAA0C,6BAA6B;AACvE,iBAAiB;AACjB;AACA;AACA,mCAAmC,6BAA6B;AAChE;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD,8CAA8C,sCAAsC;AACpF;AACA;AACA;AACA,8CAA8C,sCAAsC;AACpF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,gCAAgC;AAC/D,8DAA8D;AAC9D;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,gCAAgC;AAC/D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,6BAA6B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,kDAAkD;AAClD;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA;AACA,uCAAuC,mBAAmB;AAC1D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,uCAAuC,iBAAiB;AACxD;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,QAAQ;AAC9D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,2CAA2C,6BAA6B;AACxE;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,gCAAgC,SAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,2DAA2D,uBAAuB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA,+BAA+B,4BAA4B;AAC3D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA,oCAAoC,SAAS;AAC7C;AACA;AACA;AACA;;AAEA;AACA,oCAAoC,SAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,gCAAgC,SAAS;AACzC,oCAAoC,SAAS;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,SAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,SAAS;AACzC,oCAAoC,SAAS;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,kBAAkB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uCAAuC,mBAAmB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA,gCAAgC,SAAS;AACzC,oCAAoC,SAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,wBAAwB;AACvD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qBAAqB;AACpD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iB;;AAEA,+BAA+B,gCAAgC;AAC/D;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,mCAAmC,wBAAwB;AAC3D;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,wBAAwB;AACnD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;;AAEA;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+BAA+B,OAAO;AACtC,mCAAmC,OAAO;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,mCAAmC,cAAc;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA,8CAA8C;AAC9C;AACA,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,iBAAiB;AAC5C,6DAA6D;AAC7D;AACA;AACA,2BAA2B,iBAAiB;AAC5C,6DAA6D;AAC7D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA,+BAA+B,6BAA6B;AAC5D,mCAAmC,gCAAgC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,6BAA6B;AAChE;AACA;AACA,iBAAiB;AACjB,mCAAmC,6BAA6B;AAChE;AACA;AACA,iBAAiB;AACjB,mCAAmC,6BAA6B;AAChE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;;AAEA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;;AAEA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB,mCAAmC,qBAAqB;AACxD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wCAAwC,8BAA8B;AACtE;AACA;AACA,qCAAqC,kCAAkC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qDAAqD,6BAA6B;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iDAAiD,6BAA6B;AAC9E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,+BAA+B,qBAAqB;AACpD;AACA;AACA,aAAa;AACb;AACA;;AAEA,+BAA+B,qBAAqB;AACpD;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2BAA2B,qBAAqB;AAChD;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,gCAAgC;AAC/D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,+BAA+B,kBAAkB;AACjD;AACA,yCAAyC;AACzC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,oCAAoC;AAC/E;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,gCAAgC;AACnE;AACA,uCAAuC,kBAAkB;AACzD;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,+BAA+B;AAChE;AACA;AACA;;AAEA;AACA;AACA;;AAEA,+CAA+C,oCAAoC;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAuC,sCAAsC;AAC7E;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wDAAwD,mCAAmC;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;;AAEA;AACA;;AAEA,oDAAoD,mCAAmC;AACvF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,yCAAyC,+BAA+B;AACxE,wDAAwD,mCAAmC;AAC3F;AACA;AACA;AACA;;AAEA;AACA,yCAAyC,+BAA+B;AACxE;AACA;AACA;AACA;;AAEA;AACA;AACA,6CAA6C,kCAAkC;AAC/E;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,+CAA+C,sCAAsC;AACrF;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,qBAAqB;AAChD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,wBAAwB;AACnD,+BAA+B,2BAA2B;AAC1D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uCAAuC,oDAAoD;AAC3F;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD;AACA,mCAAmC,wBAAwB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,oDAAoD,SAAS;AAC7D;AACA,mCAAmC,qBAAqB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,qBAAqB;AACpD,mCAAmC,wBAAwB;AAC3D;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6BAA6B;AACxD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6BAA6B;AACxD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA,mCAAmC,gCAAgC;AACnE;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6BAA6B;AACxD,+BAA+B,gCAAgC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,+BAA+B,wBAAwB;AACvD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,uCAAuC,uBAAuB;AAC9D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;;AAEA,wCAAwC,SAAS;AACjD,4CAA4C,SAAS;AACrD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,uCAAuC,mBAAmB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF;AAChF,iCAAiC;AACjC;AACA;AACA,qGAAqG;AACrG,qCAAqC;AACrC;AACA;AACA;AACA;AACA,kGAAkG;AAClG,yCAAyC;AACzC;AACA,mGAAmG;AACnG;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0DAA0D,wBAAwB,GAAG,iBAAiB,wBAAwB,GAAG,kBAAkB,iBAAiB,GAAG,mBAAmB,YAAY,GAAG,2BAA2B,4CAA4C,GAAG,4BAA4B,gEAAgE,4CAA4C,EAAE;;AAE7Z;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,QAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,iDAAiD,OAAO;AACxD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,qBAAqB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,oDAAoD,OAAO;AAC3D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iCAAiC,wBAAwB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,QAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,6E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,cAAc;AAChD;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,QAAQ;AAC3C;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,SAAS;AAC5C;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,iBAAiB;AAC5D;AACA,+CAA+C,wCAAwC;AACvF;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,cAAc;AAChD;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6CAA6C,kBAAkB;AAC/D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gDAAgD,MAAM;AACtD;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,sDAAsD,gBAAgB,cAAc,EAAE;;AAEtF;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B,OAAO;AAClC;AACA;;AAEA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,+BAA+B,4BAA4B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sCAAsC,4BAA4B;AAClE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,0CAA0C;AAChF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,yCAAyC,kCAAkC;AAC3E;AACA;AACA;AACA;AACA;AACA,+BAA+B,+BAA+B;AAC9D,6CAA6C,kCAAkC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gCAAgC;AACnE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,yCAAyC,gDAAgD;AACzF;AACA;AACA;AACA;;AAEA,+BAA+B,+BAA+B;AAC9D;AACA;AACA;AACA,6CAA6C,gDAAgD;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gCAAgC;AACnE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mCAAmC,sCAAsC;AACzE;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,mCAAmC,+BAA+B;AAClE;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,mCAAmC,kCAAkC;AACrE;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,mCAAmC,kCAAkC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,+BAA+B,mBAAmB;AAClD;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA,yEAAyE;;AAEzE,+BAA+B,iBAAiB;AAChD;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA,qDAAqD;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B;AACA,6CAA6C,gBAAgB;AAC7D;AACA;AACA;;AAEA;AACA,sDAAsD,qBAAqB,KAAK,UAAU,E;;AAE1F;AACA,gCAAgC,gBAAgB,UAAU;;AAE1D;AACA,gDAAgD,OAAO,UAAU;;AAEjE;AACA,yDAAyD,OAAO,SAAS,KAAK,UAAU;;AAExF;AACA,2CAA2C,OAAO,SAAS,UAAU;AACrE,2CAA2C,OAAO,SAAS,UAAU;;AAErE;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;AACb,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,oBAAoB;AAC9D;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA,oCAAoC,cAAc;;AAElD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA,wCAAwC,cAAc;;AAEtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,cAAc;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,+BAA+B;AAC9D;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,+BAA+B;AAC9D;AACA;AACA;AACA;AACA;AACA,mCAAmC,qBAAqB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,+BAA+B,+BAA+B;AAC9D;AACA;AACA,mCAAmC,qBAAqB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,mCAAmC;AAC9E;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,mCAAmC;AAClF;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,qCAAqC;AACrC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,6BAA6B;AAC7B;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oBAAoB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,mCAAmC,mCAAmC;AACtE;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gCAAgC;AACvE;AACA;AACA;AACA;AACA,uCAAuC,mCAAmC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,+CAA+C,mCAAmC;AAClF;AACA;AACA;;AAEA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6BAA6B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C,mCAAmC,YAAY;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0CAA0C,iDAAiD;AAC3F;AACA;AACA,SAAS;AACT,sE;AACA,kDAAkD;AAClD;AACA,wCAAwC,kDAAkD;AAC1F;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,qBAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oBAAoB;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,oBAAoB;AAC/C;AACA;AACA,mCAAmC,gCAAgC;AACnE;AACA;AACA,iBAAiB;AACjB,mCAAmC,gCAAgC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,kBAAkB;AACvE,6BAA6B;AAC7B,oEAAoE;AACpE;AACA;AACA;;AAEA;AACA;AACA,mCAAmC;AACnC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,+BAA+B,4BAA4B;AAC3D;AACA;AACA;AACA,mCAAmC,yBAAyB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA,SAAS;AACT;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,2BAA2B,mBAAmB;AAC9C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACbkBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;;AAEA,2BAA2B,qBAAqB;AAChD,+BAA+B,wBAAwB;AACvD;AACA;AACA,mCAAmC,sBAAsB;AACzD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uCAAuC,qBAAqB;AAC5D;AACA,0EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,6BAA6B,0BAA0B;AACvD;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA,2BAA2B,KAAK;AAChC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACbaAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACbkBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,IAAI;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,KAAK;AAChC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,IAAI;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B,KAAK;AACpC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B,KAAK;AACpC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B,KAAK;AACpC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,KAAK;AAC9B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,KAAK;AAC9B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,KAAK;AAC9B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,UAAU;AACzC;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,+BAA+B,UAAU;AACzC;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,aAAa;AACxC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACbmBAAmB;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,2BAA2B,KAAK;AAChC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uCAAuC,qBAAqB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,4BAA4B,IAAI,cAAc,IAAI,cAAc,IAAI;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA,iEAAiE,iBAAiB;AAClF;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yBAAyB;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACbqBAAqB;AAChD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C,qEAAqE;AACrE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;;AAEA;AACA,+BAA+B,mBAAmB;AAClD;AACA,qCAAqC,OAAO;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA,oDAAoD;AACpD;AACA;AACA,iBAAiB;AACjB,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,oBAAoB;AAC/C;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA,6EAA6E;AAC7E,qBAAqB;AACrB,yFAAyF;AACzF;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA,qDAAqD,WAAW,+BAA+B,eAAe;AAC9G;;AAEA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL,mBAAmB,wCAAwC;AAC3D;AACA,uBAAuB,iCAAiC;AACxD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC","file":"scripts.js","sourcesContent":["/**\r\n * jExcel v4.5.0\r\n *\r\n * Website: https://bossanova.uk/jexcel/\r\n * Description: Create amazing web based spreadsheets.\r\n *\r\n * This software is distribute under MIT License\r\n */\r\n\r\nif (! jSuites && typeof(require) === 'function') {\r\n    var jSuites = require('jsuites');\r\n    require('jsuites/dist/jsuites.css');\r\n}\r\n\r\n;(function (global, factory) {\r\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n    typeof define === 'function' && define.amd ? define(factory) :\r\n    global.jexcel = factory();\r\n}(this, (function () {\r\n\r\n    'use strict';\r\n\r\n    // Jexcel core object\r\n\r\n    var jexcel = (function(el, options) {\r\n        // Create jexcel object\r\n        var obj = {};\r\n        obj.options = {};\r\n\r\n        if (! (el instanceof Element || el instanceof HTMLDocument)) {\r\n            console.error('JEXCEL: el is not a valid DOM element');\r\n            return false;\r\n        } else if (el.tagName == 'TABLE') {\r\n            if (options = jexcel.createFromTable(el, options)) {\r\n                var div = document.createElement('div');\r\n                el.parentNode.insertBefore(div, el);\r\n                el.remove();\r\n                el = div;\r\n            } else {\r\n                console.error('JEXCEL: el is not a valid DOM element');\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // Loading default configuration\r\n        var defaults = {\r\n            // External data\r\n            url:null,\r\n            // Ajax options\r\n            method: 'GET',\r\n            requestVariables: null,\r\n            // Data\r\n            data:null,\r\n            // Custom sorting handler\r\n            sorting:null,\r\n            // Copy behavior\r\n            copyCompatibility:false,\r\n            root:null,\r\n            // Rows and columns definitions\r\n            rows:[],\r\n            columns:[],\r\n            // Deprected legacy options\r\n            colHeaders:[],\r\n            colWidths:[],\r\n            colAlignments:[],\r\n            nestedHeaders:null,\r\n            // Column width that is used by default\r\n            defaultColWidth:50,\r\n            defaultColAlign:'center',\r\n            // Spare rows and columns\r\n            minSpareRows:0,\r\n            minSpareCols:0,\r\n            // Minimal table dimensions\r\n            minDimensions:[0,0],\r\n            // Allow Export\r\n            allowExport:true,\r\n            // @type {boolean} - Include the header titles on download\r\n            includeHeadersOnDownload:false,\r\n            // @type {boolean} - Include the header titles on copy\r\n            includeHeadersOnCopy:false,\r\n            // Allow column sorting\r\n            columnSorting:true,\r\n            // Allow column dragging\r\n            columnDrag:false,\r\n            // Allow column resizing\r\n            columnResize:true,\r\n            // Allow row resizing\r\n            rowResize:false,\r\n            // Allow row dragging\r\n            rowDrag:true,\r\n            // Allow table edition\r\n            editable:true,\r\n            // Allow new rows\r\n            allowInsertRow:true,\r\n            // Allow new rows\r\n            allowManualInsertRow:true,\r\n            // Allow new columns\r\n            allowInsertColumn:true,\r\n            // Allow new rows\r\n            allowManualInsertColumn:true,\r\n            // Allow row delete\r\n            allowDeleteRow:true,\r\n            // Allow deleting of all rows\r\n            allowDeletingAllRows:false,\r\n            // Allow column delete\r\n            allowDeleteColumn:true,\r\n            // Allow rename column\r\n            allowRenameColumn:true,\r\n            // Allow comments\r\n            allowComments:false,\r\n            // Global wrap\r\n            wordWrap:false,\r\n            // Image options\r\n            imageOptions: null,\r\n            // CSV source\r\n            csv:null,\r\n            // Filename\r\n            csvFileName:'jexcel',\r\n            // Consider first line as header\r\n            csvHeaders:true,\r\n            // Delimiters\r\n            csvDelimiter:',',\r\n            // First row as header\r\n            parseTableFirstRowAsHeader:false,\r\n            parseTableAutoCellType:false,\r\n            // Disable corner selection\r\n            selectionCopy:true,\r\n            // Merged cells\r\n            mergeCells:{},\r\n            // Create toolbar\r\n            toolbar:null,\r\n            // Allow search\r\n            search:false,\r\n            // Create pagination\r\n            pagination:false,\r\n            paginationOptions:null,\r\n            // Full screen\r\n            fullscreen:false,\r\n            // Lazy loading\r\n            lazyLoading:false,\r\n            loadingSpin:false,\r\n            // Table overflow\r\n            tableOverflow:false,\r\n            tableHeight:'300px',\r\n            tableWidth:null,\r\n            textOverflow:false,\r\n            // Meta\r\n            meta: null,\r\n            // Style\r\n            style:null,\r\n            // Execute formulas\r\n            parseFormulas:true,\r\n            autoIncrement:true,\r\n            autoCasting:true,\r\n            // Security\r\n            secureFormulas:true,\r\n            stripHTML:true,\r\n            stripHTMLOnCopy:false,\r\n            // Filters\r\n            filters:false,\r\n            footers:null,\r\n            // Event handles\r\n            onundo:null,\r\n            onredo:null,\r\n            onload:null,\r\n            onchange:null,\r\n            oncomments:null,\r\n            onbeforechange:null,\r\n            onafterchanges:null,\r\n            onbeforeinsertrow: null,\r\n            oninsertrow:null,\r\n            onbeforeinsertcolumn: null,\r\n            oninsertcolumn:null,\r\n            onbeforedeleterow:null,\r\n            ondeleterow:null,\r\n            onbeforedeletecolumn:null,\r\n            ondeletecolumn:null,\r\n            onmoverow:null,\r\n            onmovecolumn:null,\r\n            onresizerow:null,\r\n            onresizecolumn:null,\r\n            onsort:null,\r\n            onselection:null,\r\n            oncopy:null,\r\n            onpaste:null,\r\n            onbeforepaste:null,\r\n            onmerge:null,\r\n            onfocus:null,\r\n            onblur:null,\r\n            onchangeheader:null,\r\n            oncreateeditor:null,\r\n            oneditionstart:null,\r\n            oneditionend:null,\r\n            onchangestyle:null,\r\n            onchangemeta:null,\r\n            onchangepage:null,\r\n            onbeforesave:null,\r\n            onsave:null,\r\n            // Global event dispatcher\r\n            onevent:null,\r\n            // Persistance\r\n            persistance:false,\r\n            // Customize any cell behavior\r\n            updateTable:null,\r\n            // Detach the HTML table when calling updateTable\r\n            detachForUpdates: false,\r\n            freezeColumns:null,\r\n            // Texts\r\n            text:{\r\n                noRecordsFound: 'No records found',\r\n                showingPage: 'Showing page {0} of {1} entries',\r\n                show: 'Show ',\r\n                search: 'Search',\r\n                entries: ' entries',\r\n                columnName: 'Column name',\r\n                insertANewColumnBefore: 'Insert a new column before',\r\n                insertANewColumnAfter: 'Insert a new column after',\r\n                deleteSelectedColumns: 'Delete selected columns',\r\n                renameThisColumn: 'Rename this column',\r\n                orderAscending: 'Order ascending',\r\n                orderDescending: 'Order descending',\r\n                insertANewRowBefore: 'Insert a new row before',\r\n                insertANewRowAfter: 'Insert a new row after',\r\n                deleteSelectedRows: 'Delete selected rows',\r\n                editComments: 'Edit comments',\r\n                addComments: 'Add comments',\r\n                comments: 'Comments',\r\n                clearComments: 'Clear comments',\r\n                copy: 'Copy...',\r\n                paste: 'Paste...',\r\n                saveAs: 'Save as...',\r\n                about: 'About',\r\n                areYouSureToDeleteTheSelectedRows: 'Are you sure to delete the selected rows?',\r\n                areYouSureToDeleteTheSelectedColumns: 'Are you sure to delete the selected columns?',\r\n                thisActionWillDestroyAnyExistingMergedCellsAreYouSure: 'This action will destroy any existing merged cells. Are you sure?',\r\n                thisActionWillClearYourSearchResultsAreYouSure: 'This action will clear your search results. Are you sure?',\r\n                thereIsAConflictWithAnotherMergedCell: 'There is a conflict with another merged cell',\r\n                invalidMergeProperties: 'Invalid merged properties',\r\n                cellAlreadyMerged: 'Cell already merged',\r\n                noCellsSelected: 'No cells selected',\r\n            },\r\n            // About message\r\n            about:\"jExcel CE Spreadsheet\\nVersion 4.5.0\\nWebsite: https://bossanova.uk/jexcel/v3\",\r\n        };\r\n    \r\n        // Loading initial configuration from user\r\n        for (var property in defaults) {\r\n            if (options && options.hasOwnProperty(property)) {\r\n                if (property === 'text') {\r\n                    obj.options[property] = defaults[property];\r\n                    for (var textKey in options[property]) {\r\n                        if (options[property].hasOwnProperty(textKey)){\r\n                            obj.options[property][textKey] = options[property][textKey];\r\n                        }\r\n                    }\r\n                } else {\r\n                    obj.options[property] = options[property];\r\n                }\r\n            } else {\r\n                obj.options[property] = defaults[property];\r\n            }\r\n        }\r\n\r\n        // Global elements\r\n        obj.el = el;\r\n        obj.corner = null;\r\n        obj.contextMenu = null;\r\n        obj.textarea = null;\r\n        obj.ads = null;\r\n        obj.content = null;\r\n        obj.table = null;\r\n        obj.thead = null;\r\n        obj.tbody = null;\r\n        obj.rows = [];\r\n        obj.results = null;\r\n        obj.searchInput = null;\r\n        obj.toolbar = null;\r\n        obj.pagination = null;\r\n        obj.pageNumber = null;\r\n        obj.headerContainer = null;\r\n        obj.colgroupContainer = null;\r\n    \r\n        // Containers\r\n        obj.headers = [];\r\n        obj.records = [];\r\n        obj.history = [];\r\n        obj.formula = [];\r\n        obj.colgroup = [];\r\n        obj.selection = [];\r\n        obj.highlighted  = [];\r\n        obj.selectedCell = null;\r\n        obj.selectedContainer = null;\r\n        obj.style = [];\r\n        obj.data = null;\r\n        obj.filter = null;\r\n        obj.filters = [];\r\n\r\n        // Internal controllers\r\n        obj.cursor = null;\r\n        obj.historyIndex = -1;\r\n        obj.ignoreEvents = false;\r\n        obj.ignoreHistory = false;\r\n        obj.edition = null;\r\n        obj.hashString = null;\r\n        obj.resizing = null;\r\n        obj.dragging = null;\r\n    \r\n        // Lazy loading\r\n        if (obj.options.lazyLoading == true && (obj.options.tableOverflow == false && obj.options.fullscreen == false)) {\r\n            console.error('JEXCEL: The lazyloading only works when tableOverflow = yes or fullscreen = yes');\r\n            obj.options.lazyLoading = false;\r\n        }\r\n        \r\n        /**\r\n         * Activate/Disable fullscreen \r\n         * use programmatically : table.fullscreen(); or table.fullscreen(true); or table.fullscreen(false);\r\n         * @Param {boolean} activate\r\n         */\r\n        obj.fullscreen = function(activate) {\r\n            // If activate not defined, get reverse options.fullscreen\r\n            if (activate == null) {\r\n                activate = ! obj.options.fullscreen;\r\n            }\r\n    \r\n            // If change\r\n            if (obj.options.fullscreen != activate) {\r\n                obj.options.fullscreen = activate;\r\n    \r\n                // Test LazyLoading conflict\r\n                if (activate == true) {\r\n                    el.classList.add('fullscreen');\r\n                } else {\r\n                    el.classList.remove('fullscreen');\r\n                }\r\n            } \r\n        }\r\n\r\n        /**\r\n         * Trigger events\r\n         */\r\n        obj.dispatch = function(event) {\r\n            // Dispatch events\r\n            if (! obj.ignoreEvents) {\r\n                // Call global event\r\n                if (typeof(obj.options.onevent) == 'function') {\r\n                    var ret = obj.options.onevent.apply(this, arguments);\r\n                }\r\n                // Call specific events\r\n                if (typeof(obj.options[event]) == 'function') {\r\n                    var ret = obj.options[event].apply(this, Array.prototype.slice.call(arguments, 1));\r\n                }\r\n            }\r\n\r\n            // Persistance\r\n            if (event == 'onafterchanges' && obj.options.persistance) {\r\n                var url = obj.options.persistance == true ? obj.options.url : obj.options.persistance;\r\n                var data = obj.prepareJson(arguments[2]);\r\n                obj.save(url, data);\r\n            }\r\n\r\n            return ret;\r\n        }\r\n\r\n        /**\r\n         * Prepare the jexcel table\r\n         * \r\n         * @Param config\r\n         */\r\n        obj.prepareTable = function() {\r\n            // Loading initial data from remote sources\r\n            var results = [];\r\n    \r\n            // Number of columns\r\n            var size = obj.options.columns.length;\r\n    \r\n            if (obj.options.data && typeof(obj.options.data[0]) !== 'undefined') {\r\n                // Data keys\r\n                var keys = Object.keys(obj.options.data[0]);\r\n    \r\n                if (keys.length > size) {\r\n                    size = keys.length;\r\n                }\r\n            }\r\n    \r\n            // Minimal dimensions\r\n            if (obj.options.minDimensions[0] > size) {\r\n                size = obj.options.minDimensions[0];\r\n            }\r\n    \r\n            // Requests\r\n            var multiple = [];\r\n    \r\n            // Preparations\r\n            for (var i = 0; i < size; i++) {\r\n                // Deprected options. You should use only columns\r\n                if (! obj.options.colHeaders[i]) {\r\n                    obj.options.colHeaders[i] = '';\r\n                }\r\n                if (! obj.options.colWidths[i]) {\r\n                    obj.options.colWidths[i] = obj.options.defaultColWidth;\r\n                }\r\n                if (! obj.options.colAlignments[i]) {\r\n                    obj.options.colAlignments[i] = obj.options.defaultColAlign;\r\n                }\r\n    \r\n                // Default column description\r\n                if (! obj.options.columns[i]) {\r\n                    obj.options.columns[i] = { type:'text' };\r\n                } else if (! obj.options.columns[i].type) {\r\n                    obj.options.columns[i].type = 'text';\r\n                }\r\n                if (! obj.options.columns[i].name) {\r\n                    obj.options.columns[i].name = keys && keys[i] ? keys[i] : i;\r\n                }\r\n                if (! obj.options.columns[i].source) {\r\n                    obj.options.columns[i].source = [];\r\n                }\r\n                if (! obj.options.columns[i].options) {\r\n                    obj.options.columns[i].options = [];\r\n                }\r\n                if (! obj.options.columns[i].editor) {\r\n                    obj.options.columns[i].editor = null;\r\n                }\r\n                if (! obj.options.columns[i].allowEmpty) {\r\n                    obj.options.columns[i].allowEmpty = false;\r\n                }\r\n                if (! obj.options.columns[i].title) {\r\n                    obj.options.columns[i].title = obj.options.colHeaders[i] ? obj.options.colHeaders[i] : '';\r\n                }\r\n                if (! obj.options.columns[i].width) {\r\n                    obj.options.columns[i].width = obj.options.colWidths[i] ? obj.options.colWidths[i] : obj.options.defaultColWidth;\r\n                }\r\n                if (! obj.options.columns[i].align) {\r\n                    obj.options.columns[i].align = obj.options.colAlignments[i] ? obj.options.colAlignments[i] : 'center';\r\n                }\r\n    \r\n                // Pre-load initial source for json autocomplete\r\n                if (obj.options.columns[i].type == 'autocomplete' || obj.options.columns[i].type == 'dropdown') {\r\n                    // if remote content\r\n                    if (obj.options.columns[i].url) {\r\n                        multiple.push({\r\n                            url: obj.options.columns[i].url,\r\n                            index: i,\r\n                            method: 'GET',\r\n                            dataType: 'json',\r\n                            success: function(data) {\r\n                                var source = [];\r\n                                for (var i = 0; i < data.length; i++) {\r\n                                    obj.options.columns[this.index].source.push(data[i]);\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                } else if (obj.options.columns[i].type == 'calendar') {\r\n                    // Default format for date columns\r\n                    if (! obj.options.columns[i].options.format) {\r\n                        obj.options.columns[i].options.format = 'DD/MM/YYYY';\r\n                    }\r\n                }\r\n            }\r\n            // Create the table when is ready\r\n            if (! multiple.length) {\r\n                obj.createTable();\r\n            } else {\r\n                jSuites.ajax(multiple, function() {\r\n                    obj.createTable();\r\n                });\r\n            }\r\n        }\r\n    \r\n        obj.createTable = function() {\r\n            // Elements\r\n            obj.table = document.createElement('table');\r\n            obj.thead = document.createElement('thead');\r\n            obj.tbody = document.createElement('tbody');\r\n\r\n            // Create headers controllers\r\n            obj.headers = [];\r\n            obj.colgroup = [];\r\n    \r\n            // Create table container\r\n            obj.content = document.createElement('div');\r\n            obj.content.classList.add('jexcel_content');\r\n            obj.content.onscroll = function(e) {\r\n                obj.scrollControls(e);\r\n            }\r\n            obj.content.onwheel = function(e) {\r\n                obj.wheelControls(e);\r\n            }\r\n\r\n            // Create toolbar object\r\n            obj.toolbar = document.createElement('div');\r\n            obj.toolbar.classList.add('jexcel_toolbar');\r\n    \r\n            // Search\r\n            var searchContainer = document.createElement('div');\r\n            var searchText = document.createTextNode((obj.options.text.search) + ': ');\r\n            obj.searchInput = document.createElement('input');\r\n            obj.searchInput.classList.add('jexcel_search');\r\n            searchContainer.appendChild(searchText);\r\n            searchContainer.appendChild(obj.searchInput);\r\n            obj.searchInput.onfocus = function() {\r\n                obj.resetSelection();\r\n            }\r\n    \r\n            // Pagination select option\r\n            var paginationUpdateContainer = document.createElement('div');\r\n    \r\n            if (obj.options.pagination > 0 && obj.options.paginationOptions && obj.options.paginationOptions.length > 0) {\r\n                obj.paginationDropdown = document.createElement('select');\r\n                obj.paginationDropdown.classList.add('jexcel_pagination_dropdown');\r\n                obj.paginationDropdown.onchange = function() {\r\n                    obj.options.pagination = parseInt(this.value);\r\n                    obj.page(0);\r\n                }\r\n    \r\n                for (var i = 0; i < obj.options.paginationOptions.length; i++) {\r\n                    var temp = document.createElement('option');\r\n                    temp.value = obj.options.paginationOptions[i];\r\n                    temp.innerHTML = obj.options.paginationOptions[i];\r\n                    obj.paginationDropdown.appendChild(temp);\r\n                }\r\n    \r\n                // Set initial pagination value\r\n                obj.paginationDropdown.value = obj.options.pagination;\r\n\r\n                paginationUpdateContainer.appendChild(document.createTextNode(obj.options.text.show));\r\n                paginationUpdateContainer.appendChild(obj.paginationDropdown);\r\n                paginationUpdateContainer.appendChild(document.createTextNode(obj.options.text.entries));\r\n            }\r\n    \r\n            // Filter and pagination container\r\n            var filter = document.createElement('div');\r\n            filter.classList.add('jexcel_filter');\r\n            filter.appendChild(paginationUpdateContainer);\r\n            filter.appendChild(searchContainer);\r\n    \r\n            // Colsgroup\r\n            obj.colgroupContainer = document.createElement('colgroup');\r\n            var tempCol = document.createElement('col');\r\n            tempCol.setAttribute('width', '50');\r\n            obj.colgroupContainer.appendChild(tempCol);\r\n    \r\n            // Nested\r\n            if (obj.options.nestedHeaders && obj.options.nestedHeaders.length > 0) {\r\n                // Flexible way to handle nestedheaders\r\n                if (obj.options.nestedHeaders[0] && obj.options.nestedHeaders[0][0]) {\r\n                    for (var j = 0; j < obj.options.nestedHeaders.length; j++) {\r\n                        obj.thead.appendChild(obj.createNestedHeader(obj.options.nestedHeaders[j]));\r\n                    }\r\n                } else {\r\n                    obj.thead.appendChild(obj.createNestedHeader(obj.options.nestedHeaders));\r\n                }\r\n            }\r\n    \r\n            // Row\r\n            obj.headerContainer = document.createElement('tr');\r\n            var tempCol = document.createElement('td');\r\n            tempCol.classList.add('jexcel_selectall');\r\n            obj.headerContainer.appendChild(tempCol);\r\n    \r\n            for (var i = 0; i < obj.options.columns.length; i++) {\r\n                // Create header\r\n                obj.createCellHeader(i);\r\n                // Append cell to the container\r\n                obj.headerContainer.appendChild(obj.headers[i]);\r\n                obj.colgroupContainer.appendChild(obj.colgroup[i]);\r\n            }\r\n\r\n            obj.thead.appendChild(obj.headerContainer);\r\n\r\n            // Filters\r\n            if (obj.options.filters == true) {\r\n                obj.filter = document.createElement('tr');\r\n                var td = document.createElement('td');\r\n                obj.filter.appendChild(td);\r\n\r\n                for (var i = 0; i < obj.options.columns.length; i++) {\r\n                    var td = document.createElement('td');\r\n                    td.innerHTML = '&nbsp;';\r\n                    td.setAttribute('data-x', i);\r\n                    td.className = 'jexcel_column_filter';\r\n                    if (obj.options.columns[i].type == 'hidden') {\r\n                        td.style.display = 'none';\r\n                    }\r\n                    obj.filter.appendChild(td);\r\n                }\r\n\r\n                obj.thead.appendChild(obj.filter);\r\n            }\r\n\r\n            // Content table\r\n            obj.table = document.createElement('table');\r\n            obj.table.classList.add('jexcel');\r\n            obj.table.setAttribute('cellpadding', '0');\r\n            obj.table.setAttribute('cellspacing', '0');\r\n            obj.table.setAttribute('unselectable', 'yes');\r\n            //obj.table.setAttribute('onselectstart', 'return false');\r\n            obj.table.appendChild(obj.colgroupContainer);\r\n            obj.table.appendChild(obj.thead);\r\n            obj.table.appendChild(obj.tbody);\r\n\r\n            if (! obj.options.textOverflow) {\r\n                obj.table.classList.add('jexcel_overflow');\r\n            }\r\n\r\n            // Spreadsheet corner\r\n            obj.corner = document.createElement('div');\r\n            obj.corner.className = 'jexcel_corner';\r\n            obj.corner.setAttribute('unselectable', 'on');\r\n            obj.corner.setAttribute('onselectstart', 'return false');\r\n    \r\n            if (obj.options.selectionCopy == false) {\r\n                obj.corner.style.display = 'none';\r\n            }\r\n    \r\n            // Textarea helper\r\n            obj.textarea = document.createElement('textarea');\r\n            obj.textarea.className = 'jexcel_textarea';\r\n            obj.textarea.id = 'jexcel_textarea';\r\n            obj.textarea.tabIndex = '-1';\r\n\r\n            // Contextmenu container\r\n            obj.contextMenu = document.createElement('div');\r\n            obj.contextMenu.className = 'jexcel_contextmenu';\r\n    \r\n            // Create element\r\n            jSuites.contextmenu(obj.contextMenu, {\r\n                onclick:function() {\r\n                    obj.contextMenu.contextmenu.close(false);\r\n                }\r\n            });\r\n    \r\n            // Powered by jExcel\r\n            var ads = document.createElement('a');\r\n            ads.setAttribute('href', 'https://bossanova.uk/jexcel/');\r\n            obj.ads = document.createElement('div');\r\n            obj.ads.className = 'jexcel_about';\r\n            try {\r\n                if (typeof(sessionStorage) !== \"undefined\" && ! sessionStorage.getItem('jexcel')) {\r\n                    sessionStorage.setItem('jexcel', true);\r\n                    var img = document.createElement('img');\r\n                    img.src = '//bossanova.uk/jexcel/logo.png';\r\n                    ads.appendChild(img);\r\n                }\r\n            } catch (exception) {\r\n            }\r\n            var span = document.createElement('span');\r\n            span.innerHTML = 'Jexcel spreadsheet';\r\n            ads.appendChild(span);\r\n            obj.ads.appendChild(ads);\r\n\r\n            // Create table container TODO: frozen columns\r\n            var container = document.createElement('div');\r\n            container.classList.add('jexcel_table');\r\n    \r\n            // Pagination\r\n            obj.pagination = document.createElement('div');\r\n            obj.pagination.classList.add('jexcel_pagination');\r\n            var paginationInfo = document.createElement('div');\r\n            var paginationPages = document.createElement('div');\r\n            obj.pagination.appendChild(paginationInfo);\r\n            obj.pagination.appendChild(paginationPages);\r\n\r\n            // Hide pagination if not in use\r\n            if (! obj.options.pagination) {\r\n                obj.pagination.style.display = 'none';\r\n            }\r\n\r\n            // Append containers to the table\r\n            if (obj.options.search == true) {\r\n                el.appendChild(filter);\r\n            }\r\n    \r\n            // Elements\r\n            obj.content.appendChild(obj.table);\r\n            obj.content.appendChild(obj.corner);\r\n            obj.content.appendChild(obj.textarea);\r\n    \r\n            el.appendChild(obj.toolbar);\r\n            el.appendChild(obj.content);\r\n            el.appendChild(obj.pagination);\r\n            el.appendChild(obj.contextMenu);\r\n            el.appendChild(obj.ads);\r\n            el.classList.add('jexcel_container');\r\n    \r\n            // Create toolbar\r\n            if (obj.options.toolbar && obj.options.toolbar.length) {\r\n                obj.createToolbar();\r\n            }\r\n    \r\n            // Fullscreen\r\n            if (obj.options.fullscreen == true) {\r\n                el.classList.add('fullscreen');\r\n            } else {\r\n                // Overflow\r\n                if (obj.options.tableOverflow == true) {\r\n                    if (obj.options.tableHeight) {\r\n                        obj.content.style['overflow-y'] = 'auto';\r\n                        obj.content.style.maxHeight = obj.options.tableHeight;\r\n                    }\r\n                    if (obj.options.tableWidth) {\r\n                        obj.content.style['overflow-x'] = 'auto';\r\n                        obj.content.style.width = obj.options.tableWidth;\r\n                    }\r\n                }\r\n            }\r\n    \r\n            // With toolbars\r\n            if (obj.options.tableOverflow != true && obj.options.toolbar) {\r\n                el.classList.add('with-toolbar');\r\n            }\r\n    \r\n            // Actions\r\n            if (obj.options.columnDrag == true) {\r\n                obj.thead.classList.add('draggable');\r\n            }\r\n            if (obj.options.columnResize == true) {\r\n                obj.thead.classList.add('resizable');\r\n            }\r\n            if (obj.options.rowDrag == true) {\r\n                obj.tbody.classList.add('draggable');\r\n            }\r\n            if (obj.options.rowResize == true) {\r\n                obj.tbody.classList.add('resizable');\r\n            }\r\n    \r\n            // Load data\r\n            obj.setData();\r\n    \r\n            // Style\r\n            if (obj.options.style) {\r\n                obj.setStyle(obj.options.style, null, null, 1, 1);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Refresh the data\r\n         * \r\n         * @return void\r\n         */\r\n        obj.refresh = function() {\r\n            if (obj.options.url) {\r\n                // Loading\r\n                if (obj.options.loadingSpin == true) {\r\n                    jSuites.loading.show();\r\n                }\r\n    \r\n                jSuites.ajax({\r\n                    url: obj.options.url,\r\n                    method: obj.options.method,\r\n                    data: obj.options.requestVariables,\r\n                    dataType: 'json',\r\n                    success: function(result) {\r\n                        // Data\r\n                        obj.options.data = (result.data) ? result.data : result;\r\n                        // Prepare table\r\n                        obj.setData();\r\n                        // Hide spin\r\n                        if (obj.options.loadingSpin == true) {\r\n                            jSuites.loading.hide();\r\n                        }\r\n                    }\r\n                });\r\n            } else {\r\n                obj.setData();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Set data\r\n         * \r\n         * @param array data In case no data is sent, default is reloaded\r\n         * @return void\r\n         */\r\n        obj.setData = function(data) {\r\n            // Update data\r\n            if (data) {\r\n                if (typeof(data) == 'string') {\r\n                    data = JSON.parse(data);\r\n                }\r\n    \r\n                obj.options.data = data;\r\n            }\r\n    \r\n            // Data\r\n            if (! obj.options.data) {\r\n                obj.options.data = [];\r\n            }\r\n    \r\n            // Prepare data\r\n            if (obj.options.data && obj.options.data[0]) {\r\n                if (! Array.isArray(obj.options.data[0])) {\r\n                    var data = [];\r\n                    for (var j = 0; j < obj.options.data.length; j++) {\r\n                        var row = [];\r\n                        for (var i = 0; i < obj.options.columns.length; i++) {\r\n                            row[i] = obj.options.data[j][obj.options.columns[i].name];\r\n                        }\r\n                        data.push(row);\r\n                    }\r\n\r\n                    obj.options.data = data;\r\n                }\r\n            }\r\n\r\n            // Adjust minimal dimensions\r\n            var j = 0;\r\n            var i = 0;\r\n            var size_i = obj.options.columns.length;\r\n            var size_j = obj.options.data.length;\r\n            var min_i = obj.options.minDimensions[0];\r\n            var min_j = obj.options.minDimensions[1];\r\n            var max_i = min_i > size_i ? min_i : size_i;\r\n            var max_j = min_j > size_j ? min_j : size_j;\r\n    \r\n            for (j = 0; j < max_j; j++) {\r\n                for (i = 0; i < max_i; i++) {\r\n                    if (obj.options.data[j] == undefined) {\r\n                        obj.options.data[j] = [];\r\n                    }\r\n    \r\n                    if (obj.options.data[j][i] == undefined) {\r\n                        obj.options.data[j][i] = '';\r\n                    }\r\n                }\r\n            }\r\n    \r\n            // Reset containers\r\n            obj.rows = [];\r\n            obj.results = null;\r\n            obj.records = [];\r\n            obj.history = [];\r\n    \r\n            // Reset internal controllers\r\n            obj.historyIndex = -1;\r\n    \r\n            // Reset data\r\n            obj.tbody.innerHTML = '';\r\n    \r\n            // Lazy loading\r\n            if (obj.options.lazyLoading == true) {\r\n                // Load only 100 records\r\n                var startNumber = 0\r\n                var finalNumber = obj.options.data.length < 100 ? obj.options.data.length : 100;\r\n    \r\n                if (obj.options.pagination) {\r\n                    obj.options.pagination = false;\r\n                    console.error('JEXCEL: Pagination will be disable due the lazyLoading');\r\n                }\r\n            } else if (obj.options.pagination) {\r\n                // Pagination\r\n                if (! obj.pageNumber) {\r\n                    obj.pageNumber = 0;\r\n                }\r\n                var quantityPerPage = obj.options.pagination;\r\n                startNumber = (obj.options.pagination * obj.pageNumber);\r\n                finalNumber = (obj.options.pagination * obj.pageNumber) + obj.options.pagination;\r\n    \r\n                if (obj.options.data.length < finalNumber) {\r\n                    finalNumber = obj.options.data.length;\r\n                }\r\n            } else {\r\n                var startNumber = 0;\r\n                var finalNumber = obj.options.data.length;\r\n            }\r\n    \r\n            // Append nodes to the HTML\r\n            for (j = 0; j < obj.options.data.length; j++) {\r\n                // Create row\r\n                var tr = obj.createRow(j, obj.options.data[j]);\r\n                // Append line to the table\r\n                if (j >= startNumber && j < finalNumber) {\r\n                    obj.tbody.appendChild(tr);\r\n                }\r\n            }\r\n    \r\n            if (obj.options.lazyLoading == true) {\r\n                // Do not create pagination with lazyloading activated\r\n            } else if (obj.options.pagination) {\r\n                obj.updatePagination();\r\n            }\r\n    \r\n            // Merge cells\r\n            if (obj.options.mergeCells) {\r\n                var keys = Object.keys(obj.options.mergeCells);\r\n                for (var i = 0; i < keys.length; i++) {\r\n                    var num = obj.options.mergeCells[keys[i]];\r\n                    obj.setMerge(keys[i], num[0], num[1], 1);\r\n                }\r\n            }\r\n\r\n            // Updata table with custom configurations if applicable\r\n            obj.updateTable();\r\n\r\n            // Onload\r\n            obj.dispatch('onload', el, obj);\r\n        }\r\n\r\n        /**\r\n         * Get the whole table data\r\n         * \r\n         * @param bool get highlighted cells only\r\n         * @return array data\r\n         */\r\n        obj.getData = function(highlighted, dataOnly) {\r\n            // Control vars\r\n            var dataset = [];\r\n            var px = 0;\r\n            var py = 0;\r\n\r\n            // Data type\r\n            var dataType = dataOnly == true || obj.options.copyCompatibility == false ? true : false;\r\n\r\n            // Column and row length\r\n            var x = obj.options.columns.length\r\n            var y = obj.options.data.length\r\n    \r\n            // Go through the columns to get the data\r\n            for (var j = 0; j < y; j++) {\r\n                px = 0;\r\n                for (var i = 0; i < x; i++) {\r\n                    // Cell selected or fullset\r\n                    if (! highlighted || obj.records[j][i].classList.contains('highlight')) {\r\n                        // Get value\r\n                        if (! dataset[py]) {\r\n                            dataset[py] = [];\r\n                        }\r\n                        if (! dataType) {\r\n                            dataset[py][px] = obj.records[j][i].innerHTML;\r\n                        } else {\r\n                            dataset[py][px] = obj.options.data[j][i];\r\n                        }\r\n                        px++;\r\n                    }\r\n                }\r\n                if (px > 0) {\r\n                    py++;\r\n                }\r\n           }\r\n    \r\n           return dataset;\r\n        }\r\n\r\n        /**\r\n        * Get json data by row number\r\n        *\r\n        * @param integer row number\r\n        * @return object\r\n        */\r\n        obj.getJsonRow = function(rowNumber) {\r\n            var rowData = obj.options.data[rowNumber];\r\n            var x = obj.options.columns.length\r\n\r\n            var row = {};\r\n            for (var i = 0; i < x; i++) {\r\n                if (! obj.options.columns[i].name) {\r\n                    obj.options.columns[i].name = i;\r\n                }\r\n                row[obj.options.columns[i].name] = rowData[i];\r\n            }\r\n\r\n            return row;\r\n        }\r\n\r\n        /**\r\n         * Get the whole table data\r\n         * \r\n         * @param bool highlighted cells only\r\n         * @return string value\r\n         */\r\n        obj.getJson = function(highlighted) {\r\n            // Control vars\r\n            var data = [];\r\n    \r\n            // Column and row length\r\n            var x = obj.options.columns.length\r\n            var y = obj.options.data.length\r\n    \r\n            // Go through the columns to get the data\r\n            for (var j = 0; j < y; j++) {\r\n                var row = null;\r\n                for (var i = 0; i < x; i++) {\r\n                    if (! highlighted || obj.records[j][i].classList.contains('highlight')) {\r\n                        if (row == null) {\r\n                            row = {};\r\n                        }\r\n                        if (! obj.options.columns[i].name) {\r\n                            obj.options.columns[i].name = i;\r\n                        }\r\n                        row[obj.options.columns[i].name] = obj.options.data[j][i];\r\n                    }\r\n                }\r\n    \r\n                if (row != null) {\r\n                    data.push(row);\r\n                }\r\n           }\r\n    \r\n           return data;\r\n        }\r\n\r\n        /**\r\n         * Prepare JSON in the correct format\r\n         */\r\n        obj.prepareJson = function(data) {\r\n            var rows = [];\r\n            for (var i = 0; i < data.length; i++) {\r\n                var x = data[i].x;\r\n                var y = data[i].y;\r\n                var k = obj.options.columns[x].name ? obj.options.columns[x].name : x;\r\n\r\n                // Create row\r\n                if (! rows[y]) {\r\n                    rows[y] = {\r\n                        row: y,\r\n                        data: {},\r\n                    };\r\n                }\r\n                rows[y].data[k] = data[i].newValue;\r\n            }\r\n\r\n            // Filter rows\r\n            return rows.filter(function (el) {\r\n                return el != null;\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Post json to a remote server\r\n         */\r\n        obj.save = function(url, data) {\r\n            // Parse anything in the data before sending to the server\r\n            var ret = obj.dispatch('onbeforesave', el, obj, data);\r\n            if (ret) {\r\n                var data = ret;\r\n            } else {\r\n                if (ret === false) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // Remove update\r\n            jSuites.ajax({\r\n                url: url,\r\n                method: 'POST',\r\n                dataType: 'json',\r\n                data: { data: JSON.stringify(data) },\r\n                success: function(result) {\r\n                    // Event\r\n                    obj.dispatch('onsave', el, obj, data);\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Get a row data by rowNumber\r\n         */\r\n        obj.getRowData = function(rowNumber) {\r\n            return obj.options.data[rowNumber];\r\n        }\r\n    \r\n        /**\r\n         * Set a row data by rowNumber\r\n         */\r\n        obj.setRowData = function(rowNumber, data) {\r\n            for (var i = 0; i < obj.headers.length; i++) {\r\n                // Update cell\r\n                var columnName = jexcel.getColumnNameFromId([ i, rowNumber ]);\r\n                // Set value\r\n                if (data[i] != null) {\r\n                    obj.setValue(columnName, data[i]);\r\n                }\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Get a column data by columnNumber\r\n         */\r\n        obj.getColumnData = function(columnNumber) {\r\n            var dataset = [];\r\n            // Go through the rows to get the data\r\n            for (var j = 0; j < obj.options.data.length; j++) {\r\n                dataset.push(obj.options.data[j][columnNumber]);\r\n            }\r\n            return dataset;\r\n        }\r\n    \r\n        /**\r\n         * Set a column data by colNumber\r\n         */\r\n        obj.setColumnData = function(colNumber, data) {\r\n            for (var j = 0; j < obj.rows.length; j++) {\r\n                // Update cell\r\n                var columnName = jexcel.getColumnNameFromId([ colNumber, j ]);\r\n                // Set value\r\n                if (data[j] != null) {\r\n                    obj.setValue(columnName, data[j]);\r\n                }\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Create row\r\n         */\r\n        obj.createRow = function(j, data) {\r\n            // Create container\r\n            if (! obj.records[j]) {\r\n                obj.records[j] = [];\r\n            }\r\n            // Default data\r\n            if (! data) {\r\n                var data = obj.options.data[j];\r\n            }\r\n            // New line of data to be append in the table\r\n            obj.rows[j] = document.createElement('tr');\r\n            obj.rows[j].setAttribute('data-y', j);\r\n            // Index\r\n            var index = null;\r\n            // Definitions\r\n            if (obj.options.rows[j]) {\r\n                if (obj.options.rows[j].height) {\r\n                    obj.rows[j].style.height = obj.options.rows[j].height;\r\n                }\r\n                if (obj.options.rows[j].title) {\r\n                    index = obj.options.rows[j].title;\r\n                }\r\n            }\r\n            if (! index) {\r\n                index = parseInt(j + 1);\r\n            }\r\n            // Row number label\r\n            var td = document.createElement('td');\r\n            td.innerHTML = index;\r\n            td.setAttribute('data-y', j);\r\n            td.className = 'jexcel_row';\r\n            obj.rows[j].appendChild(td);\r\n    \r\n            // Data columns\r\n            for (var i = 0; i < obj.options.columns.length; i++) {\r\n                // New column of data to be append in the line\r\n                obj.records[j][i] = obj.createCell(i, j, data[i]);\r\n                // Add column to the row\r\n                obj.rows[j].appendChild(obj.records[j][i]);\r\n            }\r\n    \r\n            // Add row to the table body\r\n            return obj.rows[j];\r\n        }\r\n    \r\n        obj.parseValue = function(i, j, value) {\r\n            if ((''+value).substr(0,1) == '=' && obj.options.parseFormulas == true) {\r\n                value = obj.executeFormula(value, i, j)\r\n            }\r\n            if (obj.options.columns[i].mask) {\r\n                var decimal = obj.options.columns[i].decimal || '.';\r\n                value = '' + jSuites.mask.run(value, obj.options.columns[i].mask, decimal);\r\n            }\r\n\r\n            return value;\r\n        }\r\n\r\n        /**\r\n         * Create cell\r\n         */\r\n        obj.createCell = function(i, j, value) {\r\n            // Create cell and properties\r\n            var td = document.createElement('td');\r\n            td.setAttribute('data-x', i);\r\n            td.setAttribute('data-y', j);\r\n\r\n            // Security\r\n            if ((''+value).substr(0,1) == '=' && obj.options.secureFormulas == true) {\r\n                var val = secureFormula(value);\r\n                if (val != value) {\r\n                    // Update the data container\r\n                    value = val;\r\n                }\r\n            }\r\n\r\n            // Custom column\r\n            if (obj.options.columns[i].editor) {\r\n                if (obj.options.stripHTML === false || obj.options.columns[i].stripHTML === false) {\r\n                    td.innerHTML = value;\r\n                } else {\r\n                    td.innerText = value;\r\n                }\r\n                if (typeof(obj.options.columns[i].editor.createCell) == 'function') {\r\n                    td = obj.options.columns[i].editor.createCell(td);\r\n                }\r\n            } else {\r\n                // Hidden column\r\n                if (obj.options.columns[i].type == 'hidden') {\r\n                    td.style.display = 'none';\r\n                    td.innerText = value;\r\n                } else if (obj.options.columns[i].type == 'checkbox' || obj.options.columns[i].type == 'radio') {\r\n                    // Create input\r\n                    var element = document.createElement('input');\r\n                    element.type = obj.options.columns[i].type;\r\n                    element.name = 'c' + i;\r\n                    element.checked = (value == 1 || value == true || value == 'true') ? true : false;\r\n                    element.onclick = function() {\r\n                        obj.setValue(td, this.checked);\r\n                    }\r\n\r\n                    if (obj.options.columns[i].readOnly == true || obj.options.editable == false) {\r\n                        element.setAttribute('disabled', 'disabled');\r\n                    }\r\n\r\n                    // Append to the table\r\n                    td.appendChild(element);\r\n                    // Make sure the values are correct\r\n                    obj.options.data[j][i] = element.checked;\r\n                } else if (obj.options.columns[i].type == 'calendar') {\r\n                    // Try formatted date\r\n                    var formatted = jSuites.calendar.extractDateFromString(value, obj.options.columns[i].options.format);\r\n                    // Create calendar cell\r\n                    td.innerText = jSuites.calendar.getDateString(formatted ? formatted : value, obj.options.columns[i].options.format);\r\n                } else if (obj.options.columns[i].type == 'dropdown' || obj.options.columns[i].type == 'autocomplete') {\r\n                    // Create dropdown cell\r\n                    td.classList.add('jexcel_dropdown');\r\n                    td.innerText = obj.getDropDownValue(i, value);\r\n                } else if (obj.options.columns[i].type == 'color') {\r\n                    if (obj.options.columns[i].render == 'square') {\r\n                        var color = document.createElement('div');\r\n                        color.className = 'color';\r\n                        color.style.backgroundColor = value;\r\n                        td.appendChild(color);\r\n                    } else {\r\n                        td.style.color = value;\r\n                        td.innerText = value;\r\n                    }\r\n                } else if (obj.options.columns[i].type == 'image') {\r\n                    if (value && value.substr(0, 10) == 'data:image') {\r\n                        var img = document.createElement('img');\r\n                        img.src = value;\r\n                        td.appendChild(img);\r\n                    }\r\n                } else {\r\n                    if (obj.options.columns[i].type == 'html') {\r\n                        td.innerHTML = stripScript(obj.parseValue(i, j, value));\r\n                    } else {\r\n                        if (obj.options.stripHTML === false || obj.options.columns[i].stripHTML === false) {\r\n                            td.innerHTML = stripScript(obj.parseValue(i, j, value));\r\n                        } else {\r\n                            td.innerText = obj.parseValue(i, j, value);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n    \r\n            // Readonly\r\n            if (obj.options.columns[i].readOnly == true) {\r\n                td.className = 'readonly';\r\n            }\r\n    \r\n            // Text align\r\n            var colAlign = obj.options.columns[i].align ? obj.options.columns[i].align : 'center';\r\n            td.style.textAlign = colAlign;\r\n    \r\n            // Wrap option\r\n            if (obj.options.columns[i].wordWrap != false && (obj.options.wordWrap == true || obj.options.columns[i].wordWrap == true || td.innerHTML.length > 200)) {\r\n                td.style.whiteSpace = 'pre-wrap';\r\n            }\r\n    \r\n            // Overflow\r\n            if (i > 0) {\r\n                if (this.options.textOverflow == true) {\r\n                    if (value || td.innerHTML) {\r\n                        obj.records[j][i-1].style.overflow = 'hidden';\r\n                    } else {\r\n                        if (i == obj.options.columns.length - 1) {\r\n                            td.style.overflow = 'hidden';\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return td;\r\n        }\r\n    \r\n        obj.createCellHeader = function(colNumber) {\r\n            // Create col global control\r\n            var colWidth = obj.options.columns[colNumber].width ? obj.options.columns[colNumber].width : obj.options.defaultColWidth;\r\n            var colAlign = obj.options.columns[colNumber].align ? obj.options.columns[colNumber].align : obj.options.defaultColAlign;\r\n    \r\n            // Create header cell\r\n            obj.headers[colNumber] = document.createElement('td');\r\n            if (obj.options.stripHTML) {\r\n                obj.headers[colNumber].innerText = obj.options.columns[colNumber].title ? obj.options.columns[colNumber].title : jexcel.getColumnName(colNumber);\r\n            } else {\r\n                obj.headers[colNumber].innerHTML = obj.options.columns[colNumber].title ? obj.options.columns[colNumber].title : jexcel.getColumnName(colNumber);\r\n            }\r\n            obj.headers[colNumber].setAttribute('data-x', colNumber);\r\n            obj.headers[colNumber].style.textAlign = colAlign;\r\n            if (obj.options.columns[colNumber].title) {\r\n                obj.headers[colNumber].setAttribute('title', obj.options.columns[colNumber].textContent);\r\n            }\r\n    \r\n            // Width control\r\n            obj.colgroup[colNumber] = document.createElement('col');\r\n            obj.colgroup[colNumber].setAttribute('width', colWidth);\r\n    \r\n            // Hidden column\r\n            if (obj.options.columns[colNumber].type == 'hidden') {\r\n                obj.headers[colNumber].style.display = 'none';\r\n                obj.colgroup[colNumber].style.display = 'none';\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Update a nested header title\r\n         */\r\n        obj.updateNestedHeader = function(x, y, title) {\r\n            if (obj.options.nestedHeaders[y][x].title) {\r\n                obj.options.nestedHeaders[y][x].title = title;\r\n                obj.options.nestedHeaders[y].element.children[x+1].innerText = title;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Create a nested header object\r\n         */\r\n        obj.createNestedHeader = function(nestedInformation) {\r\n            var tr = document.createElement('tr');\r\n            tr.classList.add('jexcel_nested');\r\n            var td = document.createElement('td');\r\n            tr.appendChild(td);\r\n            // Element\r\n            nestedInformation.element = tr;\r\n    \r\n            var headerIndex = 0;\r\n            for (var i = 0; i < nestedInformation.length; i++) {\r\n                // Default values\r\n                if (! nestedInformation[i].colspan) {\r\n                    nestedInformation[i].colspan = 1;\r\n                }\r\n                if (! nestedInformation[i].align) {\r\n                    nestedInformation[i].align = 'center';\r\n                }\r\n                if (! nestedInformation[i].title) {\r\n                    nestedInformation[i].title = '';\r\n                }\r\n    \r\n                // Number of columns\r\n                var numberOfColumns = nestedInformation[i].colspan;\r\n    \r\n                // Classes container\r\n                var column = [];\r\n                // Header classes for this cell\r\n                for (var x = 0; x < numberOfColumns; x++) {\r\n                    if (obj.options.columns[headerIndex] && obj.options.columns[headerIndex].type == 'hidden') {\r\n                        numberOfColumns++;\r\n                    }\r\n                    column.push(headerIndex);\r\n                    headerIndex++;\r\n                }\r\n    \r\n                // Created the nested cell\r\n                var td = document.createElement('td');\r\n                td.setAttribute('data-column', column.join(','));\r\n                td.setAttribute('colspan', nestedInformation[i].colspan);\r\n                td.setAttribute('align', nestedInformation[i].align);\r\n                td.innerText = nestedInformation[i].title;\r\n                tr.appendChild(td);\r\n            }\r\n    \r\n            return tr;\r\n        }\r\n    \r\n        /**\r\n         * Create toolbar\r\n         */\r\n        obj.createToolbar = function(toolbar) {\r\n            if (toolbar) {\r\n                obj.options.toolbar = toolbar;\r\n            } else {\r\n                var toolbar = obj.options.toolbar;\r\n            }\r\n            for (var i = 0; i < toolbar.length; i++) {\r\n                if (toolbar[i].type == 'i') {\r\n                    var toolbarItem = document.createElement('i');\r\n                    toolbarItem.classList.add('jexcel_toolbar_item');\r\n                    toolbarItem.classList.add('material-icons');\r\n                    toolbarItem.setAttribute('data-k', toolbar[i].k);\r\n                    toolbarItem.setAttribute('data-v', toolbar[i].v);\r\n                    toolbarItem.setAttribute('id', toolbar[i].id);\r\n\r\n                    // Tooltip\r\n                    if (toolbar[i].tooltip) {\r\n                        toolbarItem.setAttribute('title', toolbar[i].tooltip);\r\n                    }\r\n                    // Handle click\r\n                    if (toolbar[i].onclick && typeof(toolbar[i].onclick)) {\r\n                        toolbarItem.onclick = (function (a) {\r\n                            var b = a;\r\n                            return function () {\r\n                                toolbar[b].onclick(el, obj, this);\r\n                            };\r\n                        })(i);\r\n                    } else {\r\n                        toolbarItem.onclick = function() {\r\n                            var k = this.getAttribute('data-k');\r\n                            var v = this.getAttribute('data-v');\r\n                            obj.setStyle(obj.highlighted, k, v);\r\n                        }\r\n                    }\r\n                    // Append element\r\n                    toolbarItem.innerText = toolbar[i].content;\r\n                    obj.toolbar.appendChild(toolbarItem);\r\n                } else if (toolbar[i].type == 'select') {\r\n                   var toolbarItem = document.createElement('select');\r\n                   toolbarItem.classList.add('jexcel_toolbar_item');\r\n                   toolbarItem.setAttribute('data-k', toolbar[i].k);\r\n                   // Tooltip\r\n                   if (toolbar[i].tooltip) {\r\n                       toolbarItem.setAttribute('title', toolbar[i].tooltip);\r\n                   }\r\n                   // Handle onchange\r\n                   if (toolbar[i].onchange && typeof(toolbar[i].onchange)) {\r\n                       toolbarItem.onchange = toolbar[i].onchange;\r\n                   } else {\r\n                       toolbarItem.onchange = function() {\r\n                           var k = this.getAttribute('data-k');\r\n                           obj.setStyle(obj.highlighted, k, this.value);\r\n                       }\r\n                   }\r\n                   // Add options to the dropdown\r\n                   for(var j = 0; j < toolbar[i].v.length; j++) {\r\n                        var toolbarDropdownOption = document.createElement('option');\r\n                        toolbarDropdownOption.value = toolbar[i].v[j];\r\n                        toolbarDropdownOption.innerText = toolbar[i].v[j];\r\n                        toolbarItem.appendChild(toolbarDropdownOption);\r\n                   }\r\n                   obj.toolbar.appendChild(toolbarItem);\r\n                } else if (toolbar[i].type == 'color') {\r\n                     var toolbarItem = document.createElement('i');\r\n                     toolbarItem.classList.add('jexcel_toolbar_item');\r\n                     toolbarItem.classList.add('material-icons');\r\n                     toolbarItem.setAttribute('data-k', toolbar[i].k);\r\n                     toolbarItem.setAttribute('data-v', '');\r\n                     // Tooltip\r\n                     if (toolbar[i].tooltip) {\r\n                         toolbarItem.setAttribute('title', toolbar[i].tooltip);\r\n                     }\r\n                     obj.toolbar.appendChild(toolbarItem);\r\n                     toolbarItem.innerText = toolbar[i].content;\r\n                     jSuites.color(toolbarItem, {\r\n                         onchange:function(o, v) {\r\n                             var k = o.getAttribute('data-k');\r\n                             obj.setStyle(obj.highlighted, k, v);\r\n                         }\r\n                     });\r\n                }\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Merge cells\r\n         * @param cellName\r\n         * @param colspan\r\n         * @param rowspan\r\n         * @param ignoreHistoryAndEvents\r\n         */\r\n        obj.setMerge = function(cellName, colspan, rowspan, ignoreHistoryAndEvents) {\r\n            var test = false;\r\n    \r\n            if (! cellName) {\r\n                if (! obj.highlighted.length) {\r\n                    alert(obj.options.text.noCellsSelected);\r\n                    return null;\r\n                } else {\r\n                    var x1 = parseInt(obj.highlighted[0].getAttribute('data-x'));\r\n                    var y1 = parseInt(obj.highlighted[0].getAttribute('data-y'));\r\n                    var x2 = parseInt(obj.highlighted[obj.highlighted.length-1].getAttribute('data-x'));\r\n                    var y2 = parseInt(obj.highlighted[obj.highlighted.length-1].getAttribute('data-y'));\r\n                    var cellName = jexcel.getColumnNameFromId([ x1, y1 ]);\r\n                    var colspan = (x2 - x1) + 1;\r\n                    var rowspan = (y2 - y1) + 1;\r\n                }\r\n            }\r\n    \r\n            var cell = jexcel.getIdFromColumnName(cellName, true);\r\n    \r\n            if (obj.options.mergeCells[cellName]) {\r\n                if (obj.records[cell[1]][cell[0]].getAttribute('data-merged')) {\r\n                    test = obj.options.text.cellAlreadyMerged;\r\n                }\r\n            } else if ((! colspan || colspan < 2) && (! rowspan || rowspan < 2)) {\r\n                test = obj.options.text.invalidMergeProperties;\r\n            } else {\r\n                var cells = [];\r\n                for (var j = cell[1]; j < cell[1] + rowspan; j++) {\r\n                    for (var i = cell[0]; i < cell[0] + colspan; i++) {\r\n                        var columnName = jexcel.getColumnNameFromId([i, j]);\r\n                        if (obj.records[j][i].getAttribute('data-merged')) {\r\n                            test = obj.options.text.thereIsAConflictWithAnotherMergedCell;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n    \r\n            if (test) {\r\n                alert(test);\r\n            } else {\r\n                // Add property\r\n                if (colspan > 1) {\r\n                    obj.records[cell[1]][cell[0]].setAttribute('colspan', colspan);\r\n                } else {\r\n                    colspan = 1;\r\n                }\r\n                if (rowspan > 1) {\r\n                    obj.records[cell[1]][cell[0]].setAttribute('rowspan', rowspan);\r\n                } else {\r\n                    rowspan = 1;\r\n                }\r\n                // Keep links to the existing nodes\r\n                obj.options.mergeCells[cellName] = [ colspan, rowspan, [] ];\r\n                // Mark cell as merged\r\n                obj.records[cell[1]][cell[0]].setAttribute('data-merged', 'true');\r\n                // Overflow\r\n                obj.records[cell[1]][cell[0]].style.overflow = 'hidden';\r\n                // History data\r\n                var data = [];\r\n                // Adjust the nodes\r\n                for (var y = cell[1]; y < cell[1] + rowspan; y++) {\r\n                    for (var x = cell[0]; x < cell[0] + colspan; x++) {\r\n                        if (! (cell[0] == x && cell[1] == y)) {\r\n                            data.push(obj.options.data[y][x]);\r\n                            obj.updateCell(x, y, '', true);\r\n                            obj.options.mergeCells[cellName][2].push(obj.records[y][x]);\r\n                            obj.records[y][x].style.display = 'none';\r\n                            obj.records[y][x] = obj.records[cell[1]][cell[0]];\r\n                        }\r\n                    }\r\n                }\r\n                // In the initialization is not necessary keep the history\r\n                obj.updateSelection(obj.records[cell[1]][cell[0]]);\r\n    \r\n                if (! ignoreHistoryAndEvents) {\r\n                    obj.setHistory({\r\n                        action:'setMerge',\r\n                        column:cellName,\r\n                        colspan:colspan,\r\n                        rowspan:rowspan,\r\n                        data:data,\r\n                    });\r\n    \r\n                    obj.dispatch('onmerge', el, cellName, colspan, rowspan);\r\n                }\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Merge cells\r\n         * @param cellName\r\n         * @param colspan\r\n         * @param rowspan\r\n         * @param ignoreHistoryAndEvents\r\n         */\r\n        obj.getMerge = function(cellName) {\r\n            var data = {};\r\n            if (cellName) {\r\n                if (obj.options.mergeCells[cellName]) {\r\n                    data = [ obj.options.mergeCells[cellName][0], obj.options.mergeCells[cellName][1] ];\r\n                } else {\r\n                    data = null;\r\n                }\r\n            } else {\r\n                if (obj.options.mergeCells) {\r\n                    var mergedCells = obj.options.mergeCells;\r\n                    var keys = Object.keys(obj.options.mergeCells);\r\n                    for (var i = 0; i < keys.length; i++) {\r\n                        data[keys[i]] = [ obj.options.mergeCells[keys[i]][0], obj.options.mergeCells[keys[i]][1] ];\r\n                    }\r\n                }\r\n            }\r\n    \r\n            return data;\r\n        }\r\n    \r\n        /**\r\n         * Remove merge by cellname\r\n         * @param cellName\r\n         */\r\n        obj.removeMerge = function(cellName, data, keepOptions) {\r\n            if (obj.options.mergeCells[cellName]) {\r\n                var cell = jexcel.getIdFromColumnName(cellName, true);\r\n                obj.records[cell[1]][cell[0]].removeAttribute('colspan');\r\n                obj.records[cell[1]][cell[0]].removeAttribute('rowspan');\r\n                obj.records[cell[1]][cell[0]].removeAttribute('data-merged');\r\n                var info = obj.options.mergeCells[cellName];\r\n    \r\n                var index = 0;\r\n                for (var j = 0; j < info[1]; j++) {\r\n                    for (var i = 0; i < info[0]; i++) {\r\n                        if (j > 0 || i > 0) {\r\n                            obj.records[cell[1]+j][cell[0]+i] = info[2][index];\r\n                            obj.records[cell[1]+j][cell[0]+i].style.display = '';\r\n                            // Recover data\r\n                            if (data && data[index]) {\r\n                                obj.updateCell(cell[0]+i, cell[1]+j, data[index]);\r\n                            }\r\n                            index++;\r\n                        }\r\n                    }\r\n                }\r\n    \r\n                // Update selection\r\n                obj.updateSelection(obj.records[cell[1]][cell[0]], obj.records[cell[1]+j-1][cell[0]+i-1]);\r\n    \r\n                if (! keepOptions) {\r\n                    delete(obj.options.mergeCells[cellName]);\r\n                }\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Remove all merged cells\r\n         */\r\n        obj.destroyMerged = function(keepOptions) {\r\n            // Remove any merged cells\r\n            if (obj.options.mergeCells) {\r\n                var mergedCells = obj.options.mergeCells;\r\n                var keys = Object.keys(obj.options.mergeCells);\r\n                for (var i = 0; i < keys.length; i++) {\r\n                    obj.removeMerge(keys[i], null, keepOptions);\r\n                }\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Is column merged\r\n         */\r\n        obj.isColMerged = function(x, insertBefore) {\r\n            var cols = [];\r\n            // Remove any merged cells\r\n            if (obj.options.mergeCells) {\r\n                var keys = Object.keys(obj.options.mergeCells);\r\n                for (var i = 0; i < keys.length; i++) {\r\n                    var info = jexcel.getIdFromColumnName(keys[i], true);\r\n                    var colspan = obj.options.mergeCells[keys[i]][0];\r\n                    var x1 = info[0];\r\n                    var x2 = info[0] + (colspan > 1 ? colspan - 1 : 0);\r\n    \r\n                    if (insertBefore == null) {\r\n                        if ((x1 <= x && x2 >= x)) {\r\n                            cols.push(keys[i]);\r\n                        }\r\n                    } else {\r\n                        if (insertBefore) {\r\n                            if ((x1 < x && x2 >= x)) {\r\n                                cols.push(keys[i]);\r\n                            }\r\n                        } else {\r\n                            if ((x1 <= x && x2 > x)) {\r\n                                cols.push(keys[i]);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n    \r\n            return cols;\r\n        }\r\n    \r\n        /**\r\n         * Is rows merged\r\n         */\r\n        obj.isRowMerged = function(y, insertBefore) {\r\n            var rows = [];\r\n            // Remove any merged cells\r\n            if (obj.options.mergeCells) {\r\n                var keys = Object.keys(obj.options.mergeCells);\r\n                for (var i = 0; i < keys.length; i++) {\r\n                    var info = jexcel.getIdFromColumnName(keys[i], true);\r\n                    var rowspan = obj.options.mergeCells[keys[i]][1];\r\n                    var y1 = info[1];\r\n                    var y2 = info[1] + (rowspan > 1 ? rowspan - 1 : 0);\r\n    \r\n                    if (insertBefore == null) {\r\n                        if ((y1 <= y && y2 >= y)) {\r\n                            rows.push(keys[i]);\r\n                        }\r\n                    } else {\r\n                        if (insertBefore) {\r\n                            if ((y1 < y && y2 >= y)) {\r\n                                rows.push(keys[i]);\r\n                            }\r\n                        } else {\r\n                            if ((y1 <= y && y2 > y)) {\r\n                                rows.push(keys[i]);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n    \r\n            return rows;\r\n        }\r\n\r\n        /**\r\n         * Open the column filter\r\n         */\r\n        obj.openFilter = function(columnId) {\r\n            if (! obj.options.filters) {\r\n                console.log('JEXCEL: filters not enabled.');\r\n            } else {\r\n                // Make sure is integer\r\n                columnId = parseInt(columnId);\r\n                // Reset selection\r\n                obj.resetSelection();\r\n                // Load options\r\n                var optionsFiltered = [];\r\n                if (obj.options.columns[columnId].type == 'checkbox') {\r\n                    optionsFiltered.push({ id: 'true', name: 'True' });\r\n                    optionsFiltered.push({ id: 'false', name: 'False' });\r\n                } else {\r\n                    var options = [];\r\n                    var hasBlanks = false;\r\n                    for (var j = 0; j < obj.options.data.length; j++) {\r\n                        var k = obj.options.data[j][columnId];\r\n                        var v = obj.records[j][columnId].innerHTML;\r\n                        if (k && v) {\r\n                            options[k] = v;\r\n                        } else {\r\n                            var hasBlanks = true;\r\n                        }\r\n                    }\r\n                    var keys = Object.keys(options);\r\n                    var optionsFiltered = [];\r\n                    for (var j = 0; j < keys.length; j++) {\r\n                        optionsFiltered.push({ id: keys[j], name: options[keys[j]] });\r\n                    }\r\n                    // Has blank options\r\n                    if (hasBlanks) {\r\n                        optionsFiltered.push({ value: '', id: '', name: '(Blanks)' });\r\n                    }\r\n                }\r\n\r\n                // Create dropdown\r\n                var div = document.createElement('div');\r\n                obj.filter.children[columnId + 1].innerHTML = '';\r\n                obj.filter.children[columnId + 1].appendChild(div);\r\n                obj.filter.children[columnId + 1].style.paddingLeft = '0px';\r\n                obj.filter.children[columnId + 1].style.paddingRight = '0px';\r\n                obj.filter.children[columnId + 1].style.overflow = 'initial';\r\n\r\n                var opt = {\r\n                    data: optionsFiltered,\r\n                    multiple: true,\r\n                    autocomplete: true,\r\n                    opened: true,\r\n                    value: obj.filters[columnId] !== undefined ? obj.filters[columnId] : null,\r\n                    width:'100%',\r\n                    position: (obj.options.tableOverflow == true || obj.options.fullscreen == true) ? true : false,\r\n                    onclose: function(o) {\r\n                        obj.resetFilters();\r\n                        obj.filters[columnId] = o.dropdown.getValue(true);\r\n                        obj.filter.children[columnId + 1].innerHTML = o.dropdown.getText();\r\n                        obj.filter.children[columnId + 1].style.paddingLeft = '';\r\n                        obj.filter.children[columnId + 1].style.paddingRight = '';\r\n                        obj.filter.children[columnId + 1].style.overflow = '';\r\n                        obj.closeFilter(columnId);\r\n                        obj.refreshSelection();\r\n                    }\r\n                };\r\n\r\n                // Dynamic dropdown\r\n                jSuites.dropdown(div, opt);\r\n            }\r\n        }\r\n\r\n        obj.resetFilters = function() {\r\n            if (obj.options.filters) {\r\n                for (var i = 0; i < obj.filter.children.length; i++) {\r\n                    obj.filter.children[i].innerHTML = '&nbsp;';\r\n                    obj.filters[i] = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        obj.closeFilter = function(columnId) {\r\n            if (! columnId) {\r\n                for (var i = 0; i < obj.filter.children.length; i++) {\r\n                    if (obj.filters[i]) {\r\n                        columnId = i;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Search filter\r\n            var search = function(query, x, y) {\r\n                for (var i = 0; i < query.length; i++) {\r\n                    if ((query[i] == '' && // Blank matching\r\n                        ((obj.options.data[y][x] === false) || // Unchecked checkbox\r\n                        (''+obj.options.data[y][x]) == '')) || // Blank non-checkbox value\r\n                        ((query[i] != '' && // Normal non-blank filtering\r\n                        ((''+obj.options.data[y][x]).search(query[i]) >= 0 ||\r\n                        (''+obj.records[y][x].innerHTML).search(query[i]) >= 0)))) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n\r\n            var query = obj.filters[columnId];\r\n            obj.results = [];\r\n            for (var j = 0; j < obj.options.data.length; j++) {\r\n                if (search(query, columnId, j)) {\r\n                    obj.results.push(j);\r\n                }\r\n            }\r\n            if (! obj.results.length) {\r\n                obj.results = null;\r\n            }\r\n\r\n            obj.updateResult();\r\n        }\r\n\r\n        /**\r\n         * Open the editor\r\n         * \r\n         * @param object cell\r\n         * @return void\r\n         */\r\n        obj.openEditor = function(cell, empty, e) {\r\n            // Get cell position\r\n            var y = cell.getAttribute('data-y');\r\n            var x = cell.getAttribute('data-x');\r\n    \r\n            // On edition start\r\n            obj.dispatch('oneditionstart', el, cell, x, y);\r\n    \r\n            // Overflow\r\n            if (x > 0) {\r\n                obj.records[y][x-1].style.overflow = 'hidden';\r\n            }\r\n    \r\n            // Create editor\r\n            var createEditor = function(type) {\r\n                // Cell information\r\n                var info = cell.getBoundingClientRect();\r\n    \r\n                // Create dropdown\r\n                var editor = document.createElement(type);\r\n                editor.style.width = (info.width) + 'px';\r\n                editor.style.height = (info.height - 2) + 'px';\r\n                editor.style.minHeight = (info.height - 2) + 'px';\r\n    \r\n                // Edit cell\r\n                cell.classList.add('editor');\r\n                cell.innerHTML = '';\r\n                cell.appendChild(editor);\r\n    \r\n                // On edition start\r\n                obj.dispatch('oncreateeditor', el, cell, x, y, editor);\r\n\r\n                return editor;\r\n            }\r\n    \r\n            // Readonly\r\n            if (cell.classList.contains('readonly') == true) {\r\n                // Do nothing\r\n            } else {\r\n                // Holder\r\n                obj.edition = [ obj.records[y][x], obj.records[y][x].innerHTML, x, y ];\r\n    \r\n                // If there is a custom editor for it\r\n                if (obj.options.columns[x].editor) {\r\n                    // Custom editors\r\n                    obj.options.columns[x].editor.openEditor(cell, el, empty, e);\r\n                } else {\r\n                    // Native functions\r\n                    if (obj.options.columns[x].type == 'hidden') {\r\n                        // Do nothing\r\n                    } else if (obj.options.columns[x].type == 'checkbox' || obj.options.columns[x].type == 'radio') {\r\n                        // Get value\r\n                        var value = cell.children[0].checked ? false : true;\r\n                        // Toogle value\r\n                        obj.setValue(cell, value);\r\n                        // Do not keep edition open\r\n                        obj.edition = null;\r\n                    } else if (obj.options.columns[x].type == 'dropdown' || obj.options.columns[x].type == 'autocomplete') {\r\n                        // Get current value\r\n                        var value = obj.options.data[y][x];\r\n                        if (obj.options.columns[x].multiple && !Array.isArray(value)) {\r\n                            value = value.split(';');\r\n                        }\r\n    \r\n                        // Create dropdown\r\n                        if (typeof(obj.options.columns[x].filter) == 'function') {\r\n                            var source = obj.options.columns[x].filter(el, cell, x, y, obj.options.columns[x].source);\r\n                        } else {\r\n                            var source = obj.options.columns[x].source;\r\n                        }\r\n    \r\n                        // Do not change the original source\r\n                        var data = [];\r\n                        for (var j = 0; j < source.length; j++) {\r\n                            data.push(source[j]);\r\n                        }\r\n\r\n                        // Create editor\r\n                        var editor = createEditor('div');\r\n                        var options = {\r\n                            data: data,\r\n                            multiple: obj.options.columns[x].multiple ? true : false,\r\n                            autocomplete: obj.options.columns[x].autocomplete || obj.options.columns[x].type == 'autocomplete' ? true : false,\r\n                            opened:true,\r\n                            value: value,\r\n                            width:'100%',\r\n                            height:editor.style.minHeight,\r\n                            position: (obj.options.tableOverflow == true || obj.options.fullscreen == true) ? true : false,\r\n                            onclose:function() {\r\n                                obj.closeEditor(cell, true);\r\n                            }\r\n                        };\r\n                        if (obj.options.columns[x].options && obj.options.columns[x].options.type) {\r\n                            options.type = obj.options.columns[x].options.type;\r\n                        }\r\n                        jSuites.dropdown(editor, options);\r\n                    } else if (obj.options.columns[x].type == 'calendar' || obj.options.columns[x].type == 'color') {\r\n                        // Value\r\n                        var value = obj.options.data[y][x];\r\n                        // Create editor\r\n                        var editor = createEditor('input');\r\n                        editor.value = value;\r\n    \r\n                        if (obj.options.tableOverflow == true || obj.options.fullscreen == true) {\r\n                            obj.options.columns[x].options.position = true;\r\n                        }\r\n                        obj.options.columns[x].options.value = obj.options.data[y][x];\r\n                        obj.options.columns[x].options.opened = true;\r\n                        obj.options.columns[x].options.onclose = function(el, value) {\r\n                            obj.closeEditor(cell, true);\r\n                        }\r\n                        // Current value\r\n                        if (obj.options.columns[x].type == 'color') {\r\n                            jSuites.color(editor, obj.options.columns[x].options);\r\n                        } else {\r\n                            jSuites.calendar(editor, obj.options.columns[x].options);\r\n                        }\r\n                        // Focus on editor\r\n                        editor.focus();\r\n                    } else if (obj.options.columns[x].type == 'html') {\r\n                        var value = obj.options.data[y][x];\r\n                        // Create editor\r\n                        var editor = createEditor('div');\r\n                        editor.style.position = 'relative';\r\n                        var div = document.createElement('div');\r\n                        div.classList.add('jexcel_richtext');\r\n                        editor.appendChild(div);\r\n                        jSuites.editor(div, {\r\n                            focus: true,\r\n                            value: value,\r\n                        });\r\n                        var rect = cell.getBoundingClientRect();\r\n                        var rectContent = div.getBoundingClientRect();\r\n                        if (window.innerHeight < rect.bottom + rectContent.height) {\r\n                            div.style.top = (rect.top - (rectContent.height + 2)) + 'px';\r\n                        } else {\r\n                            div.style.top = (rect.top) + 'px';\r\n                        }\r\n                    } else if (obj.options.columns[x].type == 'image') {\r\n                        // Value\r\n                        var img = cell.children[0];\r\n                        // Create editor\r\n                        var editor = createEditor('div');\r\n                        editor.style.position = 'relative';\r\n                        var div = document.createElement('div');\r\n                        div.classList.add('jclose');\r\n                        if (img && img.src) {\r\n                            div.appendChild(img);\r\n                        }\r\n                        editor.appendChild(div);\r\n                        jSuites.image(div, obj.options.imageOptions);\r\n                        var rect = cell.getBoundingClientRect();\r\n                        var rectContent = div.getBoundingClientRect();\r\n                        if (window.innerHeight < rect.bottom + rectContent.height) {\r\n                            div.style.top = (rect.top - (rectContent.height + 2)) + 'px';\r\n                        } else {\r\n                            div.style.top = (rect.top) + 'px';\r\n                        }\r\n                    } else {\r\n                        // Value\r\n                        var value = empty == true ? '' : obj.options.data[y][x];\r\n    \r\n                        // Basic editor\r\n                        if (obj.options.columns[x].wordWrap != false && (obj.options.wordWrap == true || obj.options.columns[x].wordWrap == true)) {\r\n                            var editor = createEditor('textarea');\r\n                        } else {\r\n                            var editor = createEditor('input');\r\n                            // Mask\r\n                            if (obj.options.columns[x].mask) {\r\n                                editor.setAttribute('data-mask', obj.options.columns[x].mask);\r\n                            }\r\n                        }\r\n    \r\n                        editor.onblur = function() {\r\n                            obj.closeEditor(cell, true);\r\n                        };\r\n                        editor.focus();\r\n                        editor.value = value;\r\n                        editor.scrollLeft = editor.scrollWidth;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Close the editor and save the information\r\n         * \r\n         * @param object cell\r\n         * @param boolean save\r\n         * @return void\r\n         */\r\n        obj.closeEditor = function(cell, save) {\r\n            var x = parseInt(cell.getAttribute('data-x'));\r\n            var y = parseInt(cell.getAttribute('data-y'));\r\n\r\n            // Get cell properties\r\n            if (save == true) {\r\n                // If custom editor\r\n                if (obj.options.columns[x].editor) {\r\n                    // Custom editor\r\n                    var value = obj.options.columns[x].editor.closeEditor(cell, save);\r\n                } else {\r\n                    // Native functions\r\n                    if (obj.options.columns[x].type == 'checkbox' || obj.options.columns[x].type == 'radio' || obj.options.columns[x].type == 'hidden') {\r\n                        // Do nothing\r\n                    } else if (obj.options.columns[x].type == 'dropdown' || obj.options.columns[x].type == 'autocomplete') {\r\n                        var value = cell.children[0].dropdown.close(true);\r\n                    } else if (obj.options.columns[x].type == 'calendar') {\r\n                        var value = cell.children[0].calendar.close(true);\r\n                    } else if (obj.options.columns[x].type == 'color') {\r\n                        var value = cell.children[0].color.close(true);\r\n                    } else if (obj.options.columns[x].type == 'html') {\r\n                        var value = cell.children[0].children[0].editor.getData();\r\n                    } else if (obj.options.columns[x].type == 'image') {\r\n                        var img = cell.children[0].children[0].children[0];\r\n                        var value = img && img.tagName == 'IMG' ? img.src : '';\r\n                    } else if (obj.options.columns[x].type == 'numeric') {\r\n                        var value = cell.children[0].value;\r\n                        if (value.substr(0,1) != '=') {\r\n                            if (value == '') {\r\n                                value = obj.options.columns[x].allowEmpty ? '' : 0;\r\n                            }\r\n                        }\r\n                        cell.children[0].onblur = null;\r\n                    } else {\r\n                        var value = cell.children[0].value;\r\n                        cell.children[0].onblur = null;\r\n                    }\r\n                }\r\n\r\n                // Ignore changes if the value is the same\r\n                if (obj.options.data[y][x] == value) {\r\n                    cell.innerHTML = obj.edition[1];\r\n                } else {\r\n                    obj.setValue(cell, value);\r\n                }\r\n            } else {\r\n                if (obj.options.columns[x].editor) {\r\n                    // Custom editor\r\n                    obj.options.columns[x].editor.closeEditor(cell, save);\r\n                } else {\r\n                    if (obj.options.columns[x].type == 'dropdown' || obj.options.columns[x].type == 'autocomplete') {\r\n                        cell.children[0].dropdown.close(true);\r\n                    } else if (obj.options.columns[x].type == 'calendar') {\r\n                        cell.children[0].calendar.close(true);\r\n                    } else if (obj.options.columns[x].type == 'color') {\r\n                        cell.children[0].color.close(true);\r\n                    } else {\r\n                        cell.children[0].onblur = null;\r\n                    }\r\n                }\r\n    \r\n                // Restore value\r\n                cell.innerHTML = obj.edition && obj.edition[1] ? obj.edition[1] : '';\r\n            }\r\n    \r\n            // On edition end\r\n            obj.dispatch('oneditionend', el, cell, x, y, value, save);\r\n\r\n            // Remove editor class\r\n            cell.classList.remove('editor');\r\n    \r\n            // Finish edition\r\n            obj.edition = null;\r\n        }\r\n    \r\n        /**\r\n         * Get the cell object\r\n         * \r\n         * @param object cell\r\n         * @return string value\r\n         */\r\n        obj.getCell = function(cell) {\r\n            // Convert in case name is excel liked ex. A10, BB92\r\n            cell = jexcel.getIdFromColumnName(cell, true);\r\n            var x = cell[0];\r\n            var y = cell[1];\r\n    \r\n            return obj.records[y][x];\r\n        }\r\n    \r\n        /**\r\n         * Get the cell object from coords\r\n         * \r\n         * @param object cell\r\n         * @return string value\r\n         */\r\n        obj.getCellFromCoords = function(x, y) {\r\n            return obj.records[y][x];\r\n        }\r\n    \r\n        /**\r\n         * Get label\r\n         * \r\n         * @param object cell\r\n         * @return string value\r\n         */\r\n        obj.getLabel = function(cell) {\r\n            // Convert in case name is excel liked ex. A10, BB92\r\n            cell = jexcel.getIdFromColumnName(cell, true);\r\n            var x = cell[0];\r\n            var y = cell[1];\r\n    \r\n            return obj.records[y][x].innerHTML;\r\n        }\r\n    \r\n        /**\r\n         * Get labelfrom coords\r\n         * \r\n         * @param object cell\r\n         * @return string value\r\n         */\r\n        obj.getLabelFromCoords = function(x, y) {\r\n            return obj.records[y][x].innerHTML;\r\n        }\r\n    \r\n        /**\r\n         * Get the value from a cell\r\n         * \r\n         * @param object cell\r\n         * @return string value\r\n         */\r\n        obj.getValue = function(cell, processedValue) {\r\n            if (typeof(cell) == 'object') {\r\n                var x = cell.getAttribute('data-x');\r\n                var y = cell.getAttribute('data-y');\r\n            } else {\r\n                cell = jexcel.getIdFromColumnName(cell, true);\r\n                var x = cell[0];\r\n                var y = cell[1];\r\n            }\r\n    \r\n            var value = null;\r\n    \r\n            if (x != null && y != null) {\r\n                if (obj.records[y] && obj.records[y][x] && (processedValue || obj.options.copyCompatibility == true)) {\r\n                    value = obj.records[y][x].innerHTML;\r\n                } else {\r\n                    if (obj.options.data[y] && obj.options.data[y][x] != 'undefined') {\r\n                        value = obj.options.data[y][x];\r\n                    }\r\n                }\r\n            }\r\n    \r\n            return value;\r\n        }\r\n    \r\n        /**\r\n         * Get the value from a coords\r\n         * \r\n         * @param int x\r\n         * @param int y\r\n         * @return string value\r\n         */\r\n        obj.getValueFromCoords = function(x, y, processedValue) {\r\n            var value = null;\r\n    \r\n            if (x != null && y != null) {\r\n                if ((obj.records[y] && obj.records[y][x]) && processedValue || obj.options.copyCompatibility == true) {\r\n                    value = obj.records[y][x].innerHTML;\r\n                } else {\r\n                    if (obj.options.data[y] && obj.options.data[y][x] != 'undefined') {\r\n                        value = obj.options.data[y][x];\r\n                    }\r\n                }\r\n            }\r\n    \r\n            return value;\r\n        }\r\n    \r\n        /**\r\n         * Set a cell value\r\n         * \r\n         * @param mixed cell destination cell\r\n         * @param string value value\r\n         * @return void\r\n         */\r\n        obj.setValue = function(cell, value, force) {\r\n            var records = [];\r\n    \r\n            if (typeof(cell) == 'string') {\r\n                var columnId = jexcel.getIdFromColumnName(cell, true);\r\n                var x = columnId[0];\r\n                var y = columnId[1];\r\n    \r\n                // Update cell\r\n                records.push(obj.updateCell(x, y, value, force));\r\n    \r\n                // Update all formulas in the chain\r\n                obj.updateFormulaChain(x, y, records);\r\n            } else {\r\n                var x = null;\r\n                var y = null;\r\n                if (cell && cell.getAttribute) {\r\n                    var x = cell.getAttribute('data-x');\r\n                    var y = cell.getAttribute('data-y');\r\n                }\r\n    \r\n                // Update cell\r\n                if (x != null && y != null) {\r\n                    records.push(obj.updateCell(x, y, value, force));\r\n    \r\n                    // Update all formulas in the chain\r\n                    obj.updateFormulaChain(x, y, records);\r\n                } else {\r\n                    var keys = Object.keys(cell);\r\n                    if (keys.length > 0) {\r\n                        for (var i = 0; i < keys.length; i++) {\r\n                            if (typeof(cell[i]) == 'string') {\r\n                                var columnId = jexcel.getIdFromColumnName(cell[i], true);\r\n                                var x = columnId[0];\r\n                                var y = columnId[1];\r\n                            } else {\r\n                                if (cell[i].x != null && cell[i].y != null) {\r\n                                    var x = cell[i].x;\r\n                                    var y = cell[i].y;\r\n                                    // Flexible setup\r\n                                    if (cell[i].newValue != null) {\r\n                                        value = cell[i].newValue;\r\n                                    } else if (cell[i].value != null) {\r\n                                        value = cell[i].value;\r\n                                    }\r\n                                } else {\r\n                                    var x = cell[i].getAttribute('data-x');\r\n                                    var y = cell[i].getAttribute('data-y');\r\n                                }\r\n                            }\r\n    \r\n                             // Update cell\r\n                            if (x != null && y != null) {\r\n                                records.push(obj.updateCell(x, y, value, force));\r\n    \r\n                                // Update all formulas in the chain\r\n                                obj.updateFormulaChain(x, y, records);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n    \r\n            // Update history\r\n            obj.setHistory({\r\n                action:'setValue',\r\n                records:records,\r\n                selection:obj.selectedCell,\r\n            });\r\n    \r\n            // Update table with custom configurations if applicable\r\n            obj.updateTable();\r\n    \r\n            // On after changes\r\n            obj.onafterchanges(el, records);\r\n        }\r\n    \r\n        /**\r\n         * Set a cell value based on coordinates\r\n         * \r\n         * @param int x destination cell\r\n         * @param int y destination cell\r\n         * @param string value\r\n         * @return void\r\n         */\r\n        obj.setValueFromCoords = function(x, y, value, force) {\r\n            var records = [];\r\n            records.push(obj.updateCell(x, y, value, force));\r\n    \r\n            // Update all formulas in the chain\r\n            obj.updateFormulaChain(x, y, records);\r\n    \r\n            // Update history\r\n            obj.setHistory({\r\n                action:'setValue',\r\n                records:records,\r\n                selection:obj.selectedCell,\r\n            });\r\n    \r\n            // Update table with custom configurations if applicable\r\n            obj.updateTable();\r\n    \r\n            // On after changes\r\n            obj.onafterchanges(el, records);\r\n        }\r\n    \r\n        /**\r\n         * Toogle\r\n         */\r\n        obj.setCheckRadioValue = function() {\r\n            var records = [];\r\n            var keys = Object.keys(obj.highlighted);\r\n            for (var i = 0; i < keys.length; i++) {\r\n                var x = obj.highlighted[i].getAttribute('data-x');\r\n                var y = obj.highlighted[i].getAttribute('data-y');\r\n    \r\n                if (obj.options.columns[x].type == 'checkbox' || obj.options.columns[x].type == 'radio') {\r\n                    // Update cell\r\n                    records.push(obj.updateCell(x, y, ! obj.options.data[y][x]));\r\n                }\r\n            }\r\n    \r\n            if (records.length) {\r\n                // Update history\r\n                obj.setHistory({\r\n                    action:'setValue',\r\n                    records:records,\r\n                    selection:obj.selectedCell,\r\n                });\r\n    \r\n                // On after changes\r\n                obj.onafterchanges(el, records);\r\n            }\r\n        }\r\n        /**\r\n         * Strip tags\r\n         */\r\n        var stripScript = function(a) {\r\n            var b = new Option;\r\n            b.innerHTML = a;\r\n            var c = null;\r\n            for (a = b.getElementsByTagName('script'); c=a[0];) c.parentNode.removeChild(c);\r\n            return b.innerHTML;\r\n        }\r\n\r\n        /**\r\n         * Update cell content\r\n         * \r\n         * @param object cell\r\n         * @return void\r\n         */\r\n        obj.updateCell = function(x, y, value, force) {\r\n            // Changing value depending on the column type\r\n            if (obj.records[y][x].classList.contains('readonly') == true && ! force) {\r\n                // Do nothing\r\n                var record = {\r\n                    x: x,\r\n                    y: y,\r\n                    col: x,\r\n                    row: y\r\n                }\r\n            } else {\r\n                // Security\r\n                if ((''+value).substr(0,1) == '=' && obj.options.secureFormulas == true) {\r\n                    var val = secureFormula(value);\r\n                    if (val != value) {\r\n                        // Update the data container\r\n                        value = val;\r\n                    }\r\n                }\r\n\r\n                // On change\r\n                var val = obj.dispatch('onbeforechange', el, obj.records[y][x], x, y, value);\r\n\r\n                // If you return something this will overwrite the value\r\n                if (val != undefined) {\r\n                    value = val;\r\n                }\r\n\r\n                if (obj.options.columns[x].editor && typeof(obj.options.columns[x].editor.updateCell) == 'function') {\r\n                    value = obj.options.columns[x].editor.updateCell(obj.records[y][x], value, force);\r\n                }\r\n\r\n                // History format\r\n                var record = {\r\n                    x: x,\r\n                    y: y,\r\n                    col: x,\r\n                    row: y,\r\n                    newValue: value,\r\n                    oldValue: obj.options.data[y][x],\r\n                }\r\n\r\n                if (obj.options.columns[x].editor) {\r\n                    // Update data and cell\r\n                    obj.options.data[y][x] = value;\r\n                } else {\r\n                    // Native functions\r\n                    if (obj.options.columns[x].type == 'checkbox' || obj.options.columns[x].type == 'radio') {\r\n                        // Unchecked all options\r\n                        if (obj.options.columns[x].type == 'radio') {\r\n                            for (var j = 0; j < obj.options.data.length; j++) {\r\n                                obj.options.data[j][x] = false;\r\n                            }\r\n                        }\r\n\r\n                        // Update data and cell\r\n                        obj.records[y][x].children[0].checked = (value == 1 || value == true || value == 'true' || value == 'TRUE') ? true : false;\r\n                        obj.options.data[y][x] = obj.records[y][x].children[0].checked;\r\n                    } else if (obj.options.columns[x].type == 'dropdown' || obj.options.columns[x].type == 'autocomplete') {\r\n                        // Update data and cell\r\n                        obj.options.data[y][x] = value;\r\n                        obj.records[y][x].innerText = obj.getDropDownValue(x, value);\r\n                    } else if (obj.options.columns[x].type == 'calendar') {\r\n                        // Update calendar\r\n                        var formatted = jSuites.calendar.extractDateFromString(value, obj.options.columns[x].options.format);\r\n                        // Update data and cell\r\n                        obj.options.data[y][x] = value;\r\n                        obj.records[y][x].innerText = jSuites.calendar.getDateString(formatted ? formatted : value, obj.options.columns[x].options.format);\r\n                    } else if (obj.options.columns[x].type == 'color') {\r\n                        // Update color\r\n                        obj.options.data[y][x] = value;\r\n                        // Render\r\n                        if (obj.options.columns[x].render == 'square') {\r\n                            var color = document.createElement('div');\r\n                            color.className = 'color';\r\n                            color.style.backgroundColor = value;\r\n                            obj.records[y][x].innerText = '';\r\n                            obj.records[y][x].appendChild(color);\r\n                        } else {\r\n                            obj.records[y][x].style.color = value;\r\n                            obj.records[y][x].innerText = value;\r\n                        }\r\n                    } else if (obj.options.columns[x].type == 'image') {\r\n                        value = ''+value;\r\n                        obj.options.data[y][x] = value;\r\n                        obj.records[y][x].innerHTML = '';\r\n                        if (value && value.substr(0, 10) == 'data:image') {\r\n                            var img = document.createElement('img');\r\n                            img.src = value;\r\n                            obj.records[y][x].appendChild(img);\r\n                        }\r\n                    } else {\r\n                        // Update data and cell\r\n                        obj.options.data[y][x] = value;\r\n                        // Label\r\n                        if (obj.options.columns[x].type == 'html') {\r\n                            obj.records[y][x].innerHTML = stripScript(obj.parseValue(x, y, value));\r\n                        } else {\r\n                            if (obj.options.stripHTML === false || obj.options.columns[x].stripHTML === false) {\r\n                                obj.records[y][x].innerHTML = stripScript(obj.parseValue(x, y, value));\r\n                            } else {\r\n                                obj.records[y][x].innerText = obj.parseValue(x, y, value);\r\n                            }\r\n                        }\r\n                        // Handle big text inside a cell\r\n                        if (obj.options.columns[x].wordWrap != false && (obj.options.wordWrap == true || obj.options.columns[x].wordWrap == true || obj.records[y][x].innerHTML.length > 200)) {\r\n                            obj.records[y][x].style.whiteSpace = 'pre-wrap';\r\n                        } else {\r\n                            obj.records[y][x].style.whiteSpace = '';\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Overflow\r\n                if (x > 0) {\r\n                    if (value) {\r\n                        obj.records[y][x-1].style.overflow = 'hidden';\r\n                    } else {\r\n                        obj.records[y][x-1].style.overflow = '';\r\n                    }\r\n                }\r\n\r\n                // On change\r\n                obj.dispatch('onchange', el, (obj.records[y] && obj.records[y][x] ? obj.records[y][x] : null), x, y, value, record.oldValue);\r\n            }\r\n\r\n            return record;\r\n        }\r\n\r\n        /**\r\n         * Helper function to copy data using the corner icon\r\n         */\r\n        obj.copyData = function(o, d) {\r\n            // Get data from all selected cells\r\n            var data = obj.getData(true, true);\r\n\r\n            // Selected cells\r\n            var h = obj.selectedContainer;\r\n\r\n            // Cells\r\n            var x1 = parseInt(o.getAttribute('data-x'));\r\n            var y1 = parseInt(o.getAttribute('data-y'));\r\n            var x2 = parseInt(d.getAttribute('data-x'));\r\n            var y2 = parseInt(d.getAttribute('data-y'));\r\n\r\n            // Records\r\n            var records = [];\r\n            var breakControl = false;\r\n\r\n            if (h[0] == x1) {\r\n                // Vertical copy\r\n                if (y1 < h[1]) {\r\n                    var rowNumber = y1 - h[1];\r\n                } else {\r\n                    var rowNumber = 1;\r\n                }\r\n                var colNumber = 0;\r\n            } else {\r\n                if (x1 < h[0]) {\r\n                    var colNumber = x1 - h[0];\r\n                } else {\r\n                    var colNumber = 1;\r\n                }\r\n                var rowNumber = 0;\r\n            }\r\n\r\n            // Copy data procedure\r\n            var posx = 0;\r\n            var posy = 0;\r\n\r\n            for (var j = y1; j <= y2; j++) {\r\n                // Skip hidden rows\r\n                if (obj.rows[j] && obj.rows[j].style.display == 'none') {\r\n                    continue;\r\n                }\r\n\r\n                // Controls\r\n                if (data[posy] == undefined) {\r\n                    posy = 0;\r\n                }\r\n                posx = 0;\r\n\r\n                // Data columns\r\n                if (h[0] != x1) {\r\n                    if (x1 < h[0]) {\r\n                        var colNumber = x1 - h[0];\r\n                    } else {\r\n                        var colNumber = 1;\r\n                    }\r\n                }\r\n                // Data columns\r\n                for (var i = x1; i <= x2; i++) {\r\n                    // Update non-readonly\r\n                    if (obj.records[j][i] && ! obj.records[j][i].classList.contains('readonly') && obj.records[j][i].style.display != 'none' && breakControl == false) {\r\n                        // Stop if contains value\r\n                        if (! obj.selection.length) {\r\n                            if (obj.options.data[j][i] != '') {\r\n                                breakControl = true;\r\n                                continue;\r\n                            }\r\n                        }\r\n    \r\n                        // Column\r\n                        if (data[posy] == undefined) {\r\n                            posx = 0;\r\n                        } else if (data[posy][posx] == undefined) {\r\n                            posx = 0;\r\n                        }\r\n\r\n                        // Value\r\n                        var value = data[posy][posx];\r\n    \r\n                        if (value && ! data[1] && obj.options.autoIncrement == true) {\r\n                            if (obj.options.columns[i].type == 'text' || obj.options.columns[i].type == 'number') {\r\n                                if ((''+value).substr(0,1) == '=') {\r\n                                    var tokens = value.match(/([A-Z]+[0-9]+)/g);\r\n    \r\n                                    if (tokens) {\r\n                                        var affectedTokens = [];\r\n                                        for (var index = 0; index < tokens.length; index++) {\r\n                                            var position = jexcel.getIdFromColumnName(tokens[index], 1);\r\n                                            position[0] += colNumber;\r\n                                            position[1] += rowNumber;\r\n                                            if (position[1] < 0) {\r\n                                                position[1] = 0;\r\n                                            }\r\n                                            var token = jexcel.getColumnNameFromId([position[0], position[1]]);\r\n    \r\n                                            if (token != tokens[index]) {\r\n                                                affectedTokens[tokens[index]] = token;\r\n                                            }\r\n                                        }\r\n                                        // Update formula\r\n                                        if (affectedTokens) {\r\n                                            value = obj.updateFormula(value, affectedTokens)\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    if (value == Number(value)) {\r\n                                        value = Number(value) + rowNumber;\r\n                                    }\r\n                                }\r\n                            } else if (obj.options.columns[i].type == 'calendar') {\r\n                                var date = new Date(value);\r\n                                date.setDate(date.getDate() + rowNumber);\r\n                                value = date.getFullYear() + '-' + jexcel.doubleDigitFormat(parseInt(date.getMonth() + 1)) + '-' + jexcel.doubleDigitFormat(date.getDate()) + ' ' + '00:00:00';\r\n                            }\r\n                        }\r\n    \r\n                        records.push(obj.updateCell(i, j, value));\r\n    \r\n                        // Update all formulas in the chain\r\n                        obj.updateFormulaChain(i, j, records);\r\n                    }\r\n                    posx++;\r\n                    if (h[0] != x1) {\r\n                        colNumber++;\r\n                    }\r\n                }\r\n                posy++;\r\n                rowNumber++;\r\n            }\r\n    \r\n            // Update history\r\n            obj.setHistory({\r\n                action:'setValue',\r\n                records:records,\r\n                selection:obj.selectedCell,\r\n            });\r\n    \r\n            // Update table with custom configuration if applicable\r\n            obj.updateTable();\r\n    \r\n            // On after changes\r\n            obj.onafterchanges(el, records);\r\n        }\r\n    \r\n        /**\r\n         * Refresh current selection\r\n         */\r\n        obj.refreshSelection = function() {\r\n            if (obj.selectedCell) {\r\n                obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Move coords to A1 in case ovelaps with an excluded cell\r\n         */\r\n        obj.conditionalSelectionUpdate = function(type, o, d) {\r\n            if (type == 1) {\r\n                if (obj.selectedCell && ((o >= obj.selectedCell[1] && o <= obj.selectedCell[3]) || (d >= obj.selectedCell[1] && d <= obj.selectedCell[3]))) {\r\n                    obj.resetSelection();\r\n                    return;\r\n                }\r\n            } else {\r\n                if (obj.selectedCell && ((o >= obj.selectedCell[0] && o <= obj.selectedCell[2]) || (d >= obj.selectedCell[0] && d <= obj.selectedCell[2]))) {\r\n                    obj.resetSelection();\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Clear table selection\r\n         */\r\n        obj.resetSelection = function(blur) {\r\n            // Remove style\r\n            if (! obj.highlighted.length) {\r\n                var previousStatus = 0;\r\n            } else {\r\n                var previousStatus = 1;\r\n    \r\n                for (var i = 0; i < obj.highlighted.length; i++) {\r\n                    obj.highlighted[i].classList.remove('highlight');\r\n                    obj.highlighted[i].classList.remove('highlight-left');\r\n                    obj.highlighted[i].classList.remove('highlight-right');\r\n                    obj.highlighted[i].classList.remove('highlight-top');\r\n                    obj.highlighted[i].classList.remove('highlight-bottom');\r\n                    obj.highlighted[i].classList.remove('highlight-selected');\r\n    \r\n                    var px = parseInt(obj.highlighted[i].getAttribute('data-x'));\r\n                    var py = parseInt(obj.highlighted[i].getAttribute('data-y'));\r\n    \r\n                    // Check for merged cells\r\n                    if (obj.highlighted[i].getAttribute('data-merged')) {\r\n                        var colspan = parseInt(obj.highlighted[i].getAttribute('colspan'));\r\n                        var rowspan = parseInt(obj.highlighted[i].getAttribute('rowspan'));\r\n                        var ux = colspan > 0 ? px + (colspan - 1) : px;\r\n                        var uy = rowspan > 0 ? py + (rowspan - 1): py;\r\n                    } else {\r\n                        var ux = px;\r\n                        var uy = py;\r\n                    }\r\n    \r\n                    // Remove selected from headers\r\n                    for (var j = px; j <= ux; j++) {\r\n                        if (obj.headers[j]) {\r\n                            obj.headers[j].classList.remove('selected');\r\n                        }\r\n                    }\r\n    \r\n                    // Remove selected from rows\r\n                    for (var j = py; j <= uy; j++) {\r\n                        if (obj.rows[j]) {\r\n                            obj.rows[j].classList.remove('selected');\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n    \r\n            // Reset highlighed cells\r\n            obj.highlighted = [];\r\n    \r\n            // Reset\r\n            obj.selectedCell = null;\r\n    \r\n            // Hide corner\r\n            obj.corner.style.top = '-2000px';\r\n            obj.corner.style.left = '-2000px';\r\n    \r\n            if (blur == true && previousStatus == 1) {\r\n                obj.dispatch('onblur', el);\r\n            }\r\n    \r\n            return previousStatus;\r\n        }\r\n    \r\n        /**\r\n         * Update selection based on two cells\r\n         */\r\n        obj.updateSelection = function(el1, el2, origin) {\r\n            var x1 = el1.getAttribute('data-x');\r\n            var y1 = el1.getAttribute('data-y');\r\n            if (el2) {\r\n                var x2 = el2.getAttribute('data-x');\r\n                var y2 = el2.getAttribute('data-y');\r\n            } else {\r\n                var x2 = x1;\r\n                var y2 = y1;\r\n            }\r\n    \r\n            obj.updateSelectionFromCoords(x1, y1, x2, y2, origin);\r\n        }\r\n    \r\n        /**\r\n         * Update selection from coords\r\n         */\r\n        obj.updateSelectionFromCoords = function(x1, y1, x2, y2, origin) {\r\n            // Reset Selection\r\n            var updated = null;\r\n            var previousState = obj.resetSelection();\r\n    \r\n            // Same element\r\n            if (x2 == null) {\r\n                x2 = x1;\r\n            }\r\n            if (y2 == null) {\r\n                y2 = y1;\r\n            }\r\n    \r\n            // Selection must be within the existing data\r\n            if (x1 >= obj.headers.length) {\r\n                x1 = obj.headers.length - 1;\r\n            }\r\n            if (y1 >= obj.rows.length) {\r\n                y1 = obj.rows.length - 1;\r\n            }\r\n            if (x2 >= obj.headers.length) {\r\n                x2 = obj.headers.length - 1;\r\n            }\r\n            if (y2 >= obj.rows.length) {\r\n                y2 = obj.rows.length - 1;\r\n            }\r\n    \r\n            // Keep selected cell\r\n            obj.selectedCell = [x1, y1, x2, y2];\r\n    \r\n            // Select cells\r\n            if (x1 != null) {\r\n                // Add selected cell\r\n                if (obj.records[y1][x1]) {\r\n                    obj.records[y1][x1].classList.add('highlight-selected');\r\n                }\r\n    \r\n                // Origin & Destination\r\n                if (parseInt(x1) < parseInt(x2)) {\r\n                    var px = parseInt(x1);\r\n                    var ux = parseInt(x2);\r\n                } else {\r\n                    var px = parseInt(x2);\r\n                    var ux = parseInt(x1);\r\n                }\r\n    \r\n                if (parseInt(y1) < parseInt(y2)) {\r\n                    var py = parseInt(y1);\r\n                    var uy = parseInt(y2);\r\n                } else {\r\n                    var py = parseInt(y2);\r\n                    var uy = parseInt(y1);\r\n                }\r\n    \r\n                // Verify merged columns\r\n                for (var i = px; i <= ux; i++) {\r\n                    for (var j = py; j <= uy; j++) {\r\n                        if (obj.records[j][i] && obj.records[j][i].getAttribute('data-merged')) {\r\n                            var x = parseInt(obj.records[j][i].getAttribute('data-x'));\r\n                            var y = parseInt(obj.records[j][i].getAttribute('data-y'));\r\n                            var colspan = parseInt(obj.records[j][i].getAttribute('colspan'));\r\n                            var rowspan = parseInt(obj.records[j][i].getAttribute('rowspan'));\r\n    \r\n                            if (colspan > 1) {\r\n                                if (x < px) {\r\n                                    px = x;\r\n                                }\r\n                                if (x + colspan > ux) {\r\n                                    ux = x + colspan - 1;\r\n                                }\r\n                            }\r\n    \r\n                            if (rowspan) {\r\n                                if (y < py) {\r\n                                    py = y;\r\n    \r\n                                }\r\n                                if (y + rowspan > uy) {\r\n                                    uy = y + rowspan - 1;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n    \r\n                // Limits\r\n                var borderLeft = null;\r\n                var borderRight = null;\r\n                var borderTop = null;\r\n                var borderBottom = null;\r\n    \r\n                // Vertical limits\r\n                for (var j = py; j <= uy; j++) {\r\n                    if (obj.rows[j].style.display != 'none') {\r\n                        if (borderTop == null) {\r\n                            borderTop = j;\r\n                        }\r\n                        borderBottom = j;\r\n                    }\r\n                }\r\n    \r\n                // Redefining styles\r\n                for (var i = px; i <= ux; i++) {\r\n                    for (var j = py; j <= uy; j++) {\r\n                        if (obj.rows[j].style.display != 'none' && obj.records[j][i].style.display != 'none') {\r\n                            obj.records[j][i].classList.add('highlight');\r\n                            obj.highlighted.push(obj.records[j][i]);\r\n                        }\r\n                    }\r\n    \r\n                    // Horizontal limits\r\n                    if (obj.options.columns[i].type != 'hidden') {\r\n                        if (borderLeft == null) {\r\n                            borderLeft = i;\r\n                        }\r\n                        borderRight = i;\r\n                    }\r\n                }\r\n    \r\n                // Create borders\r\n                if (! borderLeft) {\r\n                    borderLeft = 0;\r\n                }\r\n                if (! borderRight) {\r\n                    borderRight = 0;\r\n                }\r\n                for (var i = borderLeft; i <= borderRight; i++) {\r\n                    if (obj.options.columns[i].type != 'hidden') {\r\n                        // Top border\r\n                        if (obj.records[borderTop] && obj.records[borderTop][i]) {\r\n                            obj.records[borderTop][i].classList.add('highlight-top');\r\n                        }\r\n                        // Bottom border\r\n                        if (obj.records[borderBottom] && obj.records[borderBottom][i]) {\r\n                            obj.records[borderBottom][i].classList.add('highlight-bottom');\r\n                        }\r\n                        // Add selected from headers\r\n                        obj.headers[i].classList.add('selected');\r\n                    }\r\n                }\r\n    \r\n                for (var j = borderTop; j <= borderBottom; j++) {\r\n                    if (obj.rows[j] && obj.rows[j].style.display != 'none') {\r\n                        // Left border\r\n                        obj.records[j][borderLeft].classList.add('highlight-left');\r\n                        // Right border\r\n                        obj.records[j][borderRight].classList.add('highlight-right');\r\n                        // Add selected from rows\r\n                        obj.rows[j].classList.add('selected');\r\n                    }\r\n                }\r\n    \r\n                obj.selectedContainer = [ borderLeft, borderTop, borderRight, borderBottom ];\r\n            }\r\n    \r\n            // Handle events\r\n            if (previousState == 0) {\r\n                obj.dispatch('onfocus', el);\r\n\r\n                obj.removeCopyingSelection();\r\n            }\r\n\r\n            obj.dispatch('onselection', el, borderLeft, borderTop, borderRight, borderBottom, origin);\r\n\r\n            // Find corner cell\r\n            obj.updateCornerPosition();\r\n        }\r\n    \r\n        /**\r\n         * Remove copy selection\r\n         * \r\n         * @return void\r\n         */\r\n        obj.removeCopySelection = function() {\r\n            // Remove current selection\r\n            for (var i = 0; i < obj.selection.length; i++) {\r\n                obj.selection[i].classList.remove('selection');\r\n                obj.selection[i].classList.remove('selection-left');\r\n                obj.selection[i].classList.remove('selection-right');\r\n                obj.selection[i].classList.remove('selection-top');\r\n                obj.selection[i].classList.remove('selection-bottom');\r\n            }\r\n    \r\n            obj.selection = [];\r\n        }\r\n    \r\n        /**\r\n         * Update copy selection\r\n         * \r\n         * @param int x, y\r\n         * @return void\r\n         */\r\n        obj.updateCopySelection = function(x3, y3) {\r\n            // Remove selection\r\n            obj.removeCopySelection();\r\n    \r\n            // Get elements first and last\r\n            var x1 = obj.selectedContainer[0];\r\n            var y1 = obj.selectedContainer[1];\r\n            var x2 = obj.selectedContainer[2];\r\n            var y2 = obj.selectedContainer[3];\r\n    \r\n            if (x3 != null && y3 != null) {\r\n                if (x3 - x2 > 0) {\r\n                    var px = parseInt(x2) + 1;\r\n                    var ux = parseInt(x3);\r\n                } else {\r\n                    var px = parseInt(x3);\r\n                    var ux = parseInt(x1) - 1;\r\n                }\r\n    \r\n                if (y3 - y2 > 0) {\r\n                    var py = parseInt(y2) + 1;\r\n                    var uy = parseInt(y3);\r\n                } else {\r\n                    var py = parseInt(y3);\r\n                    var uy = parseInt(y1) - 1;\r\n                }\r\n    \r\n                if (ux - px <= uy - py) {\r\n                    var px = parseInt(x1);\r\n                    var ux = parseInt(x2);\r\n                } else {\r\n                    var py = parseInt(y1);\r\n                    var uy = parseInt(y2);\r\n                }\r\n    \r\n                for (var j = py; j <= uy; j++) {\r\n                    for (var i = px; i <= ux; i++) {\r\n                        if (obj.records[j][i] && obj.rows[j].style.display != 'none' && obj.records[j][i].style.display != 'none') {\r\n                            obj.records[j][i].classList.add('selection');\r\n                            obj.records[py][i].classList.add('selection-top');\r\n                            obj.records[uy][i].classList.add('selection-bottom');\r\n                            obj.records[j][px].classList.add('selection-left');\r\n                            obj.records[j][ux].classList.add('selection-right');\r\n    \r\n                            // Persist selected elements\r\n                            obj.selection.push(obj.records[j][i]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Update corner position\r\n         * \r\n         * @return void\r\n         */\r\n        obj.updateCornerPosition = function() {\r\n            // If any selected cells\r\n            if (! obj.highlighted.length) {\r\n                obj.corner.style.top = '-2000px';\r\n                obj.corner.style.left = '-2000px';\r\n            } else {\r\n                // Get last cell\r\n                var last = obj.highlighted[obj.highlighted.length-1];\r\n\r\n                var contentRect = obj.content.getBoundingClientRect();\r\n                var x1 = contentRect.left;\r\n                var y1 = contentRect.top;\r\n\r\n                var lastRect = last.getBoundingClientRect();\r\n                var x2 = lastRect.left;\r\n                var y2 = lastRect.top;\r\n                var w2 = lastRect.width;\r\n                var h2 = lastRect.height;\r\n\r\n                var x = (x2 - x1) + obj.content.scrollLeft + w2 - 4;\r\n                var y = (y2 - y1) + obj.content.scrollTop + h2 - 4;\r\n\r\n                // Place the corner in the correct place\r\n                obj.corner.style.top = y + 'px';\r\n                obj.corner.style.left = x + 'px';\r\n\r\n                if (obj.options.freezeColumns) {\r\n                    var width = obj.getFreezeWidth();\r\n                    if (x2 - x1 + w2 < width) {\r\n                        obj.corner.style.display = 'none';\r\n                    } else {\r\n                        if (obj.options.selectionCopy == true) {\r\n                            obj.corner.style.display = '';\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (obj.options.selectionCopy == true) {\r\n                        obj.corner.style.display = '';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Update scroll position based on the selection\r\n         */\r\n        obj.updateScroll = function(direction) {\r\n            // jExcel Container information\r\n            var contentRect = obj.content.getBoundingClientRect();\r\n            var x1 = contentRect.left;\r\n            var y1 = contentRect.top;\r\n            var w1 = contentRect.width;\r\n            var h1 = contentRect.height;\r\n\r\n            // Direction Left or Up\r\n            var reference = obj.records[obj.selectedCell[3]][obj.selectedCell[2]];\r\n    \r\n            // Reference\r\n            var referenceRect = reference.getBoundingClientRect();\r\n            var x2 = referenceRect.left;\r\n            var y2 = referenceRect.top;\r\n            var w2 = referenceRect.width;\r\n            var h2 = referenceRect.height;\r\n    \r\n            // Direction\r\n            if (direction == 0 || direction == 1) {\r\n                var x = (x2 - x1) + obj.content.scrollLeft;\r\n                var y = (y2 - y1) + obj.content.scrollTop - 2;\r\n            } else {\r\n                var x = (x2 - x1) + obj.content.scrollLeft + w2;\r\n                var y = (y2 - y1) + obj.content.scrollTop + h2;\r\n            }\r\n    \r\n            // Top position check\r\n            if (y > (obj.content.scrollTop + 30) && y < (obj.content.scrollTop + h1)) {\r\n                // In the viewport\r\n            } else {\r\n                // Out of viewport\r\n                if (y < obj.content.scrollTop + 30) {\r\n                    obj.content.scrollTop = y - h2;\r\n                } else {\r\n                    obj.content.scrollTop = y - (h1 - 2);\r\n                }\r\n            }\r\n    \r\n            // Freeze columns? \r\n            var freezed = obj.getFreezeWidth();\r\n\r\n            // Left position check - TODO: change that to the bottom border of the element\r\n            if (x > (obj.content.scrollLeft + freezed) && x < (obj.content.scrollLeft + w1)) {\r\n                // In the viewport\r\n            } else {\r\n                // Out of viewport\r\n                if (x < obj.content.scrollLeft + 30) {\r\n                    obj.content.scrollLeft = x;\r\n                    if (obj.content.scrollLeft < 50) {\r\n                        obj.content.scrollLeft = 0;\r\n                    }\r\n                } else if (x < obj.content.scrollLeft + freezed) {\r\n                    obj.content.scrollLeft = x - freezed - 1;\r\n                } else {\r\n                    obj.content.scrollLeft = x - (w1 - 20);\r\n                }\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Get the column width\r\n         * \r\n         * @param int column column number (first column is: 0)\r\n         * @return int current width\r\n         */\r\n        obj.getWidth = function(column) {\r\n            if (! column) {\r\n                // Get all headers\r\n                var data = [];\r\n                for (var i = 0; i < obj.headers.length; i++) {\r\n                    data.push(obj.options.columns[i].width);\r\n                }\r\n            } else {\r\n                // In case the column is an object\r\n                if (typeof(column) == 'object') {\r\n                    column = $(column).getAttribute('data-x');\r\n                }\r\n    \r\n                data = obj.colgroup[column].getAttribute('width')\r\n            }\r\n    \r\n            return data;\r\n        }\r\n\r\n\r\n        /**\r\n         * Set the column width\r\n         * \r\n         * @param int column number (first column is: 0)\r\n         * @param int new column width\r\n         * @param int old column width\r\n         */\r\n        obj.setWidth = function (column, width, oldWidth) {\r\n            if (width) {\r\n                if (Array.isArray(column)) {\r\n                    // Oldwidth\r\n                    if (! oldWidth) {\r\n                        var oldWidth = [];\r\n                    }\r\n                    // Set width\r\n                    for (var i = 0; i < column.length; i++) {\r\n                        if (! oldWidth[i]) {\r\n                            oldWidth[i] = obj.colgroup[column[i]].getAttribute('width');\r\n                        }\r\n                        var w = Array.isArray(width) && width[i] ? width[i] : width;\r\n                        obj.colgroup[column[i]].setAttribute('width', w);\r\n                        obj.options.columns[column[i]].width = w;\r\n                    }\r\n                } else {\r\n                    // Oldwidth\r\n                    if (! oldWidth) {\r\n                        oldWidth = obj.colgroup[column].getAttribute('width');\r\n                    }\r\n                    // Set width\r\n                    obj.colgroup[column].setAttribute('width', width);\r\n                    obj.options.columns[column].width = width;\r\n                }\r\n\r\n                // Keeping history of changes\r\n                obj.setHistory({\r\n                    action:'setWidth',\r\n                    column:column,\r\n                    oldValue:oldWidth,\r\n                    newValue:width,\r\n                });\r\n\r\n                // On resize column\r\n                obj.dispatch('onresizecolumn', el, column, width, oldWidth);\r\n\r\n                // Update corner position\r\n                obj.updateCornerPosition();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Set the row height\r\n         * \r\n         * @param row - row number (first row is: 0)\r\n         * @param height - new row height\r\n         * @param oldHeight - old row height\r\n         */\r\n        obj.setHeight = function (row, height, oldHeight) {\r\n            if (height > 0) {\r\n                // In case the column is an object\r\n                if (typeof(row) == 'object') {\r\n                    row = row.getAttribute('data-y');\r\n                }\r\n    \r\n                // Oldwidth\r\n                if (! oldHeight) {\r\n                    oldHeight = obj.rows[row].getAttribute('height');\r\n\r\n                    if (! oldHeight) {\r\n                        var rect = obj.rows[row].getBoundingClientRect();\r\n                        oldHeight = rect.height;\r\n                    }\r\n                }\r\n\r\n                // Integer\r\n                height = parseInt(height);\r\n\r\n                // Set width\r\n                obj.rows[row].style.height = height + 'px';\r\n    \r\n                // Keep options updated\r\n                if (! obj.options.rows[row]) {\r\n                    obj.options.rows[row] = {};\r\n                }\r\n                obj.options.rows[row].height = height;\r\n    \r\n                // Keeping history of changes\r\n                obj.setHistory({\r\n                    action:'setHeight',\r\n                    row:row,\r\n                    oldValue:oldHeight,\r\n                    newValue:height,\r\n                });\r\n\r\n                // On resize column\r\n                obj.dispatch('onresizerow', el, row, height, oldHeight);\r\n\r\n                // Update corner position\r\n                obj.updateCornerPosition();\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Get the row height\r\n         * \r\n         * @param row - row number (first row is: 0)\r\n         * @return height - current row height\r\n         */\r\n        obj.getHeight = function(row) {\r\n            if (! row) {\r\n                // Get height of all rows\r\n                var data = [];\r\n                for (var j = 0; j < obj.rows.length; j++) {\r\n                    var h = obj.rows[j].style.height;\r\n                    if (h) {\r\n                        data[j] = h;\r\n                    }\r\n                }\r\n            } else {\r\n                // In case the row is an object\r\n                if (typeof(row) == 'object') {\r\n                    row = $(row).getAttribute('data-y');\r\n                }\r\n    \r\n                var data = obj.rows[row].style.height;\r\n            }\r\n    \r\n            return data;\r\n        }\r\n    \r\n        obj.setFooter = function(data) {\r\n            if (data) {\r\n                obj.options.footers = data;\r\n            }\r\n\r\n            if (obj.options.footers) {\r\n                if (! obj.tfoot) {\r\n                    obj.tfoot = document.createElement('tfoot');\r\n                    obj.table.appendChild(obj.tfoot);\r\n                } \r\n\r\n                for (var j = 0; j < obj.options.footers.length; j++) {\r\n                    if (obj.tfoot.children[j]) {\r\n                        var tr = obj.tfoot.children[j];\r\n                    } else {\r\n                        var tr = document.createElement('tr');\r\n                        var td = document.createElement('td');\r\n                        tr.appendChild(td);\r\n                        obj.tfoot.appendChild(tr);\r\n                    }\r\n                    for (var i = 0; i < obj.headers.length; i++) {\r\n                        if (! obj.options.footers[j][i]) {\r\n                            obj.options.footers[j][i] = '';\r\n                        }\r\n                        if (obj.tfoot.children[j].children[i+1]) {\r\n                            var td = obj.tfoot.children[j].children[i+1];\r\n                        } else {\r\n                            var td = document.createElement('td');\r\n                            tr.appendChild(td);\r\n\r\n                            // Text align\r\n                            var colAlign = obj.options.columns[i].align ? obj.options.columns[i].align : 'center';\r\n                            td.style.textAlign = colAlign;\r\n                        }\r\n                        td.innerText = obj.parseValue(i, j, obj.options.footers[j][i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Get the column title\r\n         * \r\n         * @param column - column number (first column is: 0)\r\n         * @param title - new column title\r\n         */\r\n        obj.getHeader = function(column) {\r\n            return obj.headers[column].innerText;\r\n        }\r\n    \r\n        /**\r\n         * Set the column title\r\n         * \r\n         * @param column - column number (first column is: 0)\r\n         * @param title - new column title\r\n         */\r\n        obj.setHeader = function(column, newValue) {\r\n            if (obj.headers[column]) {\r\n                var oldValue = obj.headers[column].innerText;\r\n    \r\n                if (! newValue) {\r\n                    newValue = prompt(obj.options.text.columnName, oldValue)\r\n                }\r\n    \r\n                if (newValue) {\r\n                    obj.headers[column].innerText = newValue;\r\n                    // Keep the title property\r\n                    obj.headers[column].setAttribute('title', newValue);\r\n                    // Update title\r\n                    obj.options.columns[column].title = newValue;\r\n                }\r\n    \r\n                obj.setHistory({\r\n                    action: 'setHeader',\r\n                    column: column,\r\n                    oldValue: oldValue,\r\n                    newValue: newValue\r\n                });\r\n    \r\n                // On onchange header\r\n                obj.dispatch('onchangeheader', el, column, oldValue, newValue);\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Get the headers\r\n         * \r\n         * @param asArray\r\n         * @return mixed\r\n         */\r\n        obj.getHeaders = function (asArray) {\r\n            var title = [];\r\n    \r\n            for (var i = 0; i < obj.headers.length; i++) {\r\n                title.push(obj.getHeader(i));\r\n            }\r\n    \r\n            return asArray ? title : title.join(obj.options.csvDelimiter);\r\n        }\r\n    \r\n        /**\r\n         * Get meta information from cell(s)\r\n         * \r\n         * @return integer\r\n         */\r\n        obj.getMeta = function(cell, key) {\r\n            if (! cell) {\r\n                return obj.options.meta;\r\n            } else {\r\n                if (key) {\r\n                    return obj.options.meta[cell] && obj.options.meta[cell][key] ? obj.options.meta[cell][key] : null;\r\n                } else {\r\n                    return obj.options.meta[cell] ? obj.options.meta[cell] : null;\r\n                }\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Set meta information to cell(s)\r\n         * \r\n         * @return integer\r\n         */\r\n        obj.setMeta = function(o, k, v) {\r\n            if (! obj.options.meta) {\r\n                obj.options.meta = {}\r\n            }\r\n    \r\n            if (k && v) {\r\n                // Set data value\r\n                if (! obj.options.meta[o]) {\r\n                    obj.options.meta[o] = {};\r\n                }\r\n                obj.options.meta[o][k] = v;\r\n            } else {\r\n                // Apply that for all cells\r\n                var keys = Object.keys(o);\r\n                for (var i = 0; i < keys.length; i++) {\r\n                    if (! obj.options.meta[keys[i]]) {\r\n                        obj.options.meta[keys[i]] = {};\r\n                    }\r\n    \r\n                    var prop = Object.keys(o[keys[i]]);\r\n                    for (var j = 0; j < prop.length; j++) {\r\n                        obj.options.meta[keys[i]][prop[j]] = o[keys[i]][prop[j]];\r\n                    }\r\n                }\r\n            }\r\n    \r\n            obj.dispatch('onchangemeta', el, o, k, v);\r\n        }\r\n    \r\n        /**\r\n         * Update meta information\r\n         * \r\n         * @return integer\r\n         */\r\n        obj.updateMeta = function(affectedCells) {\r\n            if (obj.options.meta) {\r\n                var newMeta = {};\r\n                var keys = Object.keys(obj.options.meta);\r\n                for (var i = 0; i < keys.length; i++) {\r\n                    if (affectedCells[keys[i]]) {\r\n                        newMeta[affectedCells[keys[i]]] = obj.options.meta[keys[i]];\r\n                    } else {\r\n                        newMeta[keys[i]] = obj.options.meta[keys[i]];\r\n                    }\r\n                }\r\n                // Update meta information\r\n                obj.options.meta = newMeta;\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Get style information from cell(s)\r\n         * \r\n         * @return integer\r\n         */\r\n        obj.getStyle = function(cell, key) {\r\n            // Cell\r\n            if (! cell) {\r\n                // Control vars\r\n                var data = {};\r\n    \r\n                // Column and row length\r\n                var x = obj.options.data[0].length;\r\n                var y = obj.options.data.length;\r\n    \r\n                // Go through the columns to get the data\r\n                for (var j = 0; j < y; j++) {\r\n                    for (var i = 0; i < x; i++) {\r\n                        // Value\r\n                        var v = key ? obj.records[j][i].style[key] : obj.records[j][i].getAttribute('style');\r\n    \r\n                        // Any meta data for this column?\r\n                        if (v) {\r\n                            // Column name\r\n                            var k = jexcel.getColumnNameFromId([i, j]);\r\n                            // Value\r\n                            data[k] = v;\r\n                        }\r\n                    }\r\n                }\r\n    \r\n               return data;\r\n            } else {\r\n                cell = jexcel.getIdFromColumnName(cell, true);\r\n    \r\n                return key ? obj.records[cell[1]][cell[0]].style[key] : obj.records[cell[1]][cell[0]].getAttribute('style');\r\n            }\r\n        },\r\n    \r\n        obj.resetStyle = function(o, ignoreHistoryAndEvents) {\r\n            var keys = Object.keys(o);\r\n            for (var i = 0; i < keys.length; i++) {\r\n                // Position\r\n                var cell = jexcel.getIdFromColumnName(keys[i], true);\r\n                if (obj.records[cell[1]] && obj.records[cell[1]][cell[0]]) {\r\n                    obj.records[cell[1]][cell[0]].setAttribute('style', '');\r\n                }\r\n            }\r\n            obj.setStyle(o, null, null, null, ignoreHistoryAndEvents);\r\n        }\r\n    \r\n        /**\r\n         * Set meta information to cell(s)\r\n         * \r\n         * @return integer\r\n         */\r\n        obj.setStyle = function(o, k, v, force, ignoreHistoryAndEvents) {\r\n            var newValue = {};\r\n            var oldValue = {};\r\n    \r\n            // Apply style\r\n            var applyStyle = function(cellId, key, value) {\r\n                // Position\r\n                var cell = jexcel.getIdFromColumnName(cellId, true);\r\n    \r\n                if (obj.records[cell[1]] && obj.records[cell[1]][cell[0]] && (obj.records[cell[1]][cell[0]].classList.contains('readonly')==false || force)) {\r\n                    // Current value\r\n                    var currentValue = obj.records[cell[1]][cell[0]].style[key];\r\n    \r\n                    // Change layout\r\n                    if (currentValue == value && ! force) {\r\n                        value = '';\r\n                        obj.records[cell[1]][cell[0]].style[key] = '';\r\n                    } else {\r\n                        obj.records[cell[1]][cell[0]].style[key] = value;\r\n                    }\r\n    \r\n                    // History\r\n                    if (! oldValue[cellId]) {\r\n                        oldValue[cellId] = [];\r\n                    }\r\n                    if (! newValue[cellId]) {\r\n                        newValue[cellId] = [];\r\n                    }\r\n    \r\n                    oldValue[cellId].push([key + ':' + currentValue]);\r\n                    newValue[cellId].push([key + ':' + value]);\r\n                }\r\n            }\r\n    \r\n            if (k && v) {\r\n                // Get object from string\r\n                if (typeof(o) == 'string') {\r\n                    applyStyle(o, k, v);\r\n                } else {\r\n                    // Avoid duplications\r\n                    var oneApplication = [];\r\n                    // Apply that for all cells\r\n                    for (var i = 0; i < o.length; i++) {\r\n                        var x = o[i].getAttribute('data-x');\r\n                        var y = o[i].getAttribute('data-y');\r\n                        var cellName = jexcel.getColumnNameFromId([x, y]);\r\n                        // This happens when is a merged cell\r\n                        if (! oneApplication[cellName]) {\r\n                            applyStyle(cellName, k, v);\r\n                            oneApplication[cellName] = true;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                var keys = Object.keys(o);\r\n                for (var i = 0; i < keys.length; i++) {\r\n                    var style = o[keys[i]];\r\n                    if (typeof(style) == 'string') {\r\n                        style = style.split(';');\r\n                    }\r\n                    for (var j = 0; j < style.length; j++) {\r\n                        if (typeof(style[j]) == 'string') {\r\n                            style[j] = style[j].split(':');\r\n                        }\r\n                        // Apply value\r\n                        if (style[j][0].trim()) {\r\n                            applyStyle(keys[i], style[j][0].trim(), style[j][1]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n    \r\n            var keys = Object.keys(oldValue);\r\n            for (var i = 0; i < keys.length; i++) {\r\n                oldValue[keys[i]] = oldValue[keys[i]].join(';');\r\n            }\r\n            var keys = Object.keys(newValue);\r\n            for (var i = 0; i < keys.length; i++) {\r\n                newValue[keys[i]] = newValue[keys[i]].join(';');\r\n            }\r\n    \r\n            if (! ignoreHistoryAndEvents) {\r\n                // Keeping history of changes\r\n                obj.setHistory({\r\n                    action: 'setStyle',\r\n                    oldValue: oldValue,\r\n                    newValue: newValue,\r\n                });\r\n            }\r\n\r\n            obj.dispatch('onchangestyle', el, o, k, v);\r\n        }\r\n\r\n        /**\r\n         * Get cell comments, null cell for all\r\n         */\r\n        obj.getComments = function(cell, withAuthor) {\r\n            if (cell) {\r\n                if (typeof(cell) == 'string') {\r\n                    var cell = jexcel.getIdFromColumnName(cell, true);\r\n                }\r\n\r\n                if (withAuthor) {\r\n                    return [obj.records[cell[1]][cell[0]].getAttribute('title'), obj.records[cell[1]][cell[0]].getAttribute('author')];\r\n                } else {\r\n                    return obj.records[cell[1]][cell[0]].getAttribute('title') || '';\r\n                }\r\n            } else {\r\n                var data = {};\r\n                for (var j = 0; j < obj.options.data.length; j++) {\r\n                    for (var i = 0; i < obj.options.columns.length; i++) {\r\n                        var comments = obj.records[j][i].getAttribute('title');\r\n                        if (comments) {\r\n                            var cell = jexcel.getColumnNameFromId([i, j]);\r\n                            data[cell] = comments;\r\n                        }\r\n                    }\r\n                }\r\n                return data;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Set cell comments\r\n         */\r\n        obj.setComments = function(cellId, comments, author) {\r\n            if (typeof(cellId) == 'string') {\r\n                var cell = jexcel.getIdFromColumnName(cellId, true);\r\n            } else {\r\n                var cell = cellId;\r\n            }\r\n    \r\n            // Keep old value\r\n            var title = obj.records[cell[1]][cell[0]].getAttribute('title');\r\n            var author = obj.records[cell[1]][cell[0]].getAttribute('data-author');\r\n            var oldValue = [ title, author ];\r\n    \r\n            // Set new values\r\n            obj.records[cell[1]][cell[0]].setAttribute('title', comments ? comments : '');\r\n            obj.records[cell[1]][cell[0]].setAttribute('data-author', author ? author : '');\r\n    \r\n            // Remove class if there is no comment\r\n            if (comments) {\r\n                obj.records[cell[1]][cell[0]].classList.add('jexcel_comments');\r\n            } else {\r\n                obj.records[cell[1]][cell[0]].classList.remove('jexcel_comments');\r\n            }\r\n    \r\n            // Save history\r\n            obj.setHistory({\r\n                action:'setComments',\r\n                column: cellId,\r\n                newValue: [ comments, author ],\r\n                oldValue: oldValue,\r\n            });\r\n            // Set comments\r\n            obj.dispatch('oncomments', el, comments, title);\r\n        }\r\n    \r\n        /**\r\n         * Get table config information\r\n         */\r\n        obj.getConfig = function() {\r\n            var options = obj.options;\r\n            options.style = obj.getStyle();\r\n            options.mergeCells = obj.getMerge();\r\n            options.comments = obj.getComments();\r\n    \r\n            return options;\r\n        }\r\n    \r\n        /**\r\n         * Sort data and reload table\r\n         */\r\n        obj.orderBy = function(column, order) {\r\n            if (column >= 0) {\r\n                // Merged cells\r\n                if (Object.keys(obj.options.mergeCells).length > 0) {\r\n                    if (! confirm(obj.options.text.thisActionWillDestroyAnyExistingMergedCellsAreYouSure)) {\r\n                        return false;\r\n                    } else {\r\n                        // Remove merged cells\r\n                        obj.destroyMerged();\r\n                    }\r\n                }\r\n    \r\n                // Direction\r\n                if (order == null) {\r\n                    order = obj.headers[column].classList.contains('arrow-down') ? 1 : 0;\r\n                } else {\r\n                    order = order ? 1 : 0;\r\n                }\r\n    \r\n                // Test order\r\n                var temp = [];\r\n                if (obj.options.columns[column].type == 'number' || obj.options.columns[column].type == 'percentage' || obj.options.columns[column].type == 'autonumber' || obj.options.columns[column].type == 'color') {\r\n                    for (var j = 0; j < obj.options.data.length; j++) {\r\n                        temp[j] = [ j, Number(obj.options.data[j][column]) ];\r\n                    }\r\n                } else if (obj.options.columns[column].type == 'calendar' || obj.options.columns[column].type == 'checkbox' || obj.options.columns[column].type == 'radio') {\r\n                    for (var j = 0; j < obj.options.data.length; j++) {\r\n                        temp[j] = [ j, obj.options.data[j][column] ];\r\n                    }\r\n                } else {\r\n                    for (var j = 0; j < obj.options.data.length; j++) {\r\n                        temp[j] = [ j, obj.records[j][column].innerText.toLowerCase() ];\r\n                    }\r\n                }\r\n    \r\n                // Default sorting method\r\n                if (typeof(obj.options.sorting) !== 'function') {\r\n                    obj.options.sorting = function(direction) {\r\n                        return function(a, b) {\r\n                            var valueA = a[1];\r\n                            var valueB = b[1];\r\n\r\n                            if (! direction) {\r\n                                return (valueA === '' && valueB !== '') ? 1 : (valueA !== '' && valueB === '') ? -1 : (valueA > valueB) ? 1 : (valueA < valueB) ? -1 :  0;\r\n                            } else {\r\n                                return (valueA === '' && valueB !== '') ? 1 : (valueA !== '' && valueB === '') ? -1 : (valueA > valueB) ? -1 : (valueA < valueB) ? 1 :  0;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                temp = temp.sort(obj.options.sorting(order));\r\n    \r\n                // Save history\r\n                var newValue = [];\r\n                for (var j = 0; j < temp.length; j++) {\r\n                    newValue[j] = temp[j][0];\r\n                }\r\n    \r\n                // Save history\r\n                obj.setHistory({\r\n                    action: 'orderBy',\r\n                    rows: newValue,\r\n                    column: column,\r\n                    order: order,\r\n                });\r\n    \r\n                // Update order\r\n                obj.updateOrderArrow(column, order);\r\n                obj.updateOrder(newValue);\r\n    \r\n                // On sort event\r\n                obj.dispatch('onsort', el, column, order);\r\n    \r\n                return true;\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Update order arrow\r\n         */\r\n        obj.updateOrderArrow = function(column, order) {\r\n            // Remove order\r\n            for (var i = 0; i < obj.headers.length; i++) {\r\n                obj.headers[i].classList.remove('arrow-up');\r\n                obj.headers[i].classList.remove('arrow-down');\r\n            }\r\n    \r\n            // No order specified then toggle order\r\n            if (order) {\r\n                obj.headers[column].classList.add('arrow-up');\r\n            } else {\r\n                obj.headers[column].classList.add('arrow-down');\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Update rows position\r\n         */\r\n        obj.updateOrder = function(rows) {\r\n            // History\r\n            var data = []\r\n            for (var j = 0; j < rows.length; j++) {\r\n                data[j] = obj.options.data[rows[j]];\r\n            }\r\n            obj.options.data = data;\r\n    \r\n            var data = []\r\n            for (var j = 0; j < rows.length; j++) {\r\n                data[j] = obj.records[rows[j]];\r\n            }\r\n            obj.records = data;\r\n    \r\n            var data = []\r\n            for (var j = 0; j < rows.length; j++) {\r\n                data[j] = obj.rows[rows[j]];\r\n            }\r\n            obj.rows = data;\r\n    \r\n            // Update references\r\n            obj.updateTableReferences();\r\n    \r\n            // Redo search\r\n            if (obj.results && obj.results.length) {\r\n                if (obj.searchInput.value) {\r\n                    obj.search(obj.searchInput.value);\r\n                } else {\r\n                    obj.closeFilter();\r\n                }\r\n            } else {\r\n                // Create page\r\n                obj.results = null;\r\n                obj.pageNumber = 0;\r\n    \r\n                if (obj.options.pagination > 0) {\r\n                    obj.page(0);\r\n                } else if (obj.options.lazyLoading == true) {\r\n                    obj.loadPage(0);\r\n                } else {\r\n                    for (var j = 0; j < obj.rows.length; j++) {\r\n                        obj.tbody.appendChild(obj.rows[j]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Move row\r\n         * \r\n         * @return void\r\n         */\r\n        obj.moveRow = function(o, d, ignoreDom) {\r\n            if (Object.keys(obj.options.mergeCells).length > 0) {\r\n                if (o > d) {\r\n                    var insertBefore = 1;\r\n                } else {\r\n                    var insertBefore = 0;\r\n                }\r\n\r\n                if (obj.isRowMerged(o).length || obj.isRowMerged(d, insertBefore).length) {\r\n                    if (! confirm(obj.options.text.thisActionWillDestroyAnyExistingMergedCellsAreYouSure)) {\r\n                        return false;\r\n                    } else {\r\n                        obj.destroyMerged();\r\n                    }\r\n                }\r\n            }\r\n    \r\n            if (obj.options.search == true) {\r\n                if (obj.results && obj.results.length != obj.rows.length) {\r\n                    if (confirm(obj.options.text.thisActionWillClearYourSearchResultsAreYouSure)) {\r\n                        obj.resetSearch();\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n    \r\n                obj.results = null;\r\n            }\r\n    \r\n            if (! ignoreDom) {\r\n                if (Array.prototype.indexOf.call(obj.tbody.children, obj.rows[d]) >= 0) {\r\n                    if (o > d) {\r\n                        obj.tbody.insertBefore(obj.rows[o], obj.rows[d]);\r\n                    } else {\r\n                        obj.tbody.insertBefore(obj.rows[o], obj.rows[d].nextSibling);\r\n                    }\r\n                } else {\r\n                    obj.tbody.removeChild(obj.rows[o]);\r\n                }\r\n            }\r\n    \r\n            // Place references in the correct position\r\n            obj.rows.splice(d, 0, obj.rows.splice(o, 1)[0]);\r\n            obj.records.splice(d, 0, obj.records.splice(o, 1)[0]);\r\n            obj.options.data.splice(d, 0, obj.options.data.splice(o, 1)[0]);\r\n    \r\n            // Respect pagination\r\n            if (obj.options.pagination > 0 && obj.tbody.children.length != obj.options.pagination) {\r\n                obj.page(obj.pageNumber);\r\n            }\r\n    \r\n            // Keeping history of changes\r\n            obj.setHistory({\r\n                action:'moveRow',\r\n                oldValue: o,\r\n                newValue: d,\r\n            });\r\n    \r\n            // Update table references\r\n            obj.updateTableReferences();\r\n    \r\n            // Events\r\n            obj.dispatch('onmoverow', el, o, d);\r\n        }\r\n\r\n        /**\r\n         * Insert a new row\r\n         * \r\n         * @param mixed - number of blank lines to be insert or a single array with the data of the new row\r\n         * @param rowNumber\r\n         * @param insertBefore\r\n         * @return void\r\n         */\r\n        obj.insertRow = function(mixed, rowNumber, insertBefore) {\r\n            // Configuration\r\n            if (obj.options.allowInsertRow == true) {\r\n                // Records\r\n                var records = [];\r\n    \r\n                // Data to be insert\r\n                var data = [];\r\n    \r\n                // The insert could be lead by number of rows or the array of data\r\n                if (mixed > 0) {\r\n                    var numOfRows = mixed;\r\n                } else {\r\n                    var numOfRows = 1;\r\n    \r\n                    if (mixed) {\r\n                        data = mixed;\r\n                    }\r\n                }\r\n    \r\n                // Direction\r\n                var insertBefore = insertBefore ? true : false;\r\n    \r\n                // Current column number\r\n                var lastRow = obj.options.data.length - 1;\r\n    \r\n                if (rowNumber == undefined || rowNumber >= parseInt(lastRow) || rowNumber < 0) {\r\n                    rowNumber = lastRow;\r\n                }\r\n    \r\n                // Onbeforeinsertrow\r\n                if (obj.dispatch('onbeforeinsertrow', el, rowNumber, numOfRows, insertBefore) === false) {\r\n                    console.log('onbeforeinsertrow returned false');\r\n\r\n                    return false;\r\n                }\r\n    \r\n                // Merged cells\r\n                if (Object.keys(obj.options.mergeCells).length > 0) {\r\n                    if (obj.isRowMerged(rowNumber, insertBefore).length) {\r\n                        if (! confirm(obj.options.text.thisActionWillDestroyAnyExistingMergedCellsAreYouSure)) {\r\n                            return false;\r\n                        } else {\r\n                            obj.destroyMerged();\r\n                        }\r\n                    }\r\n                }\r\n    \r\n                // Clear any search\r\n                if (obj.options.search == true) {\r\n                    if (obj.results && obj.results.length != obj.rows.length) {\r\n                        if (confirm(obj.options.text.thisActionWillClearYourSearchResultsAreYouSure)) {\r\n                            obj.resetSearch();\r\n                        } else {\r\n                            return false;\r\n                        }\r\n                    }\r\n    \r\n                    obj.results = null;\r\n                }\r\n    \r\n                // Insertbefore\r\n                var rowIndex = (! insertBefore) ? rowNumber + 1 : rowNumber;\r\n\r\n                // Keep the current data\r\n                var currentRecords = obj.records.splice(rowIndex);\r\n                var currentData = obj.options.data.splice(rowIndex);\r\n                var currentRows = obj.rows.splice(rowIndex);\r\n    \r\n                // Adding lines\r\n                var rowRecords = [];\r\n                var rowData = [];\r\n                var rowNode = [];\r\n\r\n                for (var row = rowIndex; row < (numOfRows + rowIndex); row++) {\r\n                    // Push data to the data container\r\n                    obj.options.data[row] = [];\r\n                    for (var col = 0; col < obj.options.columns.length; col++) {\r\n                        obj.options.data[row][col]  = data[col] ? data[col] : '';\r\n                    }\r\n                    // Create row\r\n                    var tr = obj.createRow(row, obj.options.data[row]);\r\n                    // Append node\r\n                    if (currentRows[0]) {\r\n                        if (Array.prototype.indexOf.call(obj.tbody.children, currentRows[0]) >= 0) {\r\n                            obj.tbody.insertBefore(tr, currentRows[0]);\r\n                        }\r\n                    } else {\r\n                        if (Array.prototype.indexOf.call(obj.tbody.children, obj.rows[rowNumber]) >= 0) {\r\n                            obj.tbody.appendChild(tr);\r\n                        }\r\n                    }\r\n                    // Record History\r\n                    rowRecords.push(obj.records[row]);\r\n                    rowData.push(obj.options.data[row]);\r\n                    rowNode.push(tr);\r\n                }\r\n    \r\n                // Copy the data back to the main data\r\n                Array.prototype.push.apply(obj.records, currentRecords);\r\n                Array.prototype.push.apply(obj.options.data, currentData);\r\n                Array.prototype.push.apply(obj.rows, currentRows);\r\n    \r\n                // Respect pagination\r\n                if (obj.options.pagination > 0) {\r\n                    obj.page(obj.pageNumber);\r\n                }\r\n    \r\n                // Keep history\r\n                obj.setHistory({\r\n                    action: 'insertRow',\r\n                    rowNumber: rowNumber,\r\n                    numOfRows: numOfRows,\r\n                    insertBefore: insertBefore,\r\n                    rowRecords: rowRecords,\r\n                    rowData: rowData,\r\n                    rowNode: rowNode,\r\n                });\r\n    \r\n                // Remove table references\r\n                obj.updateTableReferences();\r\n    \r\n                // Events\r\n                obj.dispatch('oninsertrow', el, rowNumber, numOfRows, rowRecords, insertBefore);\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Delete a row by number\r\n         * \r\n         * @param integer rowNumber - row number to be excluded\r\n         * @param integer numOfRows - number of lines\r\n         * @return void\r\n         */\r\n        obj.deleteRow = function(rowNumber, numOfRows) {\r\n            // Global Configuration\r\n            if (obj.options.allowDeleteRow == true) {\r\n                if (obj.options.allowDeletingAllRows == true || obj.options.data.length > 1) {\r\n                    // Delete row definitions\r\n                    if (rowNumber == undefined) {\r\n                        var number = obj.getSelectedRows();\r\n    \r\n                        if (! number[0]) {\r\n                            rowNumber = obj.options.data.length - 1;\r\n                            numOfRows = 1;\r\n                        } else {\r\n                            rowNumber = parseInt(number[0].getAttribute('data-y'));\r\n                            numOfRows = number.length;\r\n                        }\r\n                    }\r\n    \r\n                    // Last column\r\n                    var lastRow = obj.options.data.length - 1;\r\n    \r\n                    if (rowNumber == undefined || rowNumber > lastRow || rowNumber < 0) {\r\n                        rowNumber = lastRow;\r\n                    }\r\n    \r\n                    if (! numOfRows) {\r\n                        numOfRows = 1;\r\n                    }\r\n    \r\n                    // Do not delete more than the number of recoreds\r\n                    if (rowNumber + numOfRows >= obj.options.data.length) {\r\n                        numOfRows = obj.options.data.length - rowNumber;\r\n                    }\r\n\r\n                    // Onbeforedeleterow\r\n                    if (obj.dispatch('onbeforedeleterow', el, rowNumber, numOfRows) === false) {\r\n                        console.log('onbeforedeleterow returned false');\r\n                        return false;\r\n                    }\r\n    \r\n                    if (parseInt(rowNumber) > -1) {\r\n                        // Merged cells\r\n                        var mergeExists = false;\r\n                        if (Object.keys(obj.options.mergeCells).length > 0) {\r\n                            for (var row = rowNumber; row < rowNumber + numOfRows; row++) {\r\n                                if (obj.isRowMerged(row, false).length) {\r\n                                    mergeExists = true;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (mergeExists) {\r\n                            if (! confirm(obj.options.text.thisActionWillDestroyAnyExistingMergedCellsAreYouSure)) {\r\n                                return false;\r\n                            } else {\r\n                                obj.destroyMerged();\r\n                            }\r\n                        }\r\n    \r\n                        // Clear any search\r\n                        if (obj.options.search == true) {\r\n                            if (obj.results && obj.results.length != obj.rows.length) {\r\n                                if (confirm(obj.options.text.thisActionWillClearYourSearchResultsAreYouSure)) {\r\n                                    obj.resetSearch();\r\n                                } else {\r\n                                    return false;\r\n                                }\r\n                            }\r\n    \r\n                            obj.results = null;\r\n                        }\r\n    \r\n                        // If delete all rows, and set allowDeletingAllRows false, will stay one row\r\n                        if (obj.options.allowDeletingAllRows == false && lastRow + 1 === numOfRows) {\r\n                            numOfRows--;\r\n                            console.error('JEXCEL. It is not possible to delete the last row');\r\n                        }\r\n    \r\n                        // Remove node\r\n                        for (var row = rowNumber; row < rowNumber + numOfRows; row++) {\r\n                            if (Array.prototype.indexOf.call(obj.tbody.children, obj.rows[row]) >= 0) {\r\n                                obj.rows[row].className = '';\r\n                                obj.rows[row].parentNode.removeChild(obj.rows[row]);\r\n                            }\r\n                        }\r\n    \r\n                        // Remove data\r\n                        var rowRecords = obj.records.splice(rowNumber, numOfRows);\r\n                        var rowData = obj.options.data.splice(rowNumber, numOfRows);\r\n                        var rowNode = obj.rows.splice(rowNumber, numOfRows);\r\n    \r\n                        // Respect pagination\r\n                        if (obj.options.pagination > 0 && obj.tbody.children.length != obj.options.pagination) {\r\n                            obj.page(obj.pageNumber);\r\n                        }\r\n    \r\n                        // Remove selection\r\n                        obj.conditionalSelectionUpdate(1, rowNumber, (rowNumber + numOfRows) - 1);\r\n    \r\n                        // Keep history\r\n                        obj.setHistory({\r\n                            action: 'deleteRow',\r\n                            rowNumber: rowNumber,\r\n                            numOfRows: numOfRows,\r\n                            insertBefore: 1,\r\n                            rowRecords: rowRecords,\r\n                            rowData: rowData,\r\n                            rowNode: rowNode\r\n                        });\r\n    \r\n                        // Remove table references\r\n                        obj.updateTableReferences();\r\n    \r\n                        // Events\r\n                        obj.dispatch('ondeleterow', el, rowNumber, numOfRows, rowRecords);\r\n                    }\r\n                } else {\r\n                    console.error('JEXCEL. It is not possible to delete the last row');\r\n                }\r\n            }\r\n        }\r\n    \r\n    \r\n        /**\r\n         * Move column\r\n         * \r\n         * @return void\r\n         */\r\n        obj.moveColumn = function(o, d) {\r\n            if (Object.keys(obj.options.mergeCells).length > 0) {\r\n                if (o > d) {\r\n                    var insertBefore = 1;\r\n                } else {\r\n                    var insertBefore = 0;\r\n                }\r\n\r\n                if (obj.isColMerged(o).length || obj.isColMerged(d, insertBefore).length) {\r\n                    if (! confirm(obj.options.text.thisActionWillDestroyAnyExistingMergedCellsAreYouSure)) {\r\n                        return false;\r\n                    } else {\r\n                        obj.destroyMerged();\r\n                    }\r\n                }\r\n            }\r\n    \r\n            var o = parseInt(o);\r\n            var d = parseInt(d);\r\n    \r\n            if (o > d) {\r\n                obj.headerContainer.insertBefore(obj.headers[o], obj.headers[d]);\r\n                obj.colgroupContainer.insertBefore(obj.colgroup[o], obj.colgroup[d]);\r\n    \r\n                for (var j = 0; j < obj.rows.length; j++) {\r\n                    obj.rows[j].insertBefore(obj.records[j][o], obj.records[j][d]);\r\n                }\r\n            } else {\r\n                obj.headerContainer.insertBefore(obj.headers[o], obj.headers[d].nextSibling);\r\n                obj.colgroupContainer.insertBefore(obj.colgroup[o], obj.colgroup[d].nextSibling);\r\n    \r\n                for (var j = 0; j < obj.rows.length; j++) {\r\n                    obj.rows[j].insertBefore(obj.records[j][o], obj.records[j][d].nextSibling);\r\n                }\r\n            }\r\n    \r\n            obj.options.columns.splice(d, 0, obj.options.columns.splice(o, 1)[0]);\r\n            obj.headers.splice(d, 0, obj.headers.splice(o, 1)[0]);\r\n            obj.colgroup.splice(d, 0, obj.colgroup.splice(o, 1)[0]);\r\n    \r\n            for (var j = 0; j < obj.rows.length; j++) {\r\n                obj.options.data[j].splice(d, 0, obj.options.data[j].splice(o, 1)[0]);\r\n                obj.records[j].splice(d, 0, obj.records[j].splice(o, 1)[0]);\r\n            }\r\n    \r\n            // Update footers position\r\n            if (obj.options.footers) {\r\n                for (var j = 0; j < obj.options.footers.length; j++) {\r\n                    obj.options.footers[j].splice(d, 0, obj.options.footers[j].splice(o, 1)[0]);\r\n                }\r\n            }\r\n\r\n            // Keeping history of changes\r\n            obj.setHistory({\r\n                action:'moveColumn',\r\n                oldValue: o,\r\n                newValue: d,\r\n            });\r\n    \r\n            // Update table references\r\n            obj.updateTableReferences();\r\n    \r\n            // Events\r\n            obj.dispatch('onmovecolumn', el, o, d);\r\n        }\r\n\r\n        /**\r\n         * Insert a new column\r\n         * \r\n         * @param mixed - num of columns to be added or data to be added in one single column\r\n         * @param int columnNumber - number of columns to be created\r\n         * @param bool insertBefore\r\n         * @param object properties - column properties\r\n         * @return void\r\n         */\r\n        obj.insertColumn = function(mixed, columnNumber, insertBefore, properties) {\r\n            // Configuration\r\n            if (obj.options.allowInsertColumn == true) {\r\n                // Records\r\n                var records = [];\r\n    \r\n                // Data to be insert\r\n                var data = [];\r\n    \r\n                // The insert could be lead by number of rows or the array of data\r\n                if (mixed > 0) {\r\n                    var numOfColumns = mixed;\r\n                } else {\r\n                    var numOfColumns = 1;\r\n    \r\n                    if (mixed) {\r\n                        data = mixed;\r\n                    }\r\n                }\r\n    \r\n                // Direction\r\n                var insertBefore = insertBefore ? true : false;\r\n    \r\n                // Current column number\r\n                var lastColumn = obj.options.columns.length - 1;\r\n    \r\n                // Confirm position\r\n                if (columnNumber == undefined || columnNumber >= parseInt(lastColumn) || columnNumber < 0) {\r\n                    columnNumber = lastColumn;\r\n                }\r\n    \r\n                // Onbeforeinsertcolumn\r\n                if (obj.dispatch('onbeforeinsertcolumn', el, columnNumber, numOfColumns, insertBefore) === false) {\r\n                    console.log('onbeforeinsertcolumn returned false');\r\n\r\n                    return false;\r\n                }\r\n    \r\n                // Merged cells\r\n                if (Object.keys(obj.options.mergeCells).length > 0) {\r\n                    if (obj.isColMerged(columnNumber, insertBefore).length) {\r\n                        if (! confirm(obj.options.text.thisActionWillDestroyAnyExistingMergedCellsAreYouSure)) {\r\n                            return false;\r\n                        } else {\r\n                            obj.destroyMerged();\r\n                        }\r\n                    }\r\n                }\r\n    \r\n                // Create default properties\r\n                if (! properties) {\r\n                    properties = [];\r\n                }\r\n    \r\n                for (var i = 0; i < numOfColumns; i++) {\r\n                    if (! properties[i]) {\r\n                        properties[i] = { type:'text', source:[], options:[], width:obj.options.defaultColWidth, align:obj.options.defaultColAlign };\r\n                    }\r\n                }\r\n    \r\n                // Insert before\r\n                var columnIndex = (! insertBefore) ? columnNumber + 1 : columnNumber;\r\n                obj.options.columns = jexcel.injectArray(obj.options.columns, columnIndex, properties);\r\n    \r\n                // Open space in the containers\r\n                var currentHeaders = obj.headers.splice(columnIndex);\r\n                var currentColgroup = obj.colgroup.splice(columnIndex);\r\n    \r\n                // History\r\n                var historyHeaders = [];\r\n                var historyColgroup = [];\r\n                var historyRecords = [];\r\n                var historyData = [];\r\n                var historyFooters = [];\r\n    \r\n                // Add new headers\r\n                for (var col = columnIndex; col < (numOfColumns + columnIndex); col++) {\r\n                    obj.createCellHeader(col);\r\n                    obj.headerContainer.insertBefore(obj.headers[col], obj.headerContainer.children[col+1]);\r\n                    obj.colgroupContainer.insertBefore(obj.colgroup[col], obj.colgroupContainer.children[col+1]);\r\n    \r\n                    historyHeaders.push(obj.headers[col]);\r\n                    historyColgroup.push(obj.colgroup[col]);\r\n                }\r\n    \r\n                // Add new footer cells\r\n                if (obj.options.footers) {\r\n                    for (var j = 0; j < obj.options.footers.length; j++) {\r\n                        historyFooters[j] = [];\r\n                        for (var i = 0; i < numOfColumns; i++) {\r\n                            historyFooters[j].push('');\r\n                        }\r\n                        obj.options.footers[j].splice(columnIndex, 0, historyFooters[j]);\r\n                    }\r\n                }\r\n\r\n                // Adding visual columns\r\n                for (var row = 0; row < obj.options.data.length; row++) {\r\n                    // Keep the current data\r\n                    var currentData = obj.options.data[row].splice(columnIndex);\r\n                    var currentRecord = obj.records[row].splice(columnIndex);\r\n    \r\n                    // History\r\n                    historyData[row] = [];\r\n                    historyRecords[row] = [];\r\n    \r\n                    for (var col = columnIndex; col < (numOfColumns + columnIndex); col++) {\r\n                        // New value\r\n                        var value = data[row] ? data[row] : '';\r\n                        obj.options.data[row][col] = value;\r\n                        // New cell\r\n                        var td = obj.createCell(col, row, obj.options.data[row][col]);\r\n                        obj.records[row][col] = td;\r\n                        // Add cell to the row\r\n                        if (obj.rows[row]) {\r\n                            obj.rows[row].insertBefore(td, obj.rows[row].children[col+1]);\r\n                        }\r\n    \r\n                        // Record History\r\n                        historyData[row].push(value);\r\n                        historyRecords[row].push(td);\r\n                    }\r\n    \r\n                    // Copy the data back to the main data\r\n                    Array.prototype.push.apply(obj.options.data[row], currentData);\r\n                    Array.prototype.push.apply(obj.records[row], currentRecord);\r\n                }\r\n    \r\n                Array.prototype.push.apply(obj.headers, currentHeaders);\r\n                Array.prototype.push.apply(obj.colgroup, currentColgroup);\r\n    \r\n                // Adjust nested headers\r\n                if (obj.options.nestedHeaders && obj.options.nestedHeaders.length > 0) {\r\n                    // Flexible way to handle nestedheaders\r\n                    if (obj.options.nestedHeaders[0] && obj.options.nestedHeaders[0][0]) {\r\n                        for (var j = 0; j < obj.options.nestedHeaders.length; j++) {\r\n                            var colspan = parseInt(obj.options.nestedHeaders[j][obj.options.nestedHeaders[j].length-1].colspan) + numOfColumns;\r\n                            obj.options.nestedHeaders[j][obj.options.nestedHeaders[j].length-1].colspan = colspan;\r\n                            obj.thead.children[j].children[obj.thead.children[j].children.length-1].setAttribute('colspan', colspan);\r\n                        }\r\n                    } else {\r\n                        var colspan = parseInt(obj.options.nestedHeaders[0].colspan) + numOfColumns;\r\n                        obj.options.nestedHeaders[0].colspan = colspan;\r\n                        obj.thead.children[0].children[obj.thead.children[0].children.length-1].setAttribute('colspan', colspan);\r\n                    }\r\n                }\r\n    \r\n                // Keep history\r\n                obj.setHistory({\r\n                    action: 'insertColumn',\r\n                    columnNumber:columnNumber,\r\n                    numOfColumns:numOfColumns,\r\n                    insertBefore:insertBefore,\r\n                    columns:properties,\r\n                    headers:historyHeaders,\r\n                    colgroup:historyColgroup,\r\n                    records:historyRecords,\r\n                    footers:historyFooters,\r\n                    data:historyData,\r\n                });\r\n    \r\n                // Remove table references\r\n                obj.updateTableReferences();\r\n    \r\n                // Events\r\n                obj.dispatch('oninsertcolumn', el, columnNumber, numOfColumns, historyRecords, insertBefore);\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Delete a column by number\r\n         * \r\n         * @param integer columnNumber - reference column to be excluded\r\n         * @param integer numOfColumns - number of columns to be excluded from the reference column\r\n         * @return void\r\n         */\r\n        obj.deleteColumn = function(columnNumber, numOfColumns) {\r\n            // Global Configuration\r\n            if (obj.options.allowDeleteColumn == true) {\r\n                if (obj.headers.length > 1) {\r\n                    // Delete column definitions\r\n                    if (columnNumber == undefined) {\r\n                        var number = obj.getSelectedColumns(true);\r\n    \r\n                        if (! number.length) {\r\n                            // Remove last column\r\n                            columnNumber = obj.headers.length - 1;\r\n                            numOfColumns = 1;\r\n                        } else {\r\n                            // Remove selected\r\n                            columnNumber = parseInt(number[0]);\r\n                            numOfColumns = parseInt(number.length);\r\n                        }\r\n                    }\r\n    \r\n                    // Lasat column\r\n                    var lastColumn = obj.options.data[0].length - 1;\r\n    \r\n                    if (columnNumber == undefined || columnNumber > lastColumn || columnNumber < 0) {\r\n                        columnNumber = lastColumn;\r\n                    }\r\n    \r\n                    // Minimum of columns to be delete is 1\r\n                    if (! numOfColumns) {\r\n                        numOfColumns = 1;\r\n                    }\r\n    \r\n                    // Can't delete more than the limit of the table\r\n                    if (numOfColumns > obj.options.data[0].length - columnNumber) {\r\n                        numOfColumns = obj.options.data[0].length - columnNumber;\r\n                    }\r\n    \r\n                    // onbeforedeletecolumn\r\n                   if (obj.dispatch('onbeforedeletecolumn', el, columnNumber, numOfColumns) === false) {\r\n                      console.log('onbeforedeletecolumn returned false');\r\n                      return false;\r\n                   }\r\n    \r\n                    // Can't remove the last column\r\n                    if (parseInt(columnNumber) > -1) {\r\n                        // Merged cells\r\n                        var mergeExists = false;\r\n                        if (Object.keys(obj.options.mergeCells).length > 0) {\r\n                            for (var col = columnNumber; col < columnNumber + numOfColumns; col++) {\r\n                                if (obj.isColMerged(col, false).length) {\r\n                                    mergeExists = true;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (mergeExists) {\r\n                            if (! confirm(obj.options.text.thisActionWillDestroyAnyExistingMergedCellsAreYouSure)) {\r\n                                return false;\r\n                            } else {\r\n                                obj.destroyMerged();\r\n                            }\r\n                        }\r\n    \r\n                        // Delete the column properties\r\n                        var columns = obj.options.columns.splice(columnNumber, numOfColumns);\r\n    \r\n                        for (var col = columnNumber; col < columnNumber + numOfColumns; col++) {\r\n                            obj.colgroup[col].className = '';\r\n                            obj.headers[col].className = '';\r\n                            obj.colgroup[col].parentNode.removeChild(obj.colgroup[col]);\r\n                            obj.headers[col].parentNode.removeChild(obj.headers[col]);\r\n                        }\r\n    \r\n                        var historyHeaders = obj.headers.splice(columnNumber, numOfColumns);\r\n                        var historyColgroup = obj.colgroup.splice(columnNumber, numOfColumns);\r\n                        var historyRecords = [];\r\n                        var historyData = [];\r\n                        var historyFooters = [];\r\n\r\n                        for (var row = 0; row < obj.options.data.length; row++) {\r\n                            for (var col = columnNumber; col < columnNumber + numOfColumns; col++) {\r\n                                obj.records[row][col].className = '';\r\n                                obj.records[row][col].parentNode.removeChild(obj.records[row][col]);\r\n                            }\r\n                        }\r\n    \r\n                        // Delete headers\r\n                        for (var row = 0; row < obj.options.data.length; row++) {\r\n                            // History\r\n                            historyData[row] = obj.options.data[row].splice(columnNumber, numOfColumns);\r\n                            historyRecords[row] = obj.records[row].splice(columnNumber, numOfColumns);\r\n                        }\r\n\r\n                        // Delete footers\r\n                        if (obj.options.footers) {\r\n                            for (var row = 0; row < obj.options.footers.length; row++) {\r\n                                historyFooters[row] = obj.options.footers[row].splice(columnNumber, numOfColumns);\r\n                            }\r\n                        }\r\n\r\n                        // Remove selection\r\n                        obj.conditionalSelectionUpdate(0, columnNumber, (columnNumber + numOfColumns) - 1);\r\n    \r\n                        // Adjust nested headers\r\n                        if (obj.options.nestedHeaders && obj.options.nestedHeaders.length > 0) {\r\n                            // Flexible way to handle nestedheaders\r\n                            if (obj.options.nestedHeaders[0] && obj.options.nestedHeaders[0][0]) {\r\n                                for (var j = 0; j < obj.options.nestedHeaders.length; j++) {\r\n                                    var colspan = parseInt(obj.options.nestedHeaders[j][obj.options.nestedHeaders[j].length-1].colspan) - numOfColumns;\r\n                                    obj.options.nestedHeaders[j][obj.options.nestedHeaders[j].length-1].colspan = colspan;\r\n                                    obj.thead.children[j].children[obj.thead.children[j].children.length-1].setAttribute('colspan', colspan);\r\n                                }\r\n                            } else {\r\n                                var colspan = parseInt(obj.options.nestedHeaders[0].colspan) - numOfColumns;\r\n                                obj.options.nestedHeaders[0].colspan = colspan;\r\n                                obj.thead.children[0].children[obj.thead.children[0].children.length-1].setAttribute('colspan', colspan);\r\n                            }\r\n                        }\r\n    \r\n                        // Keeping history of changes\r\n                        obj.setHistory({\r\n                            action:'deleteColumn',\r\n                            columnNumber:columnNumber,\r\n                            numOfColumns:numOfColumns,\r\n                            insertBefore: 1,\r\n                            columns:columns,\r\n                            headers:historyHeaders,\r\n                            colgroup:historyColgroup,\r\n                            records:historyRecords,\r\n                            footers:historyFooters,\r\n                            data:historyData,\r\n                        });\r\n    \r\n                        // Update table references\r\n                        obj.updateTableReferences();\r\n    \r\n                        // Delete\r\n                        obj.dispatch('ondeletecolumn', el, columnNumber, numOfColumns, historyRecords);\r\n                    }\r\n                } else {\r\n                    console.error('JEXCEL. It is not possible to delete the last column');\r\n                }\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Get seleted rows numbers\r\n         * \r\n         * @return array\r\n         */\r\n        obj.getSelectedRows = function(asIds) {\r\n            var rows = [];\r\n            // Get all selected rows\r\n            for (var j = 0; j < obj.rows.length; j++) {\r\n                if (obj.rows[j].classList.contains('selected')) {\r\n                    if (asIds) {\r\n                        rows.push(j);\r\n                    } else {\r\n                        rows.push(obj.rows[j]);\r\n                    }\r\n                }\r\n            }\r\n    \r\n            return rows;\r\n        },\r\n    \r\n        /**\r\n         * Get seleted column numbers\r\n         * \r\n         * @return array\r\n         */\r\n        obj.getSelectedColumns = function() {\r\n            var cols = [];\r\n            // Get all selected cols\r\n            for (var i = 0; i < obj.headers.length; i++) {\r\n                if (obj.headers[i].classList.contains('selected')) {\r\n                    cols.push(i);\r\n                }\r\n            }\r\n    \r\n            return cols;\r\n        }\r\n    \r\n        /**\r\n         * Get highlighted\r\n         * \r\n         * @return array\r\n         */\r\n        obj.getHighlighted = function() {\r\n            return obj.highlighted;\r\n        }\r\n    \r\n        /**\r\n         * Update cell references\r\n         * \r\n         * @return void\r\n         */\r\n        obj.updateTableReferences = function() {\r\n            // Update headers\r\n            for (var i = 0; i < obj.headers.length; i++) {\r\n                var x = obj.headers[i].getAttribute('data-x');\r\n    \r\n                if (x != i) {\r\n                    // Update coords\r\n                    obj.headers[i].setAttribute('data-x', i);\r\n                    // Title\r\n                    if (! obj.headers[i].getAttribute('title')) {\r\n                        obj.headers[i].innerHTML = jexcel.getColumnName(i);\r\n                    }\r\n                }\r\n            }\r\n    \r\n            // Update all rows\r\n            for (var j = 0; j < obj.rows.length; j++) {\r\n                if (obj.rows[j]) {\r\n                    var y = obj.rows[j].getAttribute('data-y');\r\n    \r\n                    if (y != j) {\r\n                        // Update coords\r\n                        obj.rows[j].setAttribute('data-y', j);\r\n                        obj.rows[j].children[0].setAttribute('data-y', j);\r\n                        // Row number\r\n                        obj.rows[j].children[0].innerHTML = j + 1;\r\n                    }\r\n                }\r\n            }\r\n    \r\n            // Regular cells affected by this change\r\n            var affectedTokens = [];\r\n            var mergeCellUpdates = [];\r\n    \r\n            // Update cell\r\n            var updatePosition = function(x,y,i,j) {\r\n                if (x != i) {\r\n                    obj.records[j][i].setAttribute('data-x', i);\r\n                }\r\n                if (y != j) {\r\n                    obj.records[j][i].setAttribute('data-y', j);\r\n                }\r\n    \r\n                // Other updates\r\n                if (x != i || y != j) {\r\n                    var columnIdFrom = jexcel.getColumnNameFromId([x, y]);\r\n                    var columnIdTo = jexcel.getColumnNameFromId([i, j]);\r\n                    affectedTokens[columnIdFrom] = columnIdTo;\r\n                }\r\n            }\r\n    \r\n            for (var j = 0; j < obj.records.length; j++) {\r\n                for (var i = 0; i < obj.records[0].length; i++) {\r\n                    if (obj.records[j][i]) {\r\n                        // Current values\r\n                        var x = obj.records[j][i].getAttribute('data-x');\r\n                        var y = obj.records[j][i].getAttribute('data-y');\r\n    \r\n                        // Update column\r\n                        if (obj.records[j][i].getAttribute('data-merged')) {\r\n                            var columnIdFrom = jexcel.getColumnNameFromId([x, y]);\r\n                            var columnIdTo = jexcel.getColumnNameFromId([i, j]);\r\n                            if (mergeCellUpdates[columnIdFrom] == null) {\r\n                                if (columnIdFrom == columnIdTo) {\r\n                                    mergeCellUpdates[columnIdFrom] = false;\r\n                                } else {\r\n                                    var totalX = parseInt(i - x);\r\n                                    var totalY = parseInt(j - y);\r\n                                    mergeCellUpdates[columnIdFrom] = [ columnIdTo, totalX, totalY ];\r\n                                }\r\n                            }\r\n                        } else {\r\n                            updatePosition(x,y,i,j);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n    \r\n            // Update merged if applicable\r\n            var keys = Object.keys(mergeCellUpdates);\r\n            if (keys.length) {\r\n                for (var i = 0; i < keys.length; i++) {\r\n                    if (mergeCellUpdates[keys[i]]) {\r\n                        var info = jexcel.getIdFromColumnName(keys[i], true)\r\n                        var x = info[0];\r\n                        var y = info[1];\r\n                        updatePosition(x,y,x + mergeCellUpdates[keys[i]][1],y + mergeCellUpdates[keys[i]][2]);\r\n    \r\n                        var columnIdFrom = keys[i];\r\n                        var columnIdTo = mergeCellUpdates[keys[i]][0];\r\n                        for (var j = 0; j < obj.options.mergeCells[columnIdFrom][2].length; j++) {\r\n                            var x = parseInt(obj.options.mergeCells[columnIdFrom][2][j].getAttribute('data-x'));\r\n                            var y = parseInt(obj.options.mergeCells[columnIdFrom][2][j].getAttribute('data-y'));\r\n                            obj.options.mergeCells[columnIdFrom][2][j].setAttribute('data-x', x + mergeCellUpdates[keys[i]][1]);\r\n                            obj.options.mergeCells[columnIdFrom][2][j].setAttribute('data-y', y + mergeCellUpdates[keys[i]][2]);\r\n                        }\r\n    \r\n                        obj.options.mergeCells[columnIdTo] = obj.options.mergeCells[columnIdFrom];\r\n                        delete(obj.options.mergeCells[columnIdFrom]);\r\n                    }\r\n                }\r\n            }\r\n    \r\n            // Update formulas\r\n            obj.updateFormulas(affectedTokens);\r\n    \r\n            // Update meta data\r\n            obj.updateMeta(affectedTokens);\r\n    \r\n            // Refresh selection\r\n            obj.refreshSelection();\r\n    \r\n            // Update table with custom configuration if applicable\r\n            obj.updateTable();\r\n        }\r\n    \r\n        /**\r\n         * Custom settings for the cells\r\n         */\r\n        obj.updateTable = function() {\r\n            // Check for spare\r\n            if (obj.options.minSpareRows > 0) {\r\n                var numBlankRows = 0;\r\n                for (var j = obj.rows.length - 1; j >= 0; j--) {\r\n                    var test = false;\r\n                    for (var i = 0; i < obj.headers.length; i++) {\r\n                        if (obj.options.data[j][i]) {\r\n                            test = true;\r\n                        }\r\n                    }\r\n                    if (test) {\r\n                        break;\r\n                    } else {\r\n                        numBlankRows++;\r\n                    }\r\n                }\r\n    \r\n                if (obj.options.minSpareRows - numBlankRows > 0) {\r\n                    obj.insertRow(obj.options.minSpareRows - numBlankRows)\r\n                }\r\n            }\r\n    \r\n            if (obj.options.minSpareCols > 0) {\r\n                var numBlankCols = 0;\r\n                for (var i = obj.headers.length - 1; i >= 0 ; i--) {\r\n                    var test = false;\r\n                    for (var j = 0; j < obj.rows.length; j++) {\r\n                        if (obj.options.data[j][i]) {\r\n                            test = true;\r\n                        }\r\n                    }\r\n                    if (test) {\r\n                        break;\r\n                    } else {\r\n                        numBlankCols++;\r\n                    }\r\n                }\r\n    \r\n                if (obj.options.minSpareCols - numBlankCols > 0) {\r\n                    obj.insertColumn(obj.options.minSpareCols - numBlankCols)\r\n                }\r\n            }\r\n    \r\n            // Customizations by the developer\r\n            if (typeof(obj.options.updateTable) == 'function') {\r\n                if (obj.options.detachForUpdates) {\r\n                    el.removeChild(obj.content);\r\n                }\r\n\r\n                for (var j = 0; j < obj.rows.length; j++) {\r\n                    for (var i = 0; i < obj.headers.length; i++) {\r\n                        obj.options.updateTable(el, obj.records[j][i], i, j, obj.options.data[j][i], obj.records[j][i].innerText, jexcel.getColumnNameFromId([i, j]));\r\n                    }\r\n                }\r\n\r\n                if (obj.options.detachForUpdates) {\r\n                    el.insertBefore(obj.content, obj.pagination);\r\n                }\r\n            }\r\n    \r\n            // Update footers\r\n            if (obj.options.footers) {\r\n                obj.setFooter();\r\n            }\r\n\r\n            // Update corner position\r\n            setTimeout(function() {\r\n                obj.updateCornerPosition();\r\n            },0);\r\n        }\r\n\r\n        /**\r\n         * Readonly\r\n         */\r\n        obj.isReadOnly = function(cell) {\r\n            if (cell = obj.getCell(cell)) {\r\n                return cell.classList.contains('readonly') ? true : false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Readonly\r\n         */\r\n        obj.setReadOnly = function(cell, state) {\r\n            if (cell = obj.getCell(cell)) {\r\n                if (state) {\r\n                    cell.classList.add('readonly');\r\n                } else {\r\n                    cell.classList.remove('readonly');\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Show row\r\n         */\r\n        obj.showRow = function(rowNumber) {\r\n            obj.rows[rowNumber].style.display = '';\r\n        }\r\n\r\n        /**\r\n         * Hide row\r\n         */\r\n        obj.hideRow = function(rowNumber) {\r\n            obj.rows[rowNumber].style.display = 'none';\r\n        }\r\n\r\n        /**\r\n         * Show column\r\n         */\r\n        obj.showColumn = function(colNumber) {\r\n            obj.headers[colNumber].style.display = '';\r\n            obj.colgroup[colNumber].style.display = '';\r\n            for (var j = 0; j < obj.options.data.length; j++) {\r\n                obj.records[j][colNumber].style.display = '';\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Hide column\r\n         */\r\n        obj.hideColumn = function(colNumber) {\r\n            obj.headers[colNumber].style.display = 'none';\r\n            obj.colgroup[colNumber].style.display = 'none';\r\n            for (var j = 0; j < obj.options.data.length; j++) {\r\n                obj.records[j][colNumber].style.display = 'none';\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Show index column\r\n         */\r\n        obj.showIndex = function() {\r\n            obj.table.classList.remove('jexcel_hidden_index');\r\n        }\r\n    \r\n        /**\r\n         * Hide index column\r\n         */\r\n        obj.hideIndex = function() {\r\n            obj.table.classList.add('jexcel_hidden_index');\r\n        }\r\n    \r\n        /**\r\n         * Update all related cells in the chain\r\n         */\r\n        var chainLoopProtection = [];\r\n    \r\n        obj.updateFormulaChain = function(x, y, records) {\r\n            var cellId = jexcel.getColumnNameFromId([x, y]);\r\n            if (obj.formula[cellId] && obj.formula[cellId].length > 0) {\r\n                if (chainLoopProtection[cellId]) {\r\n                    obj.records[y][x].innerHTML = '#ERROR';\r\n                    obj.formula[cellId] = '';\r\n                } else {\r\n                    // Protection\r\n                    chainLoopProtection[cellId] = true;\r\n    \r\n                    for (var i = 0; i < obj.formula[cellId].length; i++) {\r\n                        var cell = jexcel.getIdFromColumnName(obj.formula[cellId][i], true);\r\n                        // Update cell\r\n                        var value = ''+obj.options.data[cell[1]][cell[0]];\r\n                        if (value.substr(0,1) == '=') {\r\n                            records.push(obj.updateCell(cell[0], cell[1], value, true));\r\n                        } else {\r\n                            // No longer a formula, remove from the chain\r\n                            Object.keys(obj.formula)[i] = null;\r\n                        }\r\n                        obj.updateFormulaChain(cell[0], cell[1], records);\r\n                    }\r\n                }\r\n            }\r\n    \r\n            chainLoopProtection = [];\r\n        }\r\n    \r\n        /**\r\n         * Update formulas\r\n         */\r\n        obj.updateFormulas = function(referencesToUpdate) {\r\n            // Update formulas\r\n            for (var j = 0; j < obj.options.data.length; j++) {\r\n                for (var i = 0; i < obj.options.data[0].length; i++) {\r\n                    var value = '' + obj.options.data[j][i];\r\n                    // Is formula\r\n                    if (value.substr(0,1) == '=') {\r\n                        // Replace tokens\r\n                        var newFormula = obj.updateFormula(value, referencesToUpdate);\r\n                        if (newFormula != value) {\r\n                            obj.options.data[j][i] = newFormula;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n    \r\n            // Update formula chain\r\n            var formula = [];\r\n            var keys = Object.keys(obj.formula);\r\n            for (var j = 0; j < keys.length; j++) {\r\n                // Current key and values\r\n                var key = keys[j];\r\n                var value = obj.formula[key];\r\n                // Update key\r\n                if (referencesToUpdate[key]) {\r\n                    key = referencesToUpdate[key];\r\n                }\r\n                // Update values\r\n                formula[key] = [];\r\n                for (var i = 0; i < value.length; i++) {\r\n                    var letter = value[i];\r\n                    if (referencesToUpdate[letter]) {\r\n                        letter = referencesToUpdate[letter];\r\n                    }\r\n                    formula[key].push(letter);\r\n                }\r\n            }\r\n            obj.formula = formula;\r\n        }\r\n    \r\n        /**\r\n         * Update formula\r\n         */\r\n        obj.updateFormula = function(formula, referencesToUpdate) {\r\n            var testLetter = /[A-Z]/;\r\n            var testNumber = /[0-9]/;\r\n    \r\n            var newFormula = '';\r\n            var letter = null;\r\n            var number = null;\r\n            var token = '';\r\n    \r\n            for (var index = 0; index < formula.length; index++) {\r\n                if (testLetter.exec(formula[index])) {\r\n                    letter = 1;\r\n                    number = 0;\r\n                    token += formula[index];\r\n                } else if (testNumber.exec(formula[index])) {\r\n                    number = letter ? 1 : 0;\r\n                    token += formula[index];\r\n                } else {\r\n                    if (letter && number) {\r\n                        token = referencesToUpdate[token] ? referencesToUpdate[token] : token;\r\n                    }\r\n                    newFormula += token;\r\n                    newFormula += formula[index];\r\n                    letter = 0;\r\n                    number = 0;\r\n                    token = '';\r\n                }\r\n            }\r\n    \r\n            if (token) {\r\n                if (letter && number) {\r\n                    token = referencesToUpdate[token] ? referencesToUpdate[token] : token;\r\n                }\r\n                newFormula += token;\r\n            }\r\n    \r\n            return newFormula;\r\n        }\r\n    \r\n        /**\r\n         * Secure formula\r\n         */\r\n        var secureFormula = function(oldValue) {\r\n            var newValue = '';\r\n            var inside = 0;\r\n\r\n            for (var i = 0; i < oldValue.length; i++) {\r\n                if (oldValue[i] == '\"') {\r\n                    if (inside == 0) {\r\n                        inside = 1;\r\n                    } else {\r\n                        inside = 0;\r\n                    }\r\n                }\r\n\r\n                if (inside == 1) {\r\n                    newValue += oldValue[i];\r\n                } else {\r\n                    newValue += oldValue[i].toUpperCase();\r\n                }\r\n            }\r\n\r\n            return newValue;\r\n        }\r\n\r\n        /**\r\n         * Parse formulas\r\n         */\r\n        obj.executeFormula = function(expression, x, y) {\r\n    \r\n            var formulaResults = [];\r\n            var formulaLoopProtection = [];\r\n    \r\n            // Execute formula with loop protection\r\n            var execute = function(expression, x, y) {\r\n             // Parent column identification\r\n                var parentId = jexcel.getColumnNameFromId([x, y]);\r\n    \r\n                // Code protection\r\n                if (formulaLoopProtection[parentId]) {\r\n                    console.error('Reference loop detected');\r\n                    return '#ERROR';\r\n                }\r\n    \r\n                formulaLoopProtection[parentId] = true;\r\n    \r\n                // Convert range tokens\r\n                var tokensUpdate = function(tokens) {\r\n                    for (var index = 0; index < tokens.length; index++) {\r\n                        var f = [];\r\n                        var token = tokens[index].split(':');\r\n                        var e1 = jexcel.getIdFromColumnName(token[0], true);\r\n                        var e2 = jexcel.getIdFromColumnName(token[1], true);\r\n    \r\n                        if (e1[0] <= e2[0]) {\r\n                            var x1 = e1[0];\r\n                            var x2 = e2[0];\r\n                        } else {\r\n                            var x1 = e2[0];\r\n                            var x2 = e1[0];\r\n                        }\r\n    \r\n                        if (e1[1] <= e2[1]) {\r\n                            var y1 = e1[1];\r\n                            var y2 = e2[1];\r\n                        } else {\r\n                            var y1 = e2[1];\r\n                            var y2 = e1[1];\r\n                        }\r\n    \r\n                        for (var j = y1; j <= y2; j++) {\r\n                            for (var i = x1; i <= x2; i++) {\r\n                                f.push(jexcel.getColumnNameFromId([i, j]));\r\n                            }\r\n                        }\r\n    \r\n                        expression = expression.replace(tokens[index], f.join(','));\r\n                    }\r\n                }\r\n    \r\n                // Range with $ remove $\r\n                expression = expression.replace(/\\$?([A-Z]+)\\$?([0-9]+)/g, \"$1$2\");\r\n\r\n                var tokens = expression.match(/([A-Z]+[0-9]+)\\:([A-Z]+[0-9]+)/g);\r\n                if (tokens && tokens.length) {\r\n                    tokensUpdate(tokens);\r\n                }\r\n    \r\n                // String\r\n                var evalstring = '';\r\n    \r\n                // Get tokens\r\n                var tokens = expression.match(/([A-Z]+[0-9]+)/g);\r\n    \r\n                // Direct self-reference protection\r\n                if (tokens && tokens.indexOf(parentId) > -1) {\r\n                    console.error('Self Reference detected');\r\n                    return '#ERROR';\r\n                } else {\r\n                    if (tokens) {\r\n                        for (var i = 0; i < tokens.length; i++) {\r\n                            // Keep chain\r\n                            if (! obj.formula[tokens[i]]) {\r\n                                obj.formula[tokens[i]] = [];\r\n                            }\r\n                            // Is already in the register\r\n                            if (obj.formula[tokens[i]].indexOf(parentId) < 0) {\r\n                                obj.formula[tokens[i]].push(parentId);\r\n                            }\r\n    \r\n                            // Do not calculate again\r\n                            if (eval('typeof(' + tokens[i] + ') == \"undefined\"')) {\r\n                                // Coords\r\n                                var position = jexcel.getIdFromColumnName(tokens[i], 1);\r\n                                // Get value\r\n                                if (typeof(obj.options.data[position[1]]) != 'undefined' && typeof(obj.options.data[position[1]][position[0]]) != 'undefined') {\r\n                                    var value = obj.options.data[position[1]][position[0]];\r\n                                } else {\r\n                                    var value = '';\r\n                                }\r\n                                // Get column data\r\n                                if ((''+value).substr(0,1) == '=') {\r\n                                    if (formulaResults[tokens[i]]) {\r\n                                        value = formulaResults[tokens[i]];\r\n                                    } else {\r\n                                        value = execute(value, position[0], position[1]);\r\n                                        formulaResults[tokens[i]] = value;\r\n                                    }\r\n                                }\r\n                                // Type!\r\n                                if ((''+value).trim() == '') {\r\n                                    // Null\r\n                                    evalstring += \"var \" + tokens[i] + \" = null;\";\r\n                                } else {\r\n                                    if (value == Number(value) && obj.options.autoCasting == true) {\r\n                                        // Number\r\n                                        evalstring += \"var \" + tokens[i] + \" = \" + Number(value) + \";\";\r\n                                    } else {\r\n                                        // Trying any formatted number\r\n                                        var number = obj.parseNumber(value, position[0])\r\n                                        if (obj.options.autoCasting == true && number) {\r\n                                            // Render as number\r\n                                            evalstring += \"var \" + tokens[i] + \" = \" + number + \";\";\r\n                                        } else {\r\n                                            // Render as string\r\n                                            evalstring += \"var \" + tokens[i] + \" = '\" + value + \"';\";\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n    \r\n                    // Convert formula to javascript\r\n                    try {\r\n                        evalstring += \"function COLUMN() { return parseInt(x) + 1; }; function ROW() { return parseInt(y) + 1; }; function CELL() { return parentId; }; function TABLE() { return obj; }; function VALUE(col, row) { return obj.records[row-1][col-1].innerHTML; }; function THISROWCELL(col) { var id = jexcel.getIdFromColumnName(col+(parseInt(y)+1), true); return obj.records[id[1]][id[0]].innerHTML; }\";\r\n    \r\n                        var res = eval(evalstring + expression.substr(1));\r\n                    } catch (e) {\r\n                        var res = '#ERROR';\r\n                    }\r\n    \r\n                    return res;\r\n                }\r\n            }\r\n    \r\n            return execute(expression, x, y);\r\n        }\r\n    \r\n        /**\r\n         * Trying to extract a number from a string\r\n         */\r\n        obj.parseNumber = function(value, columnNumber) {\r\n            // Decimal point\r\n            var decimal = columnNumber && obj.options.columns[columnNumber].decimal ? obj.options.columns[columnNumber].decimal : '.';\r\n    \r\n            // Parse both parts of the number\r\n            var number = ('' + value);\r\n            number = number.split(decimal);\r\n            number[0] = number[0].match(/[+-]?[0-9]/g);\r\n            if (number[0]) {\r\n                number[0] = number[0].join('');\r\n            }\r\n            if (number[1]) {\r\n                number[1] = number[1].match(/[0-9]*/g).join('');\r\n            }\r\n    \r\n            // Is a valid number\r\n            if (number[0] && Number(number[0]) >= 0) {\r\n                if (! number[1]) {\r\n                    var value = Number(number[0] + '.00');\r\n                } else {\r\n                    var value = Number(number[0] + '.' + number[1]);\r\n                }\r\n            } else {\r\n                var value = null;\r\n            }\r\n    \r\n            return value;\r\n        }\r\n    \r\n        /**\r\n         * Get row number\r\n         */\r\n        obj.row = function(cell) {\r\n        }\r\n    \r\n        /**\r\n         * Get col number\r\n         */\r\n        obj.col = function(cell) {\r\n        }\r\n    \r\n        obj.up = function(shiftKey, ctrlKey) {\r\n            if (shiftKey) {\r\n                if (obj.selectedCell[3] > 0) {\r\n                    obj.up.visible(1, ctrlKey ? 0 : 1)\r\n                }\r\n            } else {\r\n                if (obj.selectedCell[1] > 0) {\r\n                    obj.up.visible(0, ctrlKey ? 0 : 1)\r\n                }\r\n                obj.selectedCell[2] = obj.selectedCell[0];\r\n                obj.selectedCell[3] = obj.selectedCell[1];\r\n            }\r\n    \r\n            // Update selection\r\n            obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);\r\n    \r\n            // Change page\r\n            if (obj.options.lazyLoading == true) {\r\n                if (obj.selectedCell[1] == 0 || obj.selectedCell[3] == 0) {\r\n                    obj.loadPage(0);\r\n                    obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);\r\n                } else {\r\n                    if (obj.loadValidation()) {\r\n                        obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);\r\n                    } else {\r\n                        var item = parseInt(obj.tbody.firstChild.getAttribute('data-y'));\r\n                        if (obj.selectedCell[1] - item < 30) {\r\n                            obj.loadUp();\r\n                            obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);\r\n                        }\r\n                    }\r\n                }\r\n            } else if (obj.options.pagination > 0) {\r\n                var pageNumber = obj.whichPage(obj.selectedCell[3]);\r\n                if (pageNumber != obj.pageNumber) {\r\n                    obj.page(pageNumber);\r\n                }\r\n            }\r\n    \r\n            obj.updateScroll(1);\r\n        }\r\n    \r\n        obj.up.visible = function(group, direction) {\r\n            if (group == 0) {\r\n                var x = parseInt(obj.selectedCell[0]);\r\n                var y = parseInt(obj.selectedCell[1]);\r\n            } else {\r\n                var x = parseInt(obj.selectedCell[2]);\r\n                var y = parseInt(obj.selectedCell[3]);\r\n            }\r\n    \r\n            if (direction == 0) {\r\n                for (var j = 0; j < y; j++) {\r\n                    if (obj.records[j][x].style.display != 'none' && obj.rows[j].style.display != 'none') {\r\n                        y = j;\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                y = obj.up.get(x, y);\r\n            }\r\n    \r\n            if (group == 0) {\r\n                obj.selectedCell[0] = x;\r\n                obj.selectedCell[1] = y;\r\n            } else {\r\n                obj.selectedCell[2] = x;\r\n                obj.selectedCell[3] = y;\r\n            }\r\n        }\r\n    \r\n        obj.up.get = function(x, y) {\r\n            var x = parseInt(x);\r\n            var y = parseInt(y);\r\n            for (var j = (y - 1); j >= 0; j--) {\r\n                if (obj.records[j][x].style.display != 'none' && obj.rows[j].style.display != 'none') {\r\n                    if (obj.records[j][x].getAttribute('data-merged')) {\r\n                        if (obj.records[j][x] == obj.records[y][x]) {\r\n                            continue;\r\n                        }\r\n                    }\r\n                    y = j;\r\n                    break;\r\n                }\r\n            }\r\n    \r\n            return y;\r\n        }\r\n    \r\n        obj.down = function(shiftKey, ctrlKey) {\r\n            if (shiftKey) {\r\n                if (obj.selectedCell[3] < obj.records.length - 1) {\r\n                    obj.down.visible(1, ctrlKey ? 0 : 1)\r\n                }\r\n            } else {\r\n                if (obj.selectedCell[1] < obj.records.length - 1) {\r\n                    obj.down.visible(0, ctrlKey ? 0 : 1)\r\n                }\r\n                obj.selectedCell[2] = obj.selectedCell[0];\r\n                obj.selectedCell[3] = obj.selectedCell[1];\r\n            }\r\n    \r\n            obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);\r\n    \r\n            // Change page\r\n            if (obj.options.lazyLoading == true) {\r\n                if ((obj.selectedCell[1] == obj.records.length - 1 || obj.selectedCell[3] == obj.records.length - 1)) {\r\n                    obj.loadPage(-1);\r\n                    obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);\r\n                } else {\r\n                    if (obj.loadValidation()) {\r\n                        obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);\r\n                    } else {\r\n                        var item = parseInt(obj.tbody.lastChild.getAttribute('data-y'));\r\n                        if (item - obj.selectedCell[3] < 30) {\r\n                            obj.loadDown();\r\n                            obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);\r\n                        }\r\n                    }\r\n                }\r\n            } else if (obj.options.pagination > 0) {\r\n                var pageNumber = obj.whichPage(obj.selectedCell[3]);\r\n                if (pageNumber != obj.pageNumber) {\r\n                    obj.page(pageNumber);\r\n                }\r\n            }\r\n    \r\n            obj.updateScroll(3);\r\n        }\r\n    \r\n        obj.down.visible = function(group, direction) {\r\n            if (group == 0) {\r\n                var x = parseInt(obj.selectedCell[0]);\r\n                var y = parseInt(obj.selectedCell[1]);\r\n            } else {\r\n                var x = parseInt(obj.selectedCell[2]);\r\n                var y = parseInt(obj.selectedCell[3]);\r\n            }\r\n    \r\n            if (direction == 0) {\r\n                for (var j = obj.rows.length - 1; j > y; j--) {\r\n                    if (obj.records[j][x].style.display != 'none' && obj.rows[j].style.display != 'none') {\r\n                        y = j;\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                y = obj.down.get(x, y);\r\n            }\r\n    \r\n            if (group == 0) {\r\n                obj.selectedCell[0] = x;\r\n                obj.selectedCell[1] = y;\r\n            } else {\r\n                obj.selectedCell[2] = x;\r\n                obj.selectedCell[3] = y;\r\n            }\r\n        }\r\n    \r\n        obj.down.get = function(x, y) {\r\n            var x = parseInt(x);\r\n            var y = parseInt(y);\r\n            for (var j = (y + 1); j < obj.rows.length; j++) {\r\n                if (obj.records[j][x].style.display != 'none' && obj.rows[j].style.display != 'none') {\r\n                    if (obj.records[j][x].getAttribute('data-merged')) {\r\n                        if (obj.records[j][x] == obj.records[y][x]) {\r\n                            continue;\r\n                        }\r\n                    }\r\n                    y = j;\r\n                    break;\r\n                }\r\n            }\r\n    \r\n            return y;\r\n        }\r\n    \r\n        obj.right = function(shiftKey, ctrlKey) {\r\n            if (shiftKey) {\r\n                if (obj.selectedCell[2] < obj.headers.length - 1) {\r\n                    obj.right.visible(1, ctrlKey ? 0 : 1)\r\n                }\r\n            } else {\r\n                if (obj.selectedCell[0] < obj.headers.length - 1) {\r\n                    obj.right.visible(0, ctrlKey ? 0 : 1)\r\n                }\r\n                obj.selectedCell[2] = obj.selectedCell[0];\r\n                obj.selectedCell[3] = obj.selectedCell[1];\r\n            }\r\n    \r\n            obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);\r\n            obj.updateScroll(2);\r\n        }\r\n    \r\n        obj.right.visible = function(group, direction) {\r\n            if (group == 0) {\r\n                var x = parseInt(obj.selectedCell[0]);\r\n                var y = parseInt(obj.selectedCell[1]);\r\n            } else {\r\n                var x = parseInt(obj.selectedCell[2]);\r\n                var y = parseInt(obj.selectedCell[3]);\r\n            }\r\n    \r\n            if (direction == 0) {\r\n                for (var i = obj.headers.length - 1; i > x; i--) {\r\n                    if (obj.records[y][i].style.display != 'none') {\r\n                        x = i;\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                x = obj.right.get(x, y);\r\n            }\r\n    \r\n            if (group == 0) {\r\n                obj.selectedCell[0] = x;\r\n                obj.selectedCell[1] = y;\r\n            } else {\r\n                obj.selectedCell[2] = x;\r\n                obj.selectedCell[3] = y;\r\n            }\r\n        }\r\n    \r\n        obj.right.get = function(x, y) {\r\n            var x = parseInt(x);\r\n            var y = parseInt(y);\r\n    \r\n            for (var i = (x + 1); i < obj.headers.length; i++) {\r\n                if (obj.records[y][i].style.display != 'none') {\r\n                    if (obj.records[y][i].getAttribute('data-merged')) {\r\n                        if (obj.records[y][i] == obj.records[y][x]) {\r\n                            continue;\r\n                        }\r\n                    }\r\n                    x = i;\r\n                    break;\r\n                }\r\n            }\r\n    \r\n            return x;\r\n        }\r\n    \r\n        obj.left = function(shiftKey, ctrlKey) {\r\n            if (shiftKey) {\r\n                if (obj.selectedCell[2] > 0) {\r\n                    obj.left.visible(1, ctrlKey ? 0 : 1)\r\n                }\r\n            } else {\r\n                if (obj.selectedCell[0] > 0) {\r\n                    obj.left.visible(0, ctrlKey ? 0 : 1)\r\n                }\r\n                obj.selectedCell[2] = obj.selectedCell[0];\r\n                obj.selectedCell[3] = obj.selectedCell[1];\r\n            }\r\n    \r\n            obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);\r\n            obj.updateScroll(0);\r\n        }\r\n    \r\n        obj.left.visible = function(group, direction) {\r\n            if (group == 0) {\r\n                var x = parseInt(obj.selectedCell[0]);\r\n                var y = parseInt(obj.selectedCell[1]);\r\n            } else {\r\n                var x = parseInt(obj.selectedCell[2]);\r\n                var y = parseInt(obj.selectedCell[3]);\r\n            }\r\n    \r\n            if (direction == 0) {\r\n                for (var i = 0; i < x; i++) {\r\n                    if (obj.records[y][i].style.display != 'none') {\r\n                        x = i;\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                x = obj.left.get(x, y);\r\n            }\r\n    \r\n            if (group == 0) {\r\n                obj.selectedCell[0] = x;\r\n                obj.selectedCell[1] = y;\r\n            } else {\r\n                obj.selectedCell[2] = x;\r\n                obj.selectedCell[3] = y;\r\n            }\r\n        }\r\n    \r\n        obj.left.get = function(x, y) {\r\n            var x = parseInt(x);\r\n            var y = parseInt(y);\r\n            for (var i = (x - 1); i >= 0; i--) {\r\n                if (obj.records[y][i].style.display != 'none') {\r\n                    if (obj.records[y][i].getAttribute('data-merged')) {\r\n                        if (obj.records[y][i] == obj.records[y][x]) {\r\n                            continue;\r\n                        }\r\n                    }\r\n                    x = i;\r\n                    break;\r\n                }\r\n            }\r\n    \r\n            return x;\r\n        }\r\n    \r\n        obj.first = function(shiftKey, ctrlKey) {\r\n            if (shiftKey) {\r\n                if (ctrlKey) {\r\n                    obj.selectedCell[3] = 0;\r\n                } else {\r\n                    obj.left.visible(1, 0);\r\n                }\r\n            } else {\r\n                if (ctrlKey) {\r\n                    obj.selectedCell[1] = 0;\r\n                } else {\r\n                    obj.left.visible(0, 0);\r\n                }\r\n                obj.selectedCell[2] = obj.selectedCell[0];\r\n                obj.selectedCell[3] = obj.selectedCell[1];\r\n            }\r\n    \r\n            // Change page\r\n            if (obj.options.lazyLoading == true && (obj.selectedCell[1] == 0 || obj.selectedCell[3] == 0)) {\r\n                obj.loadPage(0);\r\n            } else if (obj.options.pagination > 0) {\r\n                var pageNumber = obj.whichPage(obj.selectedCell[3]);\r\n                if (pageNumber != obj.pageNumber) {\r\n                    obj.page(pageNumber);\r\n                }\r\n            }\r\n    \r\n            obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);\r\n            obj.updateScroll(1);\r\n        }\r\n    \r\n        obj.last = function(shiftKey, ctrlKey) {\r\n            if (shiftKey) {\r\n                if (ctrlKey) {\r\n                    obj.selectedCell[3] = obj.records.length - 1;\r\n                } else {\r\n                    obj.right.visible(1, 0);\r\n                }\r\n            } else {\r\n                if (ctrlKey) {\r\n                    obj.selectedCell[1] = obj.records.length - 1;\r\n                } else {\r\n                    obj.right.visible(0, 0);\r\n                }\r\n                obj.selectedCell[2] = obj.selectedCell[0];\r\n                obj.selectedCell[3] = obj.selectedCell[1];\r\n            }\r\n    \r\n            // Change page\r\n            if (obj.options.lazyLoading == true && (obj.selectedCell[1] == obj.records.length - 1 || obj.selectedCell[3] == obj.records.length - 1)) {\r\n                obj.loadPage(-1);\r\n            } else if (obj.options.pagination > 0) {\r\n                var pageNumber = obj.whichPage(obj.selectedCell[3]);\r\n                if (pageNumber != obj.pageNumber) {\r\n                    obj.page(pageNumber);\r\n                }\r\n            }\r\n    \r\n            obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);\r\n            obj.updateScroll(3);\r\n        }\r\n    \r\n        obj.selectAll = function() {\r\n            if (! obj.selectedCell) {\r\n                obj.selectedCell = [];\r\n            }\r\n    \r\n            obj.selectedCell[0] = 0;\r\n            obj.selectedCell[1] = 0;\r\n            obj.selectedCell[2] = obj.headers.length - 1;\r\n            obj.selectedCell[3] = obj.records.length - 1;\r\n    \r\n            obj.updateSelectionFromCoords(obj.selectedCell[0], obj.selectedCell[1], obj.selectedCell[2], obj.selectedCell[3]);\r\n        }\r\n    \r\n        /**\r\n         * Go to a page in a lazyLoading\r\n         */\r\n        obj.loadPage = function(pageNumber) {\r\n            // Search\r\n            if (obj.options.search == true && obj.results) {\r\n                var results = obj.results;\r\n            } else {\r\n                var results = obj.rows;\r\n            }\r\n    \r\n            // Per page\r\n            var quantityPerPage = 100;\r\n    \r\n            // pageNumber\r\n            if (pageNumber == null || pageNumber == -1) {\r\n                // Last page\r\n                pageNumber = Math.ceil(results.length / quantityPerPage) - 1; \r\n            }\r\n    \r\n            var startRow = (pageNumber * quantityPerPage);\r\n            var finalRow = (pageNumber * quantityPerPage) + quantityPerPage;\r\n            if (finalRow > results.length) {\r\n                finalRow = results.length;\r\n            }\r\n            startRow = finalRow - 100;\r\n            if (startRow < 0) {\r\n                startRow = 0;\r\n            }\r\n    \r\n            // Appeding items\r\n            for (var j = startRow; j < finalRow; j++) {\r\n                if (obj.options.search == true && obj.results) {\r\n                    obj.tbody.appendChild(obj.rows[results[j]]);\r\n                } else {\r\n                    obj.tbody.appendChild(obj.rows[j]);\r\n                }\r\n    \r\n                if (obj.tbody.children.length > quantityPerPage) {\r\n                    obj.tbody.removeChild(obj.tbody.firstChild);\r\n                }\r\n            }\r\n        }\r\n    \r\n        obj.loadUp = function() {\r\n            // Search\r\n            if (obj.options.search == true && obj.results) {\r\n                var results = obj.results;\r\n            } else {\r\n                var results = obj.rows;\r\n            }\r\n            var test = 0;\r\n            if (results.length > 100) {\r\n                // Get the first element in the page\r\n                var item = parseInt(obj.tbody.firstChild.getAttribute('data-y'));\r\n                if (obj.options.search == true && obj.results) {\r\n                    item = results.indexOf(item);\r\n                }\r\n                if (item > 0) {\r\n                    for (var j = 0; j < 30; j++) {\r\n                        item = item - 1;\r\n                        if (item > -1) {\r\n                            if (obj.options.search == true && obj.results) {\r\n                                obj.tbody.insertBefore(obj.rows[results[item]], obj.tbody.firstChild);\r\n                            } else {\r\n                                obj.tbody.insertBefore(obj.rows[item], obj.tbody.firstChild);\r\n                            }\r\n                            if (obj.tbody.children.length > 100) {\r\n                                obj.tbody.removeChild(obj.tbody.lastChild);\r\n                                test = 1;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return test;\r\n        }\r\n    \r\n        obj.loadDown = function() {\r\n            // Search\r\n            if (obj.options.search == true && obj.results) {\r\n                var results = obj.results;\r\n            } else {\r\n                var results = obj.rows;\r\n            }\r\n            var test = 0;\r\n            if (results.length > 100) {\r\n                // Get the last element in the page\r\n                var item = parseInt(obj.tbody.lastChild.getAttribute('data-y'));\r\n                if (obj.options.search == true && obj.results) {\r\n                    item = results.indexOf(item);\r\n                }\r\n                if (item < obj.rows.length - 1) {\r\n                    for (var j = 0; j <= 30; j++) {\r\n                        if (item < results.length) {\r\n                            if (obj.options.search == true && obj.results) {\r\n                                obj.tbody.appendChild(obj.rows[results[item]]);\r\n                            } else {\r\n                                obj.tbody.appendChild(obj.rows[item]);\r\n                            }\r\n                            if (obj.tbody.children.length > 100) {\r\n                                obj.tbody.removeChild(obj.tbody.firstChild);\r\n                                test = 1;\r\n                            }\r\n                        }\r\n                        item = item + 1;\r\n                    }\r\n                }\r\n            }\r\n    \r\n            return test;\r\n        }\r\n    \r\n        obj.loadValidation = function() {\r\n            if (obj.selectedCell) {\r\n                var currentPage = parseInt(obj.tbody.firstChild.getAttribute('data-y')) / 100;\r\n                var selectedPage = parseInt(obj.selectedCell[3] / 100);\r\n                var totalPages = parseInt(obj.rows.length / 100);\r\n    \r\n                if (currentPage != selectedPage && selectedPage <= totalPages) {\r\n                    if (! Array.prototype.indexOf.call(obj.tbody.children, obj.rows[obj.selectedCell[3]])) {\r\n                        obj.loadPage(selectedPage);\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n    \r\n            return false;\r\n        }\r\n    \r\n        /**\r\n         * Reset search\r\n         */\r\n        obj.resetSearch = function() {\r\n            obj.searchInput.value = '';\r\n            obj.search('');\r\n            obj.results = null;\r\n        }\r\n\r\n        /**\r\n         * Search\r\n         */\r\n        obj.search = function(query) {\r\n            // Query\r\n            if (query) {\r\n                var query = query.toLowerCase();\r\n            }\r\n    \r\n            // Reset any filter\r\n            if (obj.options.filters) {\r\n                obj.resetFilters();\r\n            }\r\n\r\n            // Reset selection\r\n            obj.resetSelection();\r\n    \r\n            // Total of results\r\n            obj.pageNumber = 0;\r\n            obj.results = [];\r\n    \r\n            if (query) {\r\n                // Search filter\r\n                var search = function(item, query, index) {\r\n                    for (var i = 0; i < item.length; i++) {\r\n                        if ((''+item[i]).toLowerCase().search(query) >= 0 ||\r\n                            (''+obj.records[index][i].innerHTML).toLowerCase().search(query) >= 0) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                }\r\n    \r\n                // Result\r\n                var addToResult = function(k) {\r\n                    if (obj.results.indexOf(k) == -1) {\r\n                        obj.results.push(k);\r\n                    }\r\n                }\r\n    \r\n                // Filter\r\n                var data = obj.options.data.filter(function(v, k) {\r\n                    if (search(v, query, k)) {\r\n                        // Merged rows found\r\n                        var rows = obj.isRowMerged(k);\r\n                        if (rows.length) {\r\n                            for (var i = 0; i < rows.length; i++) {\r\n                                var row = jexcel.getIdFromColumnName(rows[i], true);\r\n                                for (var j = 0; j < obj.options.mergeCells[rows[i]][1]; j++) {\r\n                                    addToResult(row[1]+j);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            // Normal row found\r\n                            addToResult(k);\r\n                        }\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                });\r\n            } else {\r\n                obj.results = null;\r\n            }\r\n\r\n            return obj.updateResult();\r\n        }\r\n    \r\n        obj.updateResult = function() {\r\n            var total = 0;\r\n            var index = 0;\r\n    \r\n            // Page 1\r\n            if (obj.options.lazyLoading == true) {\r\n                total = 100;\r\n            } else if (obj.options.pagination > 0) {\r\n                total = obj.options.pagination;\r\n            } else {\r\n                if (obj.results) {\r\n                    total = obj.results.length;\r\n                } else {\r\n                    total = obj.rows.length;\r\n                }\r\n            }\r\n    \r\n            // Reset current nodes\r\n            while (obj.tbody.firstChild) {\r\n                obj.tbody.removeChild(obj.tbody.firstChild);\r\n            }\r\n    \r\n            // Hide all records from the table\r\n            for (var j = 0; j < obj.rows.length; j++) {\r\n                if (! obj.results || obj.results.indexOf(j) > -1) {\r\n                    if (index < total) {\r\n                        obj.tbody.appendChild(obj.rows[j]);\r\n                        index++;\r\n                    }\r\n                    obj.rows[j].style.display = '';\r\n                } else {\r\n                    obj.rows[j].style.display = 'none';\r\n                }\r\n            }\r\n    \r\n            // Update pagination\r\n            if (obj.options.pagination > 0) {\r\n                obj.updatePagination();\r\n            }\r\n\r\n            obj.updateCornerPosition();\r\n    \r\n            return total;\r\n        }\r\n\r\n        /**\r\n         * Which page the cell is\r\n         */\r\n        obj.whichPage = function(cell) {\r\n            // Search\r\n            if (obj.options.search == true && obj.results) {\r\n                cell = obj.results.indexOf(cell);\r\n            }\r\n    \r\n            return (Math.ceil((parseInt(cell) + 1) / parseInt(obj.options.pagination))) - 1;\r\n        }\r\n    \r\n        /**\r\n         * Go to page\r\n         */\r\n        obj.page = function(pageNumber) {\r\n            var oldPage = obj.pageNumber;\r\n\r\n            // Search\r\n            if (obj.options.search == true && obj.results) {\r\n                var results = obj.results;\r\n            } else {\r\n                var results = obj.rows;\r\n            }\r\n    \r\n            // Per page\r\n            var quantityPerPage = parseInt(obj.options.pagination);\r\n    \r\n            // pageNumber\r\n            if (pageNumber == null || pageNumber == -1) {\r\n                // Last page\r\n                pageNumber = Math.ceil(results.length / quantityPerPage) - 1;\r\n            }\r\n    \r\n            // Page number\r\n            obj.pageNumber = pageNumber;\r\n    \r\n            var startRow = (pageNumber * quantityPerPage);\r\n            var finalRow = (pageNumber * quantityPerPage) + quantityPerPage;\r\n            if (finalRow > results.length) {\r\n                finalRow = results.length;\r\n            }\r\n            if (startRow < 0) {\r\n                startRow = 0;\r\n            }\r\n    \r\n            // Reset container\r\n            while (obj.tbody.firstChild) {\r\n                obj.tbody.removeChild(obj.tbody.firstChild);\r\n            }\r\n    \r\n            // Appeding items\r\n            for (var j = startRow; j < finalRow; j++) {\r\n                if (obj.options.search == true && obj.results) {\r\n                    obj.tbody.appendChild(obj.rows[results[j]]);\r\n                } else {\r\n                    obj.tbody.appendChild(obj.rows[j]);\r\n                }\r\n            }\r\n    \r\n            if (obj.options.pagination > 0) {\r\n                obj.updatePagination();\r\n            }\r\n    \r\n            // Update corner position\r\n            obj.updateCornerPosition();\r\n\r\n            // Events\r\n            obj.dispatch('onchangepage', el, pageNumber, oldPage);\r\n        }\r\n    \r\n        /**\r\n         * Update the pagination\r\n         */\r\n        obj.updatePagination = function() {\r\n            // Reset container\r\n            obj.pagination.children[0].innerHTML = '';\r\n            obj.pagination.children[1].innerHTML = '';\r\n    \r\n            // Start pagination\r\n            if (obj.options.pagination) {\r\n                // Searchable\r\n                if (obj.options.search == true && obj.results) {\r\n                    var results = obj.results.length;\r\n                } else {\r\n                    var results = obj.rows.length;\r\n                }\r\n    \r\n                if (! results) {\r\n                    // No records found\r\n                    obj.pagination.children[0].innerHTML = obj.options.text.noRecordsFound;\r\n                } else {\r\n                    // Pagination container\r\n                    var quantyOfPages = Math.ceil(results / obj.options.pagination);\r\n    \r\n                    if (obj.pageNumber < 6) {\r\n                        var startNumber = 1;\r\n                        var finalNumber = quantyOfPages < 10 ? quantyOfPages : 10;\r\n                    } else if (quantyOfPages - obj.pageNumber < 5) {\r\n                        var startNumber = quantyOfPages - 9;\r\n                        var finalNumber = quantyOfPages;\r\n                        if (startNumber < 1) {\r\n                            startNumber = 1;\r\n                        }\r\n                    } else {\r\n                        var startNumber = obj.pageNumber - 4;\r\n                        var finalNumber = obj.pageNumber + 5;\r\n                    }\r\n    \r\n                    // First\r\n                    if (startNumber > 1) {\r\n                        var paginationItem = document.createElement('div');\r\n                        paginationItem.className = 'jexcel_page';\r\n                        paginationItem.innerHTML = '<';\r\n                        paginationItem.title = 1;\r\n                        obj.pagination.children[1].appendChild(paginationItem);\r\n                    }\r\n    \r\n                    // Get page links\r\n                    for (var i = startNumber; i <= finalNumber; i++) {\r\n                        var paginationItem = document.createElement('div');\r\n                        paginationItem.className = 'jexcel_page';\r\n                        paginationItem.innerHTML = i;\r\n                        obj.pagination.children[1].appendChild(paginationItem);\r\n    \r\n                        if (obj.pageNumber == (i-1)) {\r\n                            paginationItem.classList.add('jexcel_page_selected');\r\n                        }\r\n                    }\r\n    \r\n                    // Last\r\n                    if (finalNumber < quantyOfPages) {\r\n                        var paginationItem = document.createElement('div');\r\n                        paginationItem.className = 'jexcel_page';\r\n                        paginationItem.innerHTML = '>';\r\n                        paginationItem.title = quantyOfPages;\r\n                        obj.pagination.children[1].appendChild(paginationItem);\r\n                    }\r\n    \r\n                    // Text\r\n                    var format = function(format) {\r\n                        var args = Array.prototype.slice.call(arguments, 1);\r\n                        return format.replace(/{(\\d+)}/g, function(match, number) {\r\n                          return typeof args[number] != 'undefined'\r\n                            ? args[number]\r\n                            : match\r\n                          ;\r\n                        });\r\n                    };\r\n    \r\n                    obj.pagination.children[0].innerHTML = format(obj.options.text.showingPage, obj.pageNumber + 1, quantyOfPages)\r\n                }\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Download CSV table\r\n         * \r\n         * @return null\r\n         */\r\n        obj.download = function(includeHeaders) {\r\n            if (obj.options.allowExport == false) {\r\n                console.error('Export not allowed');\r\n            } else {\r\n                // Data\r\n                var data = '';\r\n                if (includeHeaders == true || obj.options.includeHeadersOnDownload == true) {\r\n                    data += obj.getHeaders().replace(/\\s+/gm,' ');\r\n                    data += \"\\r\\n\";\r\n                }\r\n\r\n                // Get data\r\n                data += obj.copy(false, obj.options.csvDelimiter, true);\r\n\r\n                // Download element\r\n                var blob = new Blob([\"\\uFEFF\"+data], {type: 'text/csv;charset=utf-8;'});\r\n\r\n                // IE Compatibility\r\n                if (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n                    window.navigator.msSaveOrOpenBlob(blob, obj.options.csvFileName + '.csv');\r\n                } else {\r\n                    // Download element\r\n                    var pom = document.createElement('a');\r\n                    var url = URL.createObjectURL(blob);\r\n                    pom.href = url;\r\n                    pom.setAttribute('download', obj.options.csvFileName + '.csv');\r\n                    document.body.appendChild(pom);\r\n                    pom.click();\r\n                    pom.parentNode.removeChild(pom);\r\n                }\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Initializes a new history record for undo/redo\r\n         * \r\n         * @return null\r\n         */\r\n        obj.setHistory = function(changes) {\r\n            if (obj.ignoreHistory != true) {\r\n                // Increment and get the current history index\r\n                var index = ++obj.historyIndex;\r\n    \r\n                // Slice the array to discard undone changes\r\n                obj.history = (obj.history = obj.history.slice(0, index + 1));\r\n    \r\n                // Keep history\r\n                obj.history[index] = changes;\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Copy method\r\n         * \r\n         * @param bool highlighted - Get only highlighted cells\r\n         * @param delimiter - \\t default to keep compatibility with excel\r\n         * @return string value\r\n         */\r\n        obj.copy = function(highlighted, delimiter, returnData) {\r\n            if (! delimiter) {\r\n                delimiter = \"\\t\";\r\n            }\r\n    \r\n            // Controls\r\n            var header = [];\r\n            var col = [];\r\n            var colLabel = [];\r\n            var row = [];\r\n            var rowLabel = [];\r\n            var x = obj.options.data[0].length\r\n            var y = obj.options.data.length\r\n            var tmp = '';\r\n            var copyHeader = obj.options.includeHeadersOnCopy;\r\n\r\n            // Reset container\r\n            obj.style = [];\r\n    \r\n            // Go through the columns to get the data\r\n            for (var j = 0; j < y; j++) {\r\n                col = [];\r\n                colLabel = [];\r\n    \r\n                for (var i = 0; i < x; i++) {\r\n                    // If cell is highlighted\r\n                    if (! highlighted || obj.records[j][i].classList.contains('highlight')) {\r\n                        if (copyHeader == true) {\r\n                            header.push(obj.headers[i].innerText);\r\n                        }\r\n                        // Values\r\n                        var value = obj.options.data[j][i];\r\n                        if (value.match && (value.match(/,/g) || value.match(/\\n/) || value.match(/\\\"/))) {\r\n                            value = value.replace(new RegExp('\"', 'g'), '\"\"');\r\n                            value = '\"' + value + '\"';\r\n                        }\r\n                        col.push(value);\r\n    \r\n                        // Labels\r\n                        if (obj.options.columns[i].type == 'checkbox' || obj.options.columns[i].type == 'radio') {\r\n                            var label = value;\r\n                        } else {\r\n                            if (obj.options.stripHTMLOnCopy == true) {\r\n                                var label = obj.records[j][i].innerText;\r\n                            } else {\r\n                                var label = obj.records[j][i].innerHTML;\r\n                            }\r\n                            if (label.match && (label.match(/,/g) || label.match(/\\n/) || label.match(/\\\"/))) {\r\n                                // Scape double quotes\r\n                                label = label.replace(new RegExp('\"', 'g'), '\"\"');\r\n                                label = '\"' + label + '\"';\r\n                            }\r\n                        }\r\n                        colLabel.push(label);\r\n    \r\n                        // Get style\r\n                        tmp = obj.records[j][i].getAttribute('style');\r\n                        tmp = tmp.replace('display: none;', '');\r\n                        obj.style.push(tmp ? tmp : '');\r\n                    }\r\n                }\r\n    \r\n                if (col.length) {\r\n                    if (copyHeader) {\r\n                        row.push(header.join(delimiter));\r\n                    }\r\n                    row.push(col.join(delimiter));\r\n                }\r\n                if (colLabel.length) {\r\n                    if (copyHeader) {\r\n                        rowLabel.push(header.join(delimiter));\r\n                    }\r\n                    rowLabel.push(colLabel.join(delimiter));\r\n                }\r\n                copyHeader = false;\r\n            }\r\n\r\n            // Final string\r\n            var str = row.join(\"\\r\\n\");\r\n            var strLabel = rowLabel.join(\"\\r\\n\");\r\n\r\n            // Create a hidden textarea to copy the values\r\n            if (! returnData) {\r\n                if (obj.options.copyCompatibility == true) {\r\n                    obj.textarea.value = strLabel;\r\n                } else {\r\n                    obj.textarea.value = str;\r\n                }\r\n                obj.textarea.select();\r\n                document.execCommand(\"copy\");\r\n            }\r\n    \r\n            // Keep data\r\n            if (obj.options.copyCompatibility == true) {\r\n                obj.data = strLabel;\r\n            } else {\r\n                obj.data = str;\r\n            }\r\n            // Keep non visible information\r\n            obj.hashString = obj.hash(obj.data);\r\n    \r\n            // Any exiting border should go\r\n            obj.removeCopyingSelection();\r\n\r\n            // Border\r\n            if (obj.highlighted) {\r\n                for (var i = 0; i < obj.highlighted.length; i++) {\r\n                    obj.highlighted[i].classList.add('copying');\r\n                    if (obj.highlighted[i].classList.contains('highlight-left')) {\r\n                        obj.highlighted[i].classList.add('copying-left');\r\n                    }\r\n                    if (obj.highlighted[i].classList.contains('highlight-right')) {\r\n                        obj.highlighted[i].classList.add('copying-right');\r\n                    }\r\n                    if (obj.highlighted[i].classList.contains('highlight-top')) {\r\n                        obj.highlighted[i].classList.add('copying-top');\r\n                    }\r\n                    if (obj.highlighted[i].classList.contains('highlight-bottom')) {\r\n                        obj.highlighted[i].classList.add('copying-bottom');\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Paste event\r\n            obj.dispatch('oncopy', el, obj.options.copyCompatibility == true ? rowLabel : row, obj.hashString);\r\n\r\n            return obj.data;\r\n        }\r\n    \r\n        /**\r\n         * jExcel paste method\r\n         * \r\n         * @param integer row number\r\n         * @return string value\r\n         */\r\n        obj.paste = function(x, y, data) {\r\n            // Paste filter\r\n            var ret = obj.dispatch('onbeforepaste', el, data, x, y);\r\n\r\n            if (ret === false) {\r\n                return false;\r\n            } else if (ret) {\r\n                var data = ret;\r\n            }\r\n    \r\n            // Controls\r\n            var hash = obj.hash(data);\r\n            var style = (hash == obj.hashString) ? obj.style : null;\r\n    \r\n            // Depending on the behavior\r\n            if (obj.options.copyCompatibility == true && hash == obj.hashString) {\r\n                var data = obj.data;\r\n            }\r\n    \r\n            // Split new line\r\n            var data = obj.parseCSV(data, \"\\t\");\r\n    \r\n            if (x != null && y != null && data) {\r\n                // Records\r\n                var i = 0;\r\n                var j = 0;\r\n                var records = [];\r\n                var newStyle = {};\r\n                var oldStyle = {};\r\n                var styleIndex = 0;\r\n    \r\n                // Index\r\n                var colIndex = parseInt(x);\r\n                var rowIndex = parseInt(y);\r\n                var row = null;\r\n    \r\n                // Go through the columns to get the data\r\n                while (row = data[j]) {\r\n                    i = 0;\r\n                    colIndex = parseInt(x);\r\n    \r\n                    while (row[i] != null) {\r\n                        // Update and keep history\r\n                        var record = obj.updateCell(colIndex, rowIndex, row[i]);\r\n                        // Keep history\r\n                        records.push(record);\r\n                        // Update all formulas in the chain\r\n                        obj.updateFormulaChain(colIndex, rowIndex, records);\r\n                        // Style\r\n                        if (style && style[styleIndex]) {\r\n                            var columnName = jexcel.getColumnNameFromId([colIndex, rowIndex]);\r\n                            newStyle[columnName] = style[styleIndex];\r\n                            oldStyle[columnName] = obj.getStyle(columnName);\r\n                            obj.records[rowIndex][colIndex].setAttribute('style', style[styleIndex]);\r\n                            styleIndex++\r\n                        }\r\n                        i++;\r\n                        if (row[i] != null) {\r\n                            if (colIndex >= obj.headers.length - 1) {\r\n                                obj.insertColumn();\r\n                            }\r\n                            colIndex = obj.right.get(colIndex, rowIndex);\r\n                        }\r\n                    }\r\n    \r\n                    j++;\r\n                    if (data[j]) {\r\n                        if (rowIndex >= obj.rows.length-1) {\r\n                            obj.insertRow();\r\n                        }\r\n                        rowIndex = obj.down.get(x, rowIndex);\r\n                    }\r\n                }\r\n    \r\n                // Select the new cells\r\n                obj.updateSelectionFromCoords(x, y, colIndex, rowIndex);\r\n    \r\n                // Update history\r\n                obj.setHistory({\r\n                    action:'setValue',\r\n                    records:records,\r\n                    selection:obj.selectedCell,\r\n                    newStyle:newStyle,\r\n                    oldStyle:oldStyle,\r\n                });\r\n    \r\n                // Update table\r\n                obj.updateTable();\r\n    \r\n                // Paste event\r\n                obj.dispatch('onpaste', el, data);\r\n    \r\n                // On after changes\r\n                obj.onafterchanges(el, records);\r\n            }\r\n\r\n            obj.removeCopyingSelection();\r\n        }\r\n\r\n        /**\r\n         * Remove copying border\r\n         */\r\n        obj.removeCopyingSelection = function() {\r\n            var copying = document.querySelectorAll('.jexcel .copying');\r\n            for (var i = 0; i < copying.length; i++) {\r\n                copying[i].classList.remove('copying');\r\n                copying[i].classList.remove('copying-left');\r\n                copying[i].classList.remove('copying-right');\r\n                copying[i].classList.remove('copying-top');\r\n                copying[i].classList.remove('copying-bottom');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Process row\r\n         */\r\n        obj.historyProcessRow = function(type, historyRecord) {\r\n            var rowIndex = (! historyRecord.insertBefore) ? historyRecord.rowNumber + 1 : historyRecord.rowNumber;\r\n    \r\n            if (obj.options.search == true) {\r\n                if (obj.results && obj.results.length != obj.rows.length) {\r\n                    obj.resetSearch();\r\n                }\r\n            }\r\n    \r\n            // Remove row\r\n            if (type == 1) {\r\n                var numOfRows = historyRecord.numOfRows;\r\n                // Remove nodes\r\n                for (var j = rowIndex; j < (numOfRows + rowIndex); j++) {\r\n                    obj.rows[j].parentNode.removeChild(obj.rows[j]);\r\n                }\r\n                // Remove references\r\n                obj.records.splice(rowIndex, numOfRows);\r\n                obj.options.data.splice(rowIndex, numOfRows);\r\n                obj.rows.splice(rowIndex, numOfRows);\r\n    \r\n                obj.conditionalSelectionUpdate(1, rowIndex, (numOfRows + rowIndex) - 1);\r\n            } else {\r\n                // Insert data\r\n                obj.records = jexcel.injectArray(obj.records, rowIndex, historyRecord.rowRecords);\r\n                obj.options.data = jexcel.injectArray(obj.options.data, rowIndex, historyRecord.rowData);\r\n                obj.rows = jexcel.injectArray(obj.rows, rowIndex, historyRecord.rowNode);\r\n                // Insert nodes\r\n                var index = 0\r\n                for (var j = rowIndex; j < (historyRecord.numOfRows + rowIndex); j++) {\r\n                    obj.tbody.insertBefore(historyRecord.rowNode[index], obj.tbody.children[j]);\r\n                    index++;\r\n                }\r\n            }\r\n    \r\n            // Respect pagination\r\n            if (obj.options.pagination > 0) {\r\n                obj.page(obj.pageNumber);\r\n            }\r\n    \r\n            obj.updateTableReferences();\r\n        }\r\n    \r\n        /**\r\n         * Process column\r\n         */\r\n        obj.historyProcessColumn = function(type, historyRecord) {\r\n            var columnIndex = (! historyRecord.insertBefore) ? historyRecord.columnNumber + 1 : historyRecord.columnNumber;\r\n    \r\n            // Remove column\r\n            if (type == 1) {\r\n                var numOfColumns = historyRecord.numOfColumns;\r\n    \r\n                obj.options.columns.splice(columnIndex, numOfColumns);\r\n                for (var i = columnIndex; i < (numOfColumns + columnIndex); i++) {\r\n                    obj.headers[i].parentNode.removeChild(obj.headers[i]);\r\n                    obj.colgroup[i].parentNode.removeChild(obj.colgroup[i]);\r\n                }\r\n                obj.headers.splice(columnIndex, numOfColumns);\r\n                obj.colgroup.splice(columnIndex, numOfColumns);\r\n                for (var j = 0; j < historyRecord.data.length; j++) {\r\n                    for (var i = columnIndex; i < (numOfColumns + columnIndex); i++) {\r\n                        obj.records[j][i].parentNode.removeChild(obj.records[j][i]);\r\n                    }\r\n                    obj.records[j].splice(columnIndex, numOfColumns);\r\n                    obj.options.data[j].splice(columnIndex, numOfColumns);\r\n                }\r\n                // Process footers\r\n                if (obj.options.footers) {\r\n                    for (var j = 0; j < obj.options.footers.length; j++) {\r\n                        obj.options.footers[j].splice(columnIndex, numOfColumns);\r\n                    }\r\n                }\r\n            } else {\r\n                // Insert data\r\n                obj.options.columns = jexcel.injectArray(obj.options.columns, columnIndex, historyRecord.columns);\r\n                obj.headers = jexcel.injectArray(obj.headers, columnIndex, historyRecord.headers);\r\n                obj.colgroup = jexcel.injectArray(obj.colgroup, columnIndex, historyRecord.colgroup);\r\n    \r\n                var index = 0\r\n                for (var i = columnIndex; i < (historyRecord.numOfColumns + columnIndex); i++) {\r\n                    obj.headerContainer.insertBefore(historyRecord.headers[index], obj.headerContainer.children[i+1]);\r\n                    obj.colgroupContainer.insertBefore(historyRecord.colgroup[index], obj.colgroupContainer.children[i+1]);\r\n                    index++;\r\n                }\r\n    \r\n                for (var j = 0; j < historyRecord.data.length; j++) {\r\n                    obj.options.data[j] = jexcel.injectArray(obj.options.data[j], columnIndex, historyRecord.data[j]);\r\n                    obj.records[j] = jexcel.injectArray(obj.records[j], columnIndex, historyRecord.records[j]);\r\n                    var index = 0\r\n                    for (var i = columnIndex; i < (historyRecord.numOfColumns + columnIndex); i++) {\r\n                        obj.rows[j].insertBefore(historyRecord.records[j][index], obj.rows[j].children[i+1]);\r\n                        index++;\r\n                    }\r\n                }\r\n                // Process footers\r\n                if (obj.options.footers) {\r\n                    for (var j = 0; j < obj.options.footers.length; j++) {\r\n                        obj.options.footers[j] = jexcel.injectArray(obj.options.footers[j], columnIndex, historyRecord.footers[j]);\r\n                    }\r\n                }\r\n            }\r\n    \r\n            // Adjust nested headers\r\n            if (obj.options.nestedHeaders && obj.options.nestedHeaders.length > 0) {\r\n                // Flexible way to handle nestedheaders\r\n                if (obj.options.nestedHeaders[0] && obj.options.nestedHeaders[0][0]) {\r\n                    for (var j = 0; j < obj.options.nestedHeaders.length; j++) {\r\n                        if (type == 1) {\r\n                            var colspan = parseInt(obj.options.nestedHeaders[j][obj.options.nestedHeaders[j].length-1].colspan) - historyRecord.numOfColumns;\r\n                        } else {\r\n                            var colspan = parseInt(obj.options.nestedHeaders[j][obj.options.nestedHeaders[j].length-1].colspan) + historyRecord.numOfColumns;\r\n                        }\r\n                        obj.options.nestedHeaders[j][obj.options.nestedHeaders[j].length-1].colspan = colspan;\r\n                        obj.thead.children[j].children[obj.thead.children[j].children.length-1].setAttribute('colspan', colspan);\r\n                    }\r\n                } else {\r\n                    if (type == 1) {\r\n                        var colspan = parseInt(obj.options.nestedHeaders[0].colspan) - historyRecord.numOfColumns;\r\n                    } else {\r\n                        var colspan = parseInt(obj.options.nestedHeaders[0].colspan) + historyRecord.numOfColumns;\r\n                    }\r\n                    obj.options.nestedHeaders[0].colspan = colspan;\r\n                    obj.thead.children[0].children[obj.thead.children[0].children.length-1].setAttribute('colspan', colspan);\r\n                }\r\n            }\r\n    \r\n            obj.updateTableReferences();\r\n        }\r\n    \r\n        /**\r\n         * Undo last action\r\n         */\r\n        obj.undo = function() {\r\n            // Ignore events and history\r\n            var ignoreEvents = obj.ignoreEvents ? true : false;\r\n            var ignoreHistory = obj.ignoreHistory ? true : false;\r\n    \r\n            obj.ignoreEvents = true;\r\n            obj.ignoreHistory = true;\r\n    \r\n            // Records\r\n            var records = [];\r\n    \r\n            // Update cells\r\n            if (obj.historyIndex >= 0) {\r\n                // History\r\n                var historyRecord = obj.history[obj.historyIndex--];\r\n    \r\n                if (historyRecord.action == 'insertRow') {\r\n                    obj.historyProcessRow(1, historyRecord);\r\n                } else if (historyRecord.action == 'deleteRow') {\r\n                    obj.historyProcessRow(0, historyRecord);\r\n                } else if (historyRecord.action == 'insertColumn') {\r\n                    obj.historyProcessColumn(1, historyRecord);\r\n                } else if (historyRecord.action == 'deleteColumn') {\r\n                    obj.historyProcessColumn(0, historyRecord);\r\n                } else if (historyRecord.action == 'moveRow') {\r\n                    obj.moveRow(historyRecord.newValue, historyRecord.oldValue);\r\n                } else if (historyRecord.action == 'moveColumn') {\r\n                    obj.moveColumn(historyRecord.newValue, historyRecord.oldValue);\r\n                } else if (historyRecord.action == 'setMerge') {\r\n                    obj.removeMerge(historyRecord.column, historyRecord.data);\r\n                } else if (historyRecord.action == 'setStyle') {\r\n                    obj.setStyle(historyRecord.oldValue, null, null, 1);\r\n                } else if (historyRecord.action == 'setWidth') {\r\n                    obj.setWidth(historyRecord.column, historyRecord.oldValue);\r\n                } else if (historyRecord.action == 'setHeight') {\r\n                    obj.setHeight(historyRecord.row, historyRecord.oldValue);\r\n                } else if (historyRecord.action == 'setHeader') {\r\n                    obj.setHeader(historyRecord.column, historyRecord.oldValue);\r\n                } else if (historyRecord.action == 'setComments') {\r\n                    obj.setComments(historyRecord.column, historyRecord.oldValue[0], historyRecord.oldValue[1]);\r\n                } else if (historyRecord.action == 'orderBy') {\r\n                    var rows = [];\r\n                    for (var j = 0; j < historyRecord.rows.length; j++) {\r\n                        rows[historyRecord.rows[j]] = j;\r\n                    }\r\n                    obj.updateOrderArrow(historyRecord.column, historyRecord.order ? 0 : 1);\r\n                    obj.updateOrder(rows);\r\n                } else if (historyRecord.action == 'setValue') {\r\n                    // Redo for changes in cells\r\n                    for (var i = 0; i < historyRecord.records.length; i++) {\r\n                        records.push({\r\n                            x: historyRecord.records[i].x,\r\n                            y: historyRecord.records[i].y,\r\n                            newValue: historyRecord.records[i].oldValue,\r\n                        });\r\n\r\n                        if (historyRecord.oldStyle) {\r\n                            obj.resetStyle(historyRecord.oldStyle);\r\n                        }\r\n                    }\r\n                    // Update records\r\n                    obj.setValue(records);\r\n\r\n                    // Update selection\r\n                    if (historyRecord.selection) {\r\n                        obj.updateSelectionFromCoords(historyRecord.selection[0], historyRecord.selection[1], historyRecord.selection[2], historyRecord.selection[3]);\r\n                    }\r\n                }\r\n            }\r\n            obj.ignoreEvents = ignoreEvents;\r\n            obj.ignoreHistory = ignoreHistory;\r\n    \r\n            // Events\r\n            obj.dispatch('onundo', el, historyRecord);\r\n        }\r\n    \r\n        /**\r\n         * Redo previously undone action\r\n         */\r\n        obj.redo = function() {\r\n            // Ignore events and history\r\n            var ignoreEvents = obj.ignoreEvents ? true : false;\r\n            var ignoreHistory = obj.ignoreHistory ? true : false;\r\n    \r\n            obj.ignoreEvents = true;\r\n            obj.ignoreHistory = true;\r\n    \r\n            // Records\r\n            var records = [];\r\n    \r\n            // Update cells\r\n            if (obj.historyIndex < obj.history.length - 1) {\r\n                // History\r\n                var historyRecord = obj.history[++obj.historyIndex];\r\n    \r\n                if (historyRecord.action == 'insertRow') {\r\n                    obj.historyProcessRow(0, historyRecord);\r\n                } else if (historyRecord.action == 'deleteRow') {\r\n                    obj.historyProcessRow(1, historyRecord);\r\n                } else if (historyRecord.action == 'insertColumn') {\r\n                    obj.historyProcessColumn(0, historyRecord);\r\n                } else if (historyRecord.action == 'deleteColumn') {\r\n                    obj.historyProcessColumn(1, historyRecord);\r\n                } else if (historyRecord.action == 'moveRow') {\r\n                    obj.moveRow(historyRecord.oldValue, historyRecord.newValue);\r\n                } else if (historyRecord.action == 'moveColumn') {\r\n                    obj.moveColumn(historyRecord.oldValue, historyRecord.newValue);\r\n                } else if (historyRecord.action == 'setMerge') {\r\n                    obj.setMerge(historyRecord.column, historyRecord.colspan, historyRecord.rowspan, 1);\r\n                } else if (historyRecord.action == 'setStyle') {\r\n                    obj.setStyle(historyRecord.newValue, null, null, 1);\r\n                } else if (historyRecord.action == 'setWidth') {\r\n                    obj.setWidth(historyRecord.column, historyRecord.newValue);\r\n                } else if (historyRecord.action == 'setHeight') {\r\n                    obj.setHeight(historyRecord.row, historyRecord.newValue);\r\n                } else if (historyRecord.action == 'setHeader') {\r\n                    obj.setHeader(historyRecord.column, historyRecord.newValue);\r\n                } else if (historyRecord.action == 'setComments') {\r\n                    obj.setComments(historyRecord.column, historyRecord.newValue[0], historyRecord.newValue[1]);\r\n                } else if (historyRecord.action == 'orderBy') {\r\n                    obj.updateOrderArrow(historyRecord.column, historyRecord.order);\r\n                    obj.updateOrder(historyRecord.rows);\r\n                } else if (historyRecord.action == 'setValue') {\r\n                    obj.setValue(historyRecord.records);\r\n                    // Redo for changes in cells\r\n                    for (var i = 0; i < historyRecord.records.length; i++) {\r\n                        if (historyRecord.oldStyle) {\r\n                            obj.resetStyle(historyRecord.newStyle);\r\n                        }\r\n                    }\r\n                    // Update selection\r\n                    if (historyRecord.selection) {\r\n                        obj.updateSelectionFromCoords(historyRecord.selection[0], historyRecord.selection[1], historyRecord.selection[2], historyRecord.selection[3]);\r\n                    }\r\n                }\r\n            }\r\n            obj.ignoreEvents = ignoreEvents;\r\n            obj.ignoreHistory = ignoreHistory;\r\n    \r\n            // Events\r\n            obj.dispatch('onredo', el, historyRecord);\r\n        }\r\n    \r\n        /**\r\n         * Get dropdown value from key\r\n         */\r\n        obj.getDropDownValue = function(column, key) {\r\n            var value = [];\r\n    \r\n            if (obj.options.columns[column] && obj.options.columns[column].source) {\r\n                // Create array from source\r\n                var combo = [];\r\n                var source = obj.options.columns[column].source;\r\n    \r\n                for (var i = 0; i < source.length; i++) {\r\n                    if (typeof(source[i]) == 'object') {\r\n                        combo[source[i].id] = source[i].name;\r\n                    } else {\r\n                        combo[source[i]] = source[i];\r\n                    }\r\n                }\r\n    \r\n                // Guarantee single multiple compatibility\r\n                var keys = Array.isArray(key) ? key : ('' + key).split(';');\r\n    \r\n                for (var i = 0; i < keys.length; i++) {\r\n                    if (typeof(keys[i]) === 'object') {\r\n                        value.push(combo[keys[i].id]);\r\n                    } else {\r\n                        if (combo[keys[i]]) {\r\n                            value.push(combo[keys[i]]);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                console.error('Invalid column');\r\n            }\r\n    \r\n            return (value.length > 0) ? value.join('; ') : '';\r\n        }\r\n    \r\n        /**\r\n         * From starckoverflow contributions\r\n         */\r\n        obj.parseCSV = function(str, delimiter) {\r\n            // Remove last line break\r\n            str = str.replace(/\\r?\\n$|\\r$|\\n$/g, \"\");\r\n            // Last caracter is the delimiter\r\n            if (str.charCodeAt(str.length-1) == 9) {\r\n                str += \"\\0\";\r\n            }\r\n            // user-supplied delimeter or default comma\r\n            delimiter = (delimiter || \",\");\r\n    \r\n            var arr = [];\r\n            var quote = false;  // true means we're inside a quoted field\r\n            // iterate over each character, keep track of current row and column (of the returned array)\r\n            for (var row = 0, col = 0, c = 0; c < str.length; c++) {\r\n                var cc = str[c], nc = str[c+1];\r\n                arr[row] = arr[row] || [];\r\n                arr[row][col] = arr[row][col] || '';\r\n    \r\n                // If the current character is a quotation mark, and we're inside a quoted field, and the next character is also a quotation mark, add a quotation mark to the current column and skip the next character\r\n                if (cc == '\"' && quote && nc == '\"') { arr[row][col] += cc; ++c; continue; }  \r\n    \r\n                // If it's just one quotation mark, begin/end quoted field\r\n                if (cc == '\"') { quote = !quote; continue; }\r\n    \r\n                // If it's a comma and we're not in a quoted field, move on to the next column\r\n                if (cc == delimiter && !quote) { ++col; continue; }\r\n    \r\n                // If it's a newline (CRLF) and we're not in a quoted field, skip the next character and move on to the next row and move to column 0 of that new row\r\n                if (cc == '\\r' && nc == '\\n' && !quote) { ++row; col = 0; ++c; continue; }\r\n    \r\n                // If it's a newline (LF or CR) and we're not in a quoted field, move on to the next row and move to column 0 of that new row\r\n                if (cc == '\\n' && !quote) { ++row; col = 0; continue; }\r\n                if (cc == '\\r' && !quote) { ++row; col = 0; continue; }\r\n    \r\n                // Otherwise, append the current character to the current column\r\n                arr[row][col] += cc;\r\n            }\r\n            return arr;\r\n        }\r\n    \r\n        obj.hash = function(str) {\r\n            var hash = 0, i, chr;\r\n    \r\n            if (str.length === 0) {\r\n                return hash;\r\n            } else {\r\n                for (i = 0; i < str.length; i++) {\r\n                  chr = str.charCodeAt(i);\r\n                  hash = ((hash << 5) - hash) + chr;\r\n                  hash |= 0;\r\n                }\r\n            }\r\n            return hash;\r\n        }\r\n    \r\n        obj.onafterchanges = function(el, records) {\r\n            // Events\r\n            obj.dispatch('onafterchanges', el, records);\r\n        }\r\n    \r\n        obj.destroy = function() {\r\n            jexcel.destroy(el);\r\n        }\r\n\r\n        /**\r\n         * Initialization method\r\n         */\r\n        obj.init = function() {\r\n            jexcel.current = obj;\r\n    \r\n            // Build handlers\r\n            if (typeof(jexcel.build) == 'function') {\r\n                if (obj.options.root) {\r\n                    jexcel.build(obj.options.root);\r\n                } else {\r\n                    jexcel.build(document);\r\n                    jexcel.build = null;\r\n                }\r\n            }\r\n    \r\n            // Event\r\n            el.setAttribute('tabindex', 1);\r\n            el.addEventListener('focus', function(e) {\r\n                if (jexcel.current && ! obj.selectedCell) {\r\n                    obj.updateSelectionFromCoords(0,0,0,0);\r\n                    obj.left();\r\n                }\r\n            });\r\n\r\n            // Load the table data based on an CSV file\r\n            if (obj.options.csv) {\r\n                // Loading\r\n                if (obj.options.loadingSpin == true) {\r\n                    jSuites.loading.show();\r\n                }\r\n    \r\n                // Load CSV file\r\n                jSuites.ajax({\r\n                    url: obj.options.csv,\r\n                    method: obj.options.method,\r\n                    data: obj.options.requestVariables,\r\n                    dataType: 'text',\r\n                    success: function(result) {\r\n                        // Convert data\r\n                        var newData = obj.parseCSV(result, obj.options.csvDelimiter)\r\n    \r\n                        // Headers\r\n                        if (obj.options.csvHeaders == true && newData.length > 0) {\r\n                            var headers = newData.shift();\r\n                            for(var i = 0; i < headers.length; i++) {\r\n                                if (! obj.options.columns[i]) {\r\n                                    obj.options.columns[i] = { type:'text', align:obj.options.defaultColAlign, width:obj.options.defaultColWidth };\r\n                                }\r\n                                // Precedence over pre-configurated titles\r\n                                if (typeof obj.options.columns[i].title === 'undefined') {\r\n                                  obj.options.columns[i].title = headers[i];\r\n                                }\r\n                            }\r\n                        }\r\n                        // Data\r\n                        obj.options.data = newData;\r\n                        // Prepare table\r\n                        obj.prepareTable();\r\n                        // Hide spin\r\n                        if (obj.options.loadingSpin == true) {\r\n                            jSuites.loading.hide();\r\n                        }\r\n                    }\r\n                });\r\n            } else if (obj.options.url) {\r\n                // Loading\r\n                if (obj.options.loadingSpin == true) {\r\n                    jSuites.loading.show();\r\n                }\r\n    \r\n                jSuites.ajax({\r\n                    url: obj.options.url,\r\n                    method: obj.options.method,\r\n                    data: obj.options.requestVariables,\r\n                    dataType: 'json',\r\n                    success: function(result) {\r\n                        // Data\r\n                        obj.options.data = (result.data) ? result.data : result;\r\n                        // Prepare table\r\n                        obj.prepareTable();\r\n                        // Hide spin\r\n                        if (obj.options.loadingSpin == true) {\r\n                            jSuites.loading.hide();\r\n                        }\r\n                    }\r\n                });\r\n            } else {\r\n                // Prepare table\r\n                obj.prepareTable();\r\n            }\r\n        }\r\n    \r\n        // Context menu\r\n        if (options && options.contextMenu != null) {\r\n            obj.options.contextMenu = options.contextMenu;\r\n        } else {\r\n            obj.options.contextMenu = function(el, x, y, e) {\r\n                var items = [];\r\n    \r\n                if (y == null) {\r\n                    // Insert a new column\r\n                    if (obj.options.allowInsertColumn == true) {\r\n                        items.push({\r\n                            title:obj.options.text.insertANewColumnBefore,\r\n                            onclick:function() {\r\n                                obj.insertColumn(1, parseInt(x), 1);\r\n                            }\r\n                        });\r\n                    }\r\n    \r\n                    if (obj.options.allowInsertColumn == true) {\r\n                        items.push({\r\n                            title:obj.options.text.insertANewColumnAfter,\r\n                            onclick:function() {\r\n                                obj.insertColumn(1, parseInt(x), 0);\r\n                            }\r\n                        });\r\n                    }\r\n    \r\n                    // Delete a column\r\n                    if (obj.options.allowDeleteColumn == true) {\r\n                        items.push({\r\n                            title:obj.options.text.deleteSelectedColumns,\r\n                            onclick:function() {\r\n                                obj.deleteColumn(obj.getSelectedColumns().length ? undefined : parseInt(x));\r\n                            }\r\n                        });\r\n                    }\r\n    \r\n                    // Rename column\r\n                    if (obj.options.allowRenameColumn == true) {\r\n                        items.push({\r\n                            title:obj.options.text.renameThisColumn,\r\n                            onclick:function() {\r\n                                obj.setHeader(x);\r\n                            }\r\n                        });\r\n                    }\r\n    \r\n                    // Sorting\r\n                    if (obj.options.columnSorting == true) {\r\n                        // Line\r\n                        items.push({ type:'line' });\r\n    \r\n                        items.push({\r\n                            title:obj.options.text.orderAscending,\r\n                            onclick:function() {\r\n                                obj.orderBy(x, 0);\r\n                            }\r\n                        });\r\n                        items.push({\r\n                            title:obj.options.text.orderDescending,\r\n                            onclick:function() {\r\n                                obj.orderBy(x, 1);\r\n                            }\r\n                        });\r\n                    }\r\n                } else {\r\n                    // Insert new row\r\n                    if (obj.options.allowInsertRow == true) {\r\n                        items.push({\r\n                            title:obj.options.text.insertANewRowBefore,\r\n                            onclick:function() {\r\n                                obj.insertRow(1, parseInt(y), 1);\r\n                            }\r\n                        });\r\n    \r\n                        items.push({\r\n                            title:obj.options.text.insertANewRowAfter,\r\n                            onclick:function() {\r\n                                obj.insertRow(1, parseInt(y));\r\n                            }\r\n                        });\r\n                    }\r\n    \r\n                    if (obj.options.allowDeleteRow == true) {\r\n                        items.push({\r\n                            title:obj.options.text.deleteSelectedRows,\r\n                            onclick:function() {\r\n                                obj.deleteRow(obj.getSelectedRows().length ? undefined : parseInt(y));\r\n                            }\r\n                        });\r\n                    }\r\n    \r\n                    if (x) {\r\n                        if (obj.options.allowComments == true) {\r\n                            items.push({ type:'line' });\r\n    \r\n                            var title = obj.records[y][x].getAttribute('title') || '';\r\n\r\n                            items.push({\r\n                                title: title ? obj.options.text.editComments : obj.options.text.addComments,\r\n                                onclick:function() {\r\n                                    var comment = prompt(obj.options.text.comments, title);\r\n                                    if (comment) {\r\n                                        obj.setComments([ x, y ], comment);\r\n                                    }\r\n                                }\r\n                            });\r\n    \r\n                            if (title) {\r\n                                items.push({\r\n                                    title:obj.options.text.clearComments,\r\n                                    onclick:function() {\r\n                                        obj.setComments([ x, y ], '');\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n    \r\n                // Line\r\n                items.push({ type:'line' });\r\n    \r\n                // Copy\r\n                items.push({\r\n                    title:obj.options.text.copy,\r\n                    shortcut:'Ctrl + C',\r\n                    onclick:function() {\r\n                        obj.copy(true);\r\n                    }\r\n                });\r\n    \r\n                // Paste\r\n                if (navigator && navigator.clipboard) {\r\n                    items.push({\r\n                        title:obj.options.text.paste,\r\n                        shortcut:'Ctrl + V',\r\n                        onclick:function() {\r\n                            if (obj.selectedCell) {\r\n                                navigator.clipboard.readText().then(function(text) {\r\n                                    if (text) {\r\n                                        jexcel.current.paste(obj.selectedCell[0], obj.selectedCell[1], text);\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n    \r\n                // Save\r\n                if (obj.options.allowExport) {\r\n                    items.push({\r\n                        title: obj.options.text.saveAs,\r\n                        shortcut: 'Ctrl + S',\r\n                        onclick: function () {\r\n                            obj.download();\r\n                        }\r\n                    });\r\n                }\r\n    \r\n                // About\r\n                if (obj.options.about) {\r\n                    items.push({\r\n                        title:obj.options.text.about,\r\n                        onclick:function() {\r\n                            alert(obj.options.about);\r\n                        }\r\n                    });\r\n                }\r\n    \r\n                return items;\r\n            }\r\n        }\r\n    \r\n        obj.scrollControls = function(e) {\r\n            obj.wheelControls();\r\n\r\n            if (obj.options.freezeColumns > 0 && obj.content.scrollLeft != scrollLeft) {\r\n                obj.updateFreezePosition();\r\n            }\r\n\r\n            // Close editor\r\n            if (obj.options.lazyLoading == true || obj.options.tableOverflow == true) {\r\n                if (obj.edition && e.target.className.substr(0,9) != 'jdropdown') {\r\n                    obj.closeEditor(obj.edition[0], true);\r\n                }\r\n            }\r\n        }\r\n\r\n        obj.wheelControls = function(e) {\r\n            if (obj.options.lazyLoading == true) {\r\n                if (jexcel.timeControlLoading == null) {\r\n                    jexcel.timeControlLoading = setTimeout(function() {\r\n                        if (obj.content.scrollTop + obj.content.clientHeight >= obj.content.scrollHeight) {\r\n                            if (obj.loadDown()) {\r\n                                if (obj.content.scrollTop + obj.content.clientHeight > obj.content.scrollHeight - 10) {\r\n                                    obj.content.scrollTop = obj.content.scrollTop - obj.content.clientHeight;\r\n                                }\r\n                                obj.updateCornerPosition();\r\n                            }\r\n                        } else if (obj.content.scrollTop <= obj.content.clientHeight) {\r\n                            if (obj.loadUp()) {\r\n                                if (obj.content.scrollTop < 10) {\r\n                                    obj.content.scrollTop = obj.content.scrollTop + obj.content.clientHeight;\r\n                                }\r\n                                obj.updateCornerPosition();\r\n                            }\r\n                        }\r\n    \r\n                        jexcel.timeControlLoading = null;\r\n                    }, 100);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Get width of all freezed cells together\r\n        obj.getFreezeWidth = function() {\r\n            var width = 0;\r\n            if (obj.options.freezeColumns > 0) {\r\n                for (var i = 0; i < obj.options.freezeColumns; i++) {\r\n                    width += parseInt(obj.options.columns[i].width);\r\n                }\r\n            }\r\n            return width;\r\n        }\r\n\r\n        var scrollLeft = 0;\r\n\r\n        obj.updateFreezePosition = function() {\r\n            scrollLeft = obj.content.scrollLeft;\r\n            var width = 0;\r\n            if (scrollLeft > 50) {\r\n                for (var i = 0; i < obj.options.freezeColumns; i++) {\r\n                    if (i > 0) {\r\n                        width += parseInt(obj.options.columns[i-1].width);\r\n                    }\r\n                    obj.headers[i].classList.add('jexcel_freezed');\r\n                    obj.headers[i].style.left = width + 'px';\r\n                    for (var j = 0; j < obj.rows.length; j++) {\r\n                        if (obj.rows[j] && obj.records[j][i]) {\r\n                            var shifted = (scrollLeft + (i > 0 ? obj.records[j][i-1].style.width : 0)) - 51 + 'px';\r\n                            obj.records[j][i].classList.add('jexcel_freezed');\r\n                            obj.records[j][i].style.left = shifted;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                for (var i = 0; i < obj.options.freezeColumns; i++) {\r\n                    obj.headers[i].classList.remove('jexcel_freezed');\r\n                    obj.headers[i].style.left = '';\r\n                    for (var j = 0; j < obj.rows.length; j++) {\r\n                        if (obj.records[j][i]) {\r\n                            obj.records[j][i].classList.remove('jexcel_freezed');\r\n                            obj.records[j][i].style.left = '';\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Place the corner in the correct place\r\n            obj.updateCornerPosition();\r\n        }\r\n\r\n        el.addEventListener(\"DOMMouseScroll\", obj.wheelControls);\r\n        el.addEventListener(\"mousewheel\", obj.wheelControls);\r\n    \r\n        el.jexcel = obj;\r\n    \r\n        obj.init();\r\n    \r\n        return obj;\r\n    });\r\n    \r\n    jexcel.current = null;\r\n    jexcel.timeControl = null;\r\n    jexcel.timeControlLoading = null;\r\n    \r\n    jexcel.destroy = function(element, destroyEventHandlers) {\r\n        if (element.jexcel) {\r\n            var root = element.jexcel.options.root ? element.jexcel.options.root : document;\r\n            element.removeEventListener(\"DOMMouseScroll\", element.jexcel.scrollControls);\r\n            element.removeEventListener(\"mousewheel\", element.jexcel.scrollControls);\r\n            element.jexcel = null;\r\n            element.innerHTML = '';\r\n    \r\n            if (destroyEventHandlers) {\r\n                root.removeEventListener(\"mouseup\", jexcel.mouseUpControls);\r\n                root.removeEventListener(\"mousedown\", jexcel.mouseDownControls);\r\n                root.removeEventListener(\"mousemove\", jexcel.mouseMoveControls);\r\n                root.removeEventListener(\"mouseover\", jexcel.mouseOverControls);\r\n                root.removeEventListener(\"dblclick\", jexcel.doubleClickControls);\r\n                root.removeEventListener(\"paste\", jexcel.pasteControls);\r\n                root.removeEventListener(\"contextmenu\", jexcel.contextMenuControls);\r\n                root.removeEventListener(\"touchstart\", jexcel.touchStartControls);\r\n                root.removeEventListener(\"touchend\", jexcel.touchEndControls);\r\n                root.removeEventListener(\"touchcancel\", jexcel.touchEndControls);\r\n                document.removeEventListener(\"keydown\", jexcel.keyDownControls);\r\n                jexcel = null;\r\n            }\r\n        }\r\n    }\r\n    \r\n    jexcel.build = function(root) {\r\n        root.addEventListener(\"mouseup\", jexcel.mouseUpControls);\r\n        root.addEventListener(\"mousedown\", jexcel.mouseDownControls);\r\n        root.addEventListener(\"mousemove\", jexcel.mouseMoveControls);\r\n        root.addEventListener(\"mouseover\", jexcel.mouseOverControls);\r\n        root.addEventListener(\"dblclick\", jexcel.doubleClickControls);\r\n        root.addEventListener(\"paste\", jexcel.pasteControls);\r\n        root.addEventListener(\"contextmenu\", jexcel.contextMenuControls);\r\n        root.addEventListener(\"touchstart\", jexcel.touchStartControls);\r\n        root.addEventListener(\"touchend\", jexcel.touchEndControls);\r\n        root.addEventListener(\"touchcancel\", jexcel.touchEndControls);\r\n        root.addEventListener(\"touchmove\", jexcel.touchEndControls);\r\n        document.addEventListener(\"keydown\", jexcel.keyDownControls);\r\n    }\r\n    \r\n    /**\r\n     * Events\r\n     */\r\n    jexcel.keyDownControls = function(e) {\r\n        if (jexcel.current) {\r\n            if (jexcel.current.edition) {\r\n                if (e.which == 27) {\r\n                    // Escape\r\n                    if (jexcel.current.edition) {\r\n                        // Exit without saving\r\n                        jexcel.current.closeEditor(jexcel.current.edition[0], false);\r\n                    }\r\n                    e.preventDefault();\r\n                } else if (e.which == 13) {\r\n                    // Enter\r\n                    if (jexcel.current.options.columns[jexcel.current.edition[2]].type == 'calendar') {\r\n                        jexcel.current.closeEditor(jexcel.current.edition[0], true);\r\n                    } else if (jexcel.current.options.columns[jexcel.current.edition[2]].type == 'dropdown' ||\r\n                               jexcel.current.options.columns[jexcel.current.edition[2]].type == 'autocomplete') {\r\n                        // Do nothing\r\n                    } else {\r\n                        // Alt enter -> do not close editor\r\n                        if ((jexcel.current.options.wordWrap == true ||\r\n                             jexcel.current.options.columns[jexcel.current.edition[2]].wordWrap == true ||\r\n                             jexcel.current.options.data[jexcel.current.edition[3]][jexcel.current.edition[2]].length > 200) && e.altKey) {\r\n                            // Add new line to the editor\r\n                            var editorTextarea = jexcel.current.edition[0].children[0];\r\n                            var editorValue = jexcel.current.edition[0].children[0].value;\r\n                            var editorIndexOf = editorTextarea.selectionStart;\r\n                            editorValue = editorValue.slice(0, editorIndexOf) + \"\\n\" + editorValue.slice(editorIndexOf);\r\n                            editorTextarea.value = editorValue;\r\n                            editorTextarea.focus();\r\n                            editorTextarea.selectionStart = editorIndexOf + 1;\r\n                            editorTextarea.selectionEnd = editorIndexOf + 1;\r\n                        } else {\r\n                            jexcel.current.edition[0].children[0].blur();\r\n                        }\r\n                    }\r\n                } else if (e.which == 9) {\r\n                    // Tab\r\n                    if (jexcel.current.options.columns[jexcel.current.edition[2]].type == 'calendar') {\r\n                        jexcel.current.closeEditor(jexcel.current.edition[0], true);\r\n                    } else {\r\n                        jexcel.current.edition[0].children[0].blur();\r\n                    }\r\n                }\r\n            }\r\n    \r\n            if (! jexcel.current.edition && jexcel.current.selectedCell) {\r\n                // Which key\r\n                if (e.which == 37) {\r\n                    jexcel.current.left(e.shiftKey, e.ctrlKey);\r\n                    e.preventDefault();\r\n                } else if (e.which == 39) {\r\n                    jexcel.current.right(e.shiftKey, e.ctrlKey);\r\n                    e.preventDefault();\r\n                } else if (e.which == 38) {\r\n                    jexcel.current.up(e.shiftKey, e.ctrlKey);\r\n                    e.preventDefault();\r\n                } else if (e.which == 40) {\r\n                    jexcel.current.down(e.shiftKey, e.ctrlKey);\r\n                    e.preventDefault();\r\n                } else if (e.which == 36) {\r\n                    jexcel.current.first(e.shiftKey, e.ctrlKey);\r\n                    e.preventDefault();\r\n                } else if (e.which == 35) {\r\n                    jexcel.current.last(e.shiftKey, e.ctrlKey);\r\n                    e.preventDefault();\r\n                } else if (e.which == 32) {\r\n                    if (jexcel.current.options.editable == true) {\r\n                        jexcel.current.setCheckRadioValue();\r\n                    }\r\n                    e.preventDefault();\r\n                } else if (e.which == 46) {\r\n                    // Delete\r\n                    if (jexcel.current.options.editable == true) {\r\n                        if (jexcel.current.selectedRow) {\r\n                            if (jexcel.current.options.allowDeleteRow == true) {\r\n                                if (confirm(jexcel.current.options.text.areYouSureToDeleteTheSelectedRows)) {\r\n                                    jexcel.current.deleteRow();\r\n                                }\r\n                            }\r\n                        } else if (jexcel.current.selectedHeader) {\r\n                            if (jexcel.current.options.allowDeleteColumn == true) {\r\n                                if (confirm(jexcel.current.options.text.areYouSureToDeleteTheSelectedColumns)) {\r\n                                    jexcel.current.deleteColumn();\r\n                                }\r\n                            }\r\n                        } else {\r\n                            // Change value\r\n                            jexcel.current.setValue(jexcel.current.highlighted, '');\r\n                        }\r\n                    }\r\n                } else if (e.which == 13) {\r\n                    // Move cursor\r\n                    if (e.shiftKey) {\r\n                        jexcel.current.up();\r\n                    } else {\r\n                        if (jexcel.current.options.allowInsertRow == true) {\r\n                            if (jexcel.current.options.allowManualInsertRow == true) {\r\n                                if (jexcel.current.selectedCell[1] == jexcel.current.options.data.length - 1) {\r\n                                    // New record in case selectedCell in the last row\r\n                                    jexcel.current.insertRow();\r\n                                }\r\n                            }\r\n                        }\r\n    \r\n                        jexcel.current.down();\r\n                    }\r\n                    e.preventDefault();\r\n                } else if (e.which == 9) {\r\n                    // Tab\r\n                    if (e.shiftKey) {\r\n                        jexcel.current.left();\r\n                    } else {\r\n                        if (jexcel.current.options.allowInsertColumn == true) {\r\n                            if (jexcel.current.options.allowManualInsertColumn == true) {\r\n                                if (jexcel.current.selectedCell[0] == jexcel.current.options.data[0].length - 1) {\r\n                                    // New record in case selectedCell in the last column\r\n                                    jexcel.current.insertColumn();\r\n                                }\r\n                            }\r\n                        }\r\n    \r\n                        jexcel.current.right();\r\n                    }\r\n                    e.preventDefault();\r\n                } else {\r\n                    if ((e.ctrlKey || e.metaKey) && ! e.shiftKey) {\r\n                        if (e.which == 65) {\r\n                            // Ctrl + A\r\n                            jexcel.current.selectAll();\r\n                            e.preventDefault();\r\n                        } else if (e.which == 83) {\r\n                            // Ctrl + S\r\n                            jexcel.current.download();\r\n                            e.preventDefault();\r\n                        } else if (e.which == 89) {\r\n                            // Ctrl + Y\r\n                            jexcel.current.redo();\r\n                            e.preventDefault();\r\n                        } else if (e.which == 90) {\r\n                            // Ctrl + Z\r\n                            jexcel.current.undo();\r\n                            e.preventDefault();\r\n                        } else if (e.which == 67) {\r\n                            // Ctrl + C\r\n                            jexcel.current.copy(true);\r\n                            e.preventDefault();\r\n                        } else if (e.which == 67) {\r\n                            // Ctrl + C\r\n                            jexcel.current.copy(true);\r\n                            e.preventDefault();\r\n                        } else if (e.which == 88) {\r\n                            // Ctrl + X\r\n                            if (jexcel.current.options.editable == true) {\r\n                                jexcel.cutControls();\r\n                            } else {\r\n                                jexcel.copyControls();\r\n                            }\r\n                            e.preventDefault();\r\n                        } else if (e.which == 86) {\r\n                            // Ctrl + V\r\n                            jexcel.pasteControls();\r\n                        }\r\n                    } else {\r\n                        if (jexcel.current.selectedCell) {\r\n                            if (jexcel.current.options.editable == true) {\r\n                                var rowId = jexcel.current.selectedCell[1];\r\n                                var columnId = jexcel.current.selectedCell[0];\r\n    \r\n                                // If is not readonly\r\n                                if (jexcel.current.options.columns[columnId].type != 'readonly') {\r\n                                    // Characters able to start a edition\r\n                                    if (e.keyCode == 32) {\r\n                                        // Space\r\n                                        if (jexcel.current.options.columns[columnId].type == 'checkbox' ||\r\n                                            jexcel.current.options.columns[columnId].type == 'radio') {\r\n                                            e.preventDefault();\r\n                                        } else {\r\n                                            // Start edition\r\n                                            jexcel.current.openEditor(jexcel.current.records[rowId][columnId], true);\r\n                                        }\r\n                                    } else if (e.keyCode == 113) {\r\n                                        // Start edition with current content F2\r\n                                        jexcel.current.openEditor(jexcel.current.records[rowId][columnId], false);\r\n                                    } else if ((e.keyCode == 8) ||\r\n                                               (e.keyCode >= 48 && e.keyCode <= 57) ||\r\n                                               (e.keyCode >= 96 && e.keyCode <= 111) ||\r\n                                               (e.keyCode >= 187 && e.keyCode <= 190) ||\r\n                                               ((String.fromCharCode(e.keyCode) == e.key || String.fromCharCode(e.keyCode).toLowerCase() == e.key.toLowerCase()) && jexcel.validLetter(String.fromCharCode(e.keyCode)))) {\r\n                                        // Start edition\r\n                                        jexcel.current.openEditor(jexcel.current.records[rowId][columnId], true);\r\n                                        // Prevent entries in the calendar\r\n                                        if (jexcel.current.options.columns[columnId].type == 'calendar') {\r\n                                            e.preventDefault();\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                if (e.target.classList.contains('jexcel_search')) {\r\n                    if (jexcel.timeControl) {\r\n                        clearTimeout(jexcel.timeControl);\r\n                    }\r\n    \r\n                    jexcel.timeControl = setTimeout(function() {\r\n                        jexcel.current.search(e.target.value);\r\n                    }, 200);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    jexcel.isMouseAction = false;\r\n    \r\n    jexcel.mouseDownControls = function(e) {\r\n        e = e || window.event;\r\n        if (e.buttons) {\r\n            var mouseButton = e.buttons;\r\n        } else if (e.button) {\r\n            var mouseButton = e.button;\r\n        } else {\r\n            var mouseButton = e.which;\r\n        }\r\n\r\n        // Get elements\r\n        var jexcelTable = jexcel.getElement(e.target);\r\n\r\n        if (jexcelTable[0]) {\r\n            if (jexcel.current != jexcelTable[0].jexcel) {\r\n                if (jexcel.current) {\r\n                    if (jexcel.current.edition) {\r\n                        jexcel.current.closeEditor(jexcel.current.edition[0], true);\r\n                    }\r\n                    jexcel.current.resetSelection();\r\n                }\r\n                jexcel.current = jexcelTable[0].jexcel;\r\n            }\r\n        } else {\r\n            if (jexcel.current) {\r\n                if (jexcel.current.edition) {\r\n                    jexcel.current.closeEditor(jexcel.current.edition[0], true);\r\n                }\r\n                \r\n                jexcel.current.resetSelection(true);\r\n                jexcel.current = null;\r\n            }\r\n        }\r\n    \r\n        if (jexcel.current && mouseButton == 1) {\r\n            if (e.target.classList.contains('jexcel_selectall')) {\r\n                if (jexcel.current) {\r\n                    jexcel.current.selectAll();\r\n                }\r\n            } else if (e.target.classList.contains('jexcel_corner')) {\r\n                if (jexcel.current.options.editable == true) {\r\n                    jexcel.current.selectedCorner = true;\r\n                }\r\n            } else {\r\n                // Header found\r\n                if (jexcelTable[1] == 1) {\r\n                    var columnId = e.target.getAttribute('data-x');\r\n                    if (columnId) {\r\n                        // Update cursor\r\n                        var info = e.target.getBoundingClientRect();\r\n                        if (jexcel.current.options.columnResize == true && info.width - e.offsetX < 6) {\r\n                            // Resize helper\r\n                            jexcel.current.resizing = {\r\n                                mousePosition: e.pageX,\r\n                                column: columnId,\r\n                                width: info.width,\r\n                            };\r\n    \r\n                            // Border indication\r\n                            jexcel.current.headers[columnId].classList.add('resizing');\r\n                            for (var j = 0; j < jexcel.current.records.length; j++) {\r\n                                if (jexcel.current.records[j][columnId]) {\r\n                                    jexcel.current.records[j][columnId].classList.add('resizing');\r\n                                }\r\n                            }\r\n                        } else if (jexcel.current.options.columnDrag == true && info.height - e.offsetY < 6) {\r\n                            if (jexcel.current.isColMerged(columnId).length) {\r\n                                console.error('JEXCEL: This column is part of a merged cell.');\r\n                            } else {\r\n                                // Reset selection\r\n                                jexcel.current.resetSelection();\r\n                                // Drag helper\r\n                                jexcel.current.dragging = {\r\n                                    element: e.target,\r\n                                    column:columnId,\r\n                                    destination:columnId,\r\n                                };\r\n                                // Border indication\r\n                                jexcel.current.headers[columnId].classList.add('dragging');\r\n                                for (var j = 0; j < jexcel.current.records.length; j++) {\r\n                                    if (jexcel.current.records[j][columnId]) {\r\n                                        jexcel.current.records[j][columnId].classList.add('dragging');\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else {\r\n                            if (jexcel.current.selectedHeader && (e.shiftKey || e.ctrlKey)) {\r\n                                var o = jexcel.current.selectedHeader;\r\n                                var d = columnId;\r\n                            } else {\r\n                                // Press to rename\r\n                                if (jexcel.current.selectedHeader == columnId && jexcel.current.options.allowRenameColumn == true) {\r\n                                    jexcel.timeControl = setTimeout(function() {\r\n                                        jexcel.current.setHeader(columnId);\r\n                                    }, 800);\r\n                                }\r\n    \r\n                                // Keep track of which header was selected first\r\n                                jexcel.current.selectedHeader = columnId;\r\n    \r\n                                // Update selection single column\r\n                                var o = columnId;\r\n                                var d = columnId;\r\n                            }\r\n    \r\n                            // Update selection\r\n                            jexcel.current.updateSelectionFromCoords(o, 0, d, jexcel.current.options.data.length - 1);\r\n                        }\r\n                    } else {\r\n                        if (e.target.parentNode.classList.contains('jexcel_nested')) {\r\n                            if (e.target.getAttribute('data-column')) {\r\n                                var column = e.target.getAttribute('data-column').split(',');\r\n                                var c1 = parseInt(column[0]);\r\n                                var c2 = parseInt(column[column.length-1]);\r\n                            } else {\r\n                                var c1 = 0;\r\n                                var c2 = jexcel.current.options.columns.length - 1;\r\n                            }\r\n                            jexcel.current.updateSelectionFromCoords(c1, 0, c2, jexcel.current.options.data.length - 1);\r\n                        }\r\n                    }\r\n                } else {\r\n                    jexcel.current.selectedHeader = false;\r\n                }\r\n    \r\n                // Body found\r\n                if (jexcelTable[1] == 2) {\r\n                    var rowId = e.target.getAttribute('data-y');\r\n                    \r\n                    if (e.target.classList.contains('jexcel_row')) {\r\n                        var info = e.target.getBoundingClientRect();\r\n                        if (jexcel.current.options.rowResize == true && info.height - e.offsetY < 6) {\r\n                            // Resize helper\r\n                            jexcel.current.resizing = {\r\n                                element: e.target.parentNode,\r\n                                mousePosition: e.pageY,\r\n                                row: rowId,\r\n                                height: info.height,\r\n                            };\r\n                            // Border indication\r\n                            e.target.parentNode.classList.add('resizing');\r\n                        } else if (jexcel.current.options.rowDrag == true && info.width - e.offsetX < 6) {\r\n                            if (jexcel.current.isRowMerged(rowId).length) {\r\n                                console.error('JEXCEL: This row is part of a merged cell');\r\n                            } else if (jexcel.current.options.search == true && jexcel.current.results) {\r\n                                console.error('JEXCEL: Please clear your search before perform this action');\r\n                            } else {\r\n                                // Reset selection\r\n                                jexcel.current.resetSelection();\r\n                                // Drag helper\r\n                                jexcel.current.dragging = {\r\n                                    element: e.target.parentNode,\r\n                                    row:rowId,\r\n                                    destination:rowId,\r\n                                };\r\n                                // Border indication\r\n                                e.target.parentNode.classList.add('dragging');\r\n                            }\r\n                        } else {\r\n                            if (jexcel.current.selectedRow && (e.shiftKey || e.ctrlKey)) {\r\n                                var o = jexcel.current.selectedRow;\r\n                                var d = rowId;\r\n                            } else {\r\n                                // Keep track of which header was selected first\r\n                                jexcel.current.selectedRow = rowId;\r\n    \r\n                                // Update selection single column\r\n                                var o = rowId;\r\n                                var d = rowId;\r\n                            }\r\n    \r\n                            // Update selection\r\n                            jexcel.current.updateSelectionFromCoords(0, o, jexcel.current.options.data[0].length - 1, d);\r\n                        }\r\n                    } else {\r\n                        // Jclose\r\n                        if (e.target.classList.contains('jclose') && e.target.clientWidth - e.offsetX < 50 && e.offsetY < 50) {\r\n                            jexcel.current.closeEditor(jexcel.current.edition[0], true);\r\n                        } else {\r\n                            var getCellCoords = function(element) {\r\n                                var x = element.getAttribute('data-x');\r\n                                var y = element.getAttribute('data-y');\r\n                                if (x && y) {\r\n                                    return [x, y];\r\n                                } else {\r\n                                    if (element.parentNode) {\r\n                                        return getCellCoords(element.parentNode);\r\n                                    }\r\n                                }\r\n                            };\r\n\r\n                            var position = getCellCoords(e.target);\r\n                            if (position) {\r\n\r\n                                var columnId = position[0];\r\n                                var rowId = position[1];\r\n                                // Close edition\r\n                                if (jexcel.current.edition) {\r\n                                    if (jexcel.current.edition[2] != columnId || jexcel.current.edition[3] != rowId) {\r\n                                        jexcel.current.closeEditor(jexcel.current.edition[0], true);\r\n                                    }\r\n                                }\r\n\r\n                                if (! jexcel.current.edition) {\r\n                                    // Update cell selection\r\n                                    if (e.shiftKey) {\r\n                                        jexcel.current.updateSelectionFromCoords(jexcel.current.selectedCell[0], jexcel.current.selectedCell[1], columnId, rowId);\r\n                                    } else {\r\n                                        jexcel.current.updateSelectionFromCoords(columnId, rowId);\r\n                                    }\r\n                                }\r\n\r\n                                // No full row selected\r\n                                jexcel.current.selectedHeader = null;\r\n                                jexcel.current.selectedRow = null;\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    jexcel.current.selectedRow = false;\r\n                }\r\n    \r\n                // Pagination\r\n                if (e.target.classList.contains('jexcel_page')) {\r\n                    if (e.target.innerText == '<') {\r\n                        jexcel.current.page(0);\r\n                    } else if (e.target.innerText == '>') {\r\n                        jexcel.current.page(e.target.getAttribute('title') - 1);\r\n                    } else {\r\n                        jexcel.current.page(e.target.innerText - 1);\r\n                    }\r\n                }\r\n            }\r\n    \r\n            if (jexcel.current.edition) {\r\n                jexcel.isMouseAction = false;\r\n            } else {\r\n                jexcel.isMouseAction = true;\r\n            }\r\n        } else {\r\n            jexcel.isMouseAction = false;\r\n        }\r\n    }\r\n    \r\n    jexcel.mouseUpControls = function(e) {\r\n        if (jexcel.current) {\r\n            // Update cell size\r\n            if (jexcel.current.resizing) {\r\n                // Columns to be updated\r\n                if (jexcel.current.resizing.column) {\r\n                    // New width\r\n                    var newWidth = jexcel.current.colgroup[jexcel.current.resizing.column].getAttribute('width');\r\n                    // Columns\r\n                    var columns = jexcel.current.getSelectedColumns();\r\n                    if (columns.length > 1) {\r\n                        var currentWidth = [];\r\n                        for (var i = 0; i < columns.length; i++) {\r\n                            currentWidth.push(parseInt(jexcel.current.colgroup[columns[i]].getAttribute('width')));\r\n                        }\r\n                        // Previous width\r\n                        var index = columns.indexOf(parseInt(jexcel.current.resizing.column));\r\n                        currentWidth[index] = jexcel.current.resizing.width;\r\n                        jexcel.current.setWidth(columns, newWidth, currentWidth);\r\n                    } else {\r\n                        jexcel.current.setWidth(jexcel.current.resizing.column, newWidth, jexcel.current.resizing.width);\r\n                    }\r\n                    // Remove border\r\n                    jexcel.current.headers[jexcel.current.resizing.column].classList.remove('resizing');\r\n                    for (var j = 0; j < jexcel.current.records.length; j++) {\r\n                        if (jexcel.current.records[j][jexcel.current.resizing.column]) {\r\n                            jexcel.current.records[j][jexcel.current.resizing.column].classList.remove('resizing');\r\n                        }\r\n                    }\r\n                } else {\r\n                    // Remove Class\r\n                    jexcel.current.rows[jexcel.current.resizing.row].children[0].classList.remove('resizing');\r\n                    var newHeight = jexcel.current.rows[jexcel.current.resizing.row].getAttribute('height');\r\n                    jexcel.current.setHeight(jexcel.current.resizing.row, newHeight, jexcel.current.resizing.height);\r\n                    // Remove border\r\n                    jexcel.current.resizing.element.classList.remove('resizing');\r\n                }\r\n                // Reset resizing helper\r\n                jexcel.current.resizing = null;\r\n            } else if (jexcel.current.dragging) {\r\n                // Reset dragging helper\r\n                if (jexcel.current.dragging) {\r\n                    if (jexcel.current.dragging.column) {\r\n                        // Target\r\n                        var columnId = e.target.getAttribute('data-x');\r\n                        // Remove move style\r\n                        jexcel.current.headers[jexcel.current.dragging.column].classList.remove('dragging');\r\n                        for (var j = 0; j < jexcel.current.rows.length; j++) {\r\n                            if (jexcel.current.records[j][jexcel.current.dragging.column]) {\r\n                                jexcel.current.records[j][jexcel.current.dragging.column].classList.remove('dragging');\r\n                            }\r\n                        }\r\n                        for (var i = 0; i < jexcel.current.headers.length; i++) {\r\n                            jexcel.current.headers[i].classList.remove('dragging-left');\r\n                            jexcel.current.headers[i].classList.remove('dragging-right');\r\n                        }\r\n                        // Update position\r\n                        if (columnId) {\r\n                            if (jexcel.current.dragging.column != jexcel.current.dragging.destination) {\r\n                                jexcel.current.moveColumn(jexcel.current.dragging.column, jexcel.current.dragging.destination);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (jexcel.current.dragging.element.nextSibling) {\r\n                            var position = parseInt(jexcel.current.dragging.element.nextSibling.getAttribute('data-y'));\r\n                            if (jexcel.current.dragging.row < position) {\r\n                                position -= 1;\r\n                            }\r\n                        } else {\r\n                            var position = parseInt(jexcel.current.dragging.element.previousSibling.getAttribute('data-y'));\r\n                        }\r\n                        if (jexcel.current.dragging.row != jexcel.current.dragging.destination) {\r\n                            jexcel.current.moveRow(jexcel.current.dragging.row, position, true);\r\n                        }\r\n                        jexcel.current.dragging.element.classList.remove('dragging');\r\n                    }\r\n                    jexcel.current.dragging = null;\r\n                }\r\n            } else {\r\n                // Close any corner selection\r\n                if (jexcel.current.selectedCorner) {\r\n                    jexcel.current.selectedCorner = false;\r\n    \r\n                    // Data to be copied\r\n                    if (jexcel.current.selection.length > 0) {\r\n                        // Copy data\r\n                        jexcel.current.copyData(jexcel.current.selection[0], jexcel.current.selection[jexcel.current.selection.length - 1]);\r\n    \r\n                        // Remove selection\r\n                        jexcel.current.removeCopySelection();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Clear any time control\r\n        if (jexcel.timeControl) {\r\n            clearTimeout(jexcel.timeControl);\r\n            jexcel.timeControl = null;\r\n        }\r\n    \r\n        // Mouse up\r\n        jexcel.isMouseAction = false;\r\n    }\r\n    \r\n    // Mouse move controls\r\n    jexcel.mouseMoveControls = function(e) {\r\n        e = e || window.event;\r\n        if (e.buttons) {\r\n            var mouseButton = e.buttons;\r\n        } else if (e.button) {\r\n            var mouseButton = e.button;\r\n        } else {\r\n            var mouseButton = e.which;\r\n        }\r\n    \r\n        if (! mouseButton) {\r\n            jexcel.isMouseAction = false;\r\n        }\r\n    \r\n        if (jexcel.current) {\r\n            if (jexcel.isMouseAction == true) {\r\n                // Resizing is ongoing\r\n                if (jexcel.current.resizing) {\r\n                    if (jexcel.current.resizing.column) {\r\n                        var width = e.pageX - jexcel.current.resizing.mousePosition;\r\n    \r\n                        if (jexcel.current.resizing.width + width > 0) {\r\n                            var tempWidth = jexcel.current.resizing.width + width;\r\n                            jexcel.current.colgroup[jexcel.current.resizing.column].setAttribute('width', tempWidth);\r\n    \r\n                            jexcel.current.updateCornerPosition();\r\n                        }\r\n                    } else {\r\n                        var height = e.pageY - jexcel.current.resizing.mousePosition;\r\n    \r\n                        if (jexcel.current.resizing.height + height > 0) {\r\n                            var tempHeight = jexcel.current.resizing.height + height;\r\n                            jexcel.current.rows[jexcel.current.resizing.row].setAttribute('height', tempHeight);\r\n    \r\n                            jexcel.current.updateCornerPosition();\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                var x = e.target.getAttribute('data-x');\r\n                var y = e.target.getAttribute('data-y');\r\n                var rect = e.target.getBoundingClientRect();\r\n    \r\n                if (jexcel.current.cursor) {\r\n                    jexcel.current.cursor.style.cursor = '';\r\n                    jexcel.current.cursor = null;\r\n                }\r\n\r\n                if (e.target.parentNode.parentNode && e.target.parentNode.parentNode.className) {\r\n                    if (e.target.parentNode.parentNode.classList.contains('resizable')) {\r\n                        if (e.target && x && ! y && (rect.width - (e.clientX - rect.left) < 6)) {\r\n                            jexcel.current.cursor = e.target;\r\n                            jexcel.current.cursor.style.cursor = 'col-resize';\r\n                        } else if (e.target && ! x && y && (rect.height - (e.clientY - rect.top) < 6)) {\r\n                            jexcel.current.cursor = e.target;\r\n                            jexcel.current.cursor.style.cursor = 'row-resize';\r\n                        }\r\n                    }\r\n    \r\n                    if (e.target.parentNode.parentNode.classList.contains('draggable')) {\r\n                        if (e.target && ! x && y && (rect.width - (e.clientX - rect.left) < 6)) {\r\n                            jexcel.current.cursor = e.target;\r\n                            jexcel.current.cursor.style.cursor = 'move';\r\n                        } else if (e.target && x && ! y && (rect.height - (e.clientY - rect.top) < 6)) {\r\n                            jexcel.current.cursor = e.target;\r\n                            jexcel.current.cursor.style.cursor = 'move';\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    jexcel.mouseOverControls = function(e) {\r\n        e = e || window.event;\r\n        if (e.buttons) {\r\n            var mouseButton = e.buttons;\r\n        } else if (e.button) {\r\n            var mouseButton = e.button;\r\n        } else {\r\n            var mouseButton = e.which;\r\n        }\r\n    \r\n        if (! mouseButton) {\r\n            jexcel.isMouseAction = false;\r\n        }\r\n    \r\n        if (jexcel.current && jexcel.isMouseAction == true) {\r\n            // Get elements\r\n            var jexcelTable = jexcel.getElement(e.target);\r\n    \r\n            if (jexcelTable[0]) {\r\n                // Avoid cross reference\r\n                if (jexcel.current != jexcelTable[0].jexcel) {\r\n                    if (jexcel.current) {\r\n                        return false;\r\n                    }\r\n                }\r\n    \r\n                var columnId = e.target.getAttribute('data-x');\r\n                var rowId = e.target.getAttribute('data-y');\r\n    \r\n                if (jexcel.current.dragging) {\r\n                    if (jexcel.current.dragging.column) {\r\n                        if (columnId) {\r\n                            if (jexcel.current.isColMerged(columnId).length) {\r\n                                console.error('JEXCEL: This column is part of a merged cell.');\r\n                            } else {\r\n                                for (var i = 0; i < jexcel.current.headers.length; i++) {\r\n                                    jexcel.current.headers[i].classList.remove('dragging-left');\r\n                                    jexcel.current.headers[i].classList.remove('dragging-right');\r\n                                }\r\n    \r\n                                if (jexcel.current.dragging.column == columnId) {\r\n                                    jexcel.current.dragging.destination = parseInt(columnId);\r\n                                } else {\r\n                                    if (e.target.clientWidth / 2 > e.offsetX) {\r\n                                        if (jexcel.current.dragging.column < columnId) {\r\n                                            jexcel.current.dragging.destination = parseInt(columnId) - 1;\r\n                                        } else {\r\n                                            jexcel.current.dragging.destination = parseInt(columnId);\r\n                                        }\r\n                                        jexcel.current.headers[columnId].classList.add('dragging-left');\r\n                                    } else {\r\n                                        if (jexcel.current.dragging.column < columnId) {\r\n                                            jexcel.current.dragging.destination = parseInt(columnId);\r\n                                        } else {\r\n                                            jexcel.current.dragging.destination = parseInt(columnId) + 1;\r\n                                        }\r\n                                        jexcel.current.headers[columnId].classList.add('dragging-right');\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (rowId) {\r\n                            if (jexcel.current.isRowMerged(rowId).length) {\r\n                                console.error('JEXCEL: This row is part of a merged cell.');\r\n                            } else {\r\n                                var target = (e.target.clientHeight / 2 > e.offsetY) ? e.target.parentNode.nextSibling : e.target.parentNode;\r\n                                if (jexcel.current.dragging.element != target) {\r\n                                    e.target.parentNode.parentNode.insertBefore(jexcel.current.dragging.element, target);\r\n                                    jexcel.current.dragging.destination = Array.prototype.indexOf.call(jexcel.current.dragging.element.parentNode.children, jexcel.current.dragging.element);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (jexcel.current.resizing) {\r\n                } else {\r\n                    // Header found\r\n                    if (jexcelTable[1] == 1) {\r\n                        if (jexcel.current.selectedHeader) {\r\n                            var columnId = e.target.getAttribute('data-x');\r\n                            var o = jexcel.current.selectedHeader;\r\n                            var d = columnId;\r\n                            // Update selection\r\n                            jexcel.current.updateSelectionFromCoords(o, 0, d, jexcel.current.options.data.length - 1);\r\n                        }\r\n                    }\r\n    \r\n                    // Body found\r\n                    if (jexcelTable[1] == 2) {\r\n                        if (e.target.classList.contains('jexcel_row')) {\r\n                            if (jexcel.current.selectedRow) {\r\n                                var o = jexcel.current.selectedRow;\r\n                                var d = rowId;\r\n                                // Update selection\r\n                                jexcel.current.updateSelectionFromCoords(0, o, jexcel.current.options.data[0].length - 1, d);\r\n                            }\r\n                        } else {\r\n                            // Do not select edtion is in progress\r\n                            if (! jexcel.current.edition) {\r\n                                if (columnId && rowId) {\r\n                                    if (jexcel.current.selectedCorner) {\r\n                                        jexcel.current.updateCopySelection(columnId, rowId);\r\n                                    } else {\r\n                                        if (jexcel.current.selectedCell) {\r\n                                            jexcel.current.updateSelectionFromCoords(jexcel.current.selectedCell[0], jexcel.current.selectedCell[1], columnId, rowId);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    \r\n        // Clear any time control\r\n        if (jexcel.timeControl) {\r\n            clearTimeout(jexcel.timeControl);\r\n            jexcel.timeControl = null;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Double click event handler: controls the double click in the corner, cell edition or column re-ordering.\r\n     */\r\n    jexcel.doubleClickControls = function(e) {\r\n        // Jexcel is selected\r\n        if (jexcel.current) {\r\n            // Corner action\r\n            if (e.target.classList.contains('jexcel_corner')) {\r\n                // Any selected cells\r\n                if (jexcel.current.highlighted.length > 0) {\r\n                    // Copy from this\r\n                    var x1 = jexcel.current.highlighted[0].getAttribute('data-x');\r\n                    var y1 = parseInt(jexcel.current.highlighted[jexcel.current.highlighted.length - 1].getAttribute('data-y')) + 1;\r\n                    // Until this\r\n                    var x2 = jexcel.current.highlighted[jexcel.current.highlighted.length - 1].getAttribute('data-x');\r\n                    var y2 = jexcel.current.records.length - 1\r\n                    // Execute copy\r\n                    jexcel.current.copyData(jexcel.current.records[y1][x1], jexcel.current.records[y2][x2]);\r\n                }\r\n            } else if (e.target.classList.contains('jexcel_column_filter')) {\r\n                // Column\r\n                var columnId = e.target.getAttribute('data-x');\r\n                // Open filter\r\n                jexcel.current.openFilter(columnId);\r\n                \r\n            } else {\r\n                // Get table\r\n                var jexcelTable = jexcel.getElement(e.target);\r\n    \r\n                // Double click over header\r\n                if (jexcelTable[1] == 1 && jexcel.current.options.columnSorting == true) {\r\n                    // Check valid column header coords\r\n                    var columnId = e.target.getAttribute('data-x');\r\n                    if (columnId) {\r\n                        jexcel.current.orderBy(columnId);\r\n                    }\r\n                }\r\n    \r\n                // Double click over body\r\n                if (jexcelTable[1] == 2 && jexcel.current.options.editable == true) {\r\n                    if (! jexcel.current.edition) {\r\n                        var getCellCoords = function(element) {\r\n                            if (element.parentNode) {\r\n                                var x = element.getAttribute('data-x');\r\n                                var y = element.getAttribute('data-y');\r\n                                if (x && y) {\r\n                                    return element;\r\n                                } else {\r\n                                    return getCellCoords(element.parentNode);\r\n                                }\r\n                            }\r\n                        }\r\n                        var cell = getCellCoords(e.target);\r\n                        if (cell && cell.classList.contains('highlight')) {\r\n                            jexcel.current.openEditor(cell);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    jexcel.copyControls = function(e) {\r\n        if (jexcel.current && jexcel.copyControls.enabled) {\r\n            if (! jexcel.current.edition) {\r\n                jexcel.current.copy(true);\r\n            }\r\n        }\r\n    }\r\n    \r\n    jexcel.cutControls = function(e) {\r\n        if (jexcel.current) {\r\n            if (! jexcel.current.edition) {\r\n                jexcel.current.copy(true);\r\n                if (jexcel.current.options.editable == true) {\r\n                    jexcel.current.setValue(jexcel.current.highlighted, '');\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    jexcel.pasteControls = function(e) {\r\n        if (jexcel.current && jexcel.current.selectedCell) {\r\n            if (! jexcel.current.edition) {\r\n                if (jexcel.current.options.editable == true) {\r\n                    if (e && e.clipboardData) {\r\n                        jexcel.current.paste(jexcel.current.selectedCell[0], jexcel.current.selectedCell[1], e.clipboardData.getData('text'));\r\n                        e.preventDefault();\r\n                    } else if (window.clipboardData) {\r\n                        jexcel.current.paste(jexcel.current.selectedCell[0], jexcel.current.selectedCell[1], window.clipboardData.getData('text'));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    jexcel.contextMenuControls = function(e) {\r\n        e = e || window.event;\r\n        if (\"buttons\" in e) {\r\n            var mouseButton = e.buttons;\r\n        } else {\r\n            var mouseButton = e.which || e.button;\r\n        }\r\n    \r\n        if (jexcel.current) {\r\n            if (jexcel.current.edition) {\r\n                e.preventDefault();\r\n            } else if (jexcel.current.options.contextMenu) {\r\n                jexcel.current.contextMenu.contextmenu.close();\r\n    \r\n                if (jexcel.current) {\r\n                    var x = e.target.getAttribute('data-x');\r\n                    var y = e.target.getAttribute('data-y');\r\n    \r\n                    if (x || y) {\r\n                        if ((x < parseInt(jexcel.current.selectedCell[0])) || (x > parseInt(jexcel.current.selectedCell[2])) ||\r\n                            (y < parseInt(jexcel.current.selectedCell[1])) || (y > parseInt(jexcel.current.selectedCell[3])))\r\n                        {\r\n                            jexcel.current.updateSelectionFromCoords(x, y, x, y);\r\n                        }\r\n\r\n                        // Table found\r\n                        var items = jexcel.current.options.contextMenu(jexcel.current, x, y, e);\r\n                        // The id is depending on header and body\r\n                        jexcel.current.contextMenu.contextmenu.open(e, items);\r\n                        // Avoid the real one\r\n                        e.preventDefault();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    jexcel.touchStartControls = function(e) {\r\n        var jexcelTable = jexcel.getElement(e.target);\r\n    \r\n        if (jexcelTable[0]) {\r\n            if (jexcel.current != jexcelTable[0].jexcel) {\r\n                if (jexcel.current) {\r\n                    jexcel.current.resetSelection();\r\n                }\r\n                jexcel.current = jexcelTable[0].jexcel;\r\n            }\r\n        } else {\r\n            if (jexcel.current) {\r\n                jexcel.current.resetSelection();\r\n                jexcel.current = null;\r\n            }\r\n        }\r\n    \r\n        if (jexcel.current) {\r\n            if (! jexcel.current.edition) {\r\n                var columnId = e.target.getAttribute('data-x');\r\n                var rowId = e.target.getAttribute('data-y');\r\n    \r\n                if (columnId && rowId) {\r\n                    jexcel.current.updateSelectionFromCoords(columnId, rowId);\r\n    \r\n                    jexcel.timeControl = setTimeout(function() {\r\n                        // Keep temporary reference to the element\r\n                        if (jexcel.current.options.columns[columnId].type == 'color') {\r\n                            jexcel.tmpElement = null;\r\n                        } else {\r\n                            jexcel.tmpElement = e.target;\r\n                        }\r\n                        jexcel.current.openEditor(e.target, false, e);\r\n                    }, 500);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    jexcel.touchEndControls = function(e) {\r\n        // Clear any time control\r\n        if (jexcel.timeControl) {\r\n            clearTimeout(jexcel.timeControl);\r\n            jexcel.timeControl = null;\r\n            // Element\r\n            if (jexcel.tmpElement && jexcel.tmpElement.children[0].tagName == 'INPUT') {\r\n                jexcel.tmpElement.children[0].focus();\r\n            }\r\n            jexcel.tmpElement = null;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Jexcel extensions\r\n     */\r\n    \r\n    jexcel.tabs = function(tabs, result) {\r\n        var instances = [];\r\n        // Create tab container\r\n        if (! tabs.classList.contains('jexcel_tabs')) {\r\n            tabs.innerHTML = '';\r\n            tabs.classList.add('jexcel_tabs')\r\n            tabs.jexcel = [];\r\n\r\n            var div = document.createElement('div');\r\n            var headers = tabs.appendChild(div);\r\n            var div = document.createElement('div');\r\n            var content = tabs.appendChild(div);\r\n        } else {\r\n            var headers = tabs.children[0];\r\n            var content = tabs.children[1];\r\n        }\r\n\r\n        var spreadsheet = []\r\n        var link = [];\r\n        for (var i = 0; i < result.length; i++) {\r\n            // Spreadsheet container\r\n            spreadsheet[i] = document.createElement('div');\r\n            spreadsheet[i].classList.add('jexcel_tab');\r\n            var worksheet = jexcel(spreadsheet[i], result[i]);\r\n            content.appendChild(spreadsheet[i]);\r\n            instances[i] = tabs.jexcel.push(worksheet);\r\n\r\n            // Tab link\r\n            link[i] = document.createElement('div');\r\n            link[i].classList.add('jexcel_tab_link');\r\n            link[i].setAttribute('data-spreadsheet', tabs.jexcel.length-1);\r\n            link[i].innerHTML = result[i].sheetName;\r\n            link[i].onclick = function() {\r\n                for (var j = 0; j < headers.children.length; j++) {\r\n                    headers.children[j].classList.remove('selected');\r\n                    content.children[j].style.display = 'none';\r\n                }\r\n                var i = this.getAttribute('data-spreadsheet');\r\n                content.children[i].style.display = 'block';\r\n                headers.children[i].classList.add('selected')\r\n            }\r\n            headers.appendChild(link[i]);\r\n        }\r\n\r\n        // First tab\r\n        for (var j = 0; j < headers.children.length; j++) {\r\n            headers.children[j].classList.remove('selected');\r\n            content.children[j].style.display = 'none';\r\n        }\r\n        headers.children[headers.children.length - 1].classList.add('selected');\r\n        content.children[headers.children.length - 1].style.display = 'block';\r\n\r\n        return instances;\r\n    }\r\n\r\n    // Compability to older versions\r\n    jexcel.createTabs = jexcel.tabs;\r\n\r\n    jexcel.fromSpreadsheet = function(file, __callback) {\r\n        var convert = function(workbook) {\r\n            var spreadsheets = [];\r\n            workbook.SheetNames.forEach(function(sheetName) {\r\n                var spreadsheet = {};\r\n                spreadsheet.rows = [];\r\n                spreadsheet.columns = [];\r\n                spreadsheet.data = [];\r\n                spreadsheet.style = {};\r\n                spreadsheet.sheetName = sheetName;\r\n    \r\n                // Column widths\r\n                var temp = workbook.Sheets[sheetName]['!cols'];\r\n                if (temp && temp.length) {\r\n                    for (var i = 0; i < temp.length; i++) {\r\n                        spreadsheet.columns[i] = {};\r\n                        if (temp[i] && temp[i].wpx) {\r\n                            spreadsheet.columns[i].width = temp[i].wpx + 'px';\r\n                        }\r\n                     }\r\n                }\r\n                // Rows heights\r\n                var temp = workbook.Sheets[sheetName]['!rows'];\r\n                if (temp && temp.length) {\r\n                    for (var i = 0; i < temp.length; i++) {\r\n                        if (temp[i] && temp[i].hpx) {\r\n                            spreadsheet.rows[i] = {};\r\n                            spreadsheet.rows[i].height = temp[i].hpx + 'px';\r\n                        }\r\n                    }\r\n                }\r\n                // Merge cells\r\n                var temp = workbook.Sheets[sheetName]['!merges'];\r\n                if (temp && temp.length > 0) {\r\n                    spreadsheet.mergeCells = [];\r\n                    for (var i = 0; i < temp.length; i++) {\r\n                        var x1 = temp[i].s.c;\r\n                        var y1 = temp[i].s.r;\r\n                        var x2 = temp[i].e.c;\r\n                        var y2 = temp[i].e.r;\r\n                        var key = jexcel.getColumnNameFromId([x1,y1]);\r\n                        spreadsheet.mergeCells[key] = [ x2-x1+1, y2-y1+1 ];\r\n                    }\r\n                }\r\n                // Data container\r\n                var max_x = 0;\r\n                var max_y = 0;\r\n                var temp = Object.keys(workbook.Sheets[sheetName]);\r\n                for (var i = 0; i < temp.length; i++) {\r\n                    if (temp[i].substr(0,1) != '!') {\r\n                        var cell = workbook.Sheets[sheetName][temp[i]];\r\n                        var info = jexcel.getIdFromColumnName(temp[i], true);\r\n                        if (! spreadsheet.data[info[1]]) {\r\n                            spreadsheet.data[info[1]] = [];\r\n                        }\r\n                        spreadsheet.data[info[1]][info[0]] = cell.f ? '=' + cell.f : cell.w;\r\n                        if (max_x < info[0]) {\r\n                            max_x = info[0];\r\n                        }\r\n                        if (max_y < info[1]) {\r\n                            max_y = info[1];\r\n                        }\r\n                        // Style\r\n                        if (cell.style && Object.keys(cell.style).length > 0) {\r\n                            spreadsheet.style[temp[i]] = cell.style;\r\n                        }\r\n                        if (cell.s && cell.s.fgColor) {\r\n                            if (spreadsheet.style[temp[i]]) {\r\n                                spreadsheet.style[temp[i]] += ';';\r\n                            }\r\n                            spreadsheet.style[temp[i]] += 'background-color:#' + cell.s.fgColor.rgb;\r\n                        }\r\n                    }\r\n                }\r\n                var numColumns = spreadsheet.columns;\r\n                for (var j = 0; j <= max_y; j++) {\r\n                    for (var i = 0; i <= max_x; i++) {\r\n                        if (! spreadsheet.data[j]) {\r\n                            spreadsheet.data[j] = [];\r\n                        }\r\n                        if (! spreadsheet.data[j][i]) {\r\n                            if (numColumns < i) {\r\n                                spreadsheet.data[j][i] = '';\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                spreadsheets.push(spreadsheet);\r\n            });\r\n    \r\n            return spreadsheets;\r\n        }\r\n    \r\n        var oReq;\r\n        oReq = new XMLHttpRequest();\r\n        oReq.open(\"GET\", file, true);\r\n    \r\n        if(typeof Uint8Array !== 'undefined') {\r\n            oReq.responseType = \"arraybuffer\";\r\n            oReq.onload = function(e) {\r\n                var arraybuffer = oReq.response;\r\n                var data = new Uint8Array(arraybuffer);\r\n                var wb = XLSX.read(data, {type:\"array\", cellFormula:true, cellStyles:true });\r\n                __callback(convert(wb))\r\n            };\r\n        } else {\r\n            oReq.setRequestHeader(\"Accept-Charset\", \"x-user-defined\");  \r\n            oReq.onreadystatechange = function() { if(oReq.readyState == 4 && oReq.status == 200) {\r\n                var ff = convertResponseBodyToText(oReq.responseBody);\r\n                var wb = XLSX.read(ff, {type:\"binary\", cellFormula:true, cellStyles:true });\r\n                __callback(convert(wb))\r\n            }};\r\n        }\r\n    \r\n        oReq.send();\r\n    }\r\n    \r\n    /**\r\n     * Valid international letter\r\n     */\r\n    \r\n    jexcel.validLetter = function (text) {\r\n        var regex = /([\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC-\\u0400-\\u04FF']+)/g;\r\n        return text.match(regex) ? 1 : 0;\r\n    }\r\n    \r\n    /**\r\n     * Helper injectArray\r\n     */\r\n    jexcel.injectArray = function(o, idx, arr) {\r\n        return o.slice(0, idx).concat(arr).concat(o.slice(idx));\r\n    }\r\n    \r\n    /**\r\n     * Get letter based on a number\r\n     * \r\n     * @param integer i\r\n     * @return string letter\r\n     */\r\n    jexcel.getColumnName = function(i) {\r\n        var letter = '';\r\n        if (i > 701) {\r\n            letter += String.fromCharCode(64 + parseInt(i / 676));\r\n            letter += String.fromCharCode(64 + parseInt((i % 676) / 26));\r\n        } else if (i > 25) {\r\n            letter += String.fromCharCode(64 + parseInt(i / 26));\r\n        }\r\n        letter += String.fromCharCode(65 + (i % 26));\r\n    \r\n        return letter;\r\n    }\r\n    \r\n    /**\r\n     * Convert excel like column to jexcel id\r\n     * \r\n     * @param string id\r\n     * @return string id\r\n     */\r\n    jexcel.getIdFromColumnName = function (id, arr) {\r\n        // Get the letters\r\n        var t = /^[a-zA-Z]+/.exec(id);\r\n    \r\n        if (t) {\r\n            // Base 26 calculation\r\n            var code = 0;\r\n            for (var i = 0; i < t[0].length; i++) {\r\n                code += parseInt(t[0].charCodeAt(i) - 64) * Math.pow(26, (t[0].length - 1 - i));\r\n            }\r\n            code--;\r\n            // Make sure jexcel starts on zero\r\n            if (code < 0) {\r\n                code = 0;\r\n            }\r\n    \r\n            // Number\r\n            var number = parseInt(/[0-9]+$/.exec(id));\r\n            if (number > 0) {\r\n                number--;\r\n            }\r\n    \r\n            if (arr == true) {\r\n                id = [ code, number ];\r\n            } else {\r\n                id = code + '-' + number;\r\n            }\r\n        }\r\n    \r\n        return id;\r\n    }\r\n    \r\n    /**\r\n     * Convert jexcel id to excel like column name\r\n     * \r\n     * @param string id\r\n     * @return string id\r\n     */\r\n    jexcel.getColumnNameFromId = function (cellId) {\r\n        if (! Array.isArray(cellId)) {\r\n            cellId = cellId.split('-');\r\n        }\r\n    \r\n        return jexcel.getColumnName(parseInt(cellId[0])) + (parseInt(cellId[1]) + 1);\r\n    }\r\n    \r\n    /**\r\n     * Verify element inside jexcel table\r\n     * \r\n     * @param string id\r\n     * @return string id\r\n     */\r\n    jexcel.getElement = function(element) {\r\n        var jexcelSection = 0;\r\n        var jexcelElement = 0;\r\n    \r\n        function path (element) {\r\n            if (element.className) {\r\n                if (element.classList.contains('jexcel_container')) {\r\n                    jexcelElement = element;\r\n                }\r\n            }\r\n    \r\n            if (element.tagName == 'THEAD') {\r\n                jexcelSection = 1;\r\n            } else if (element.tagName == 'TBODY') {\r\n                jexcelSection = 2;\r\n            }\r\n    \r\n            if (element.parentNode) {\r\n                if (! jexcelElement) {\r\n                    path(element.parentNode);\r\n                }\r\n            }\r\n        }\r\n    \r\n        path(element);\r\n    \r\n        return [ jexcelElement, jexcelSection ];\r\n    }\r\n\r\n    jexcel.doubleDigitFormat = function(v) {\r\n        v = ''+v;\r\n        if (v.length == 1) {\r\n            v = '0'+v;\r\n        }\r\n        return v;\r\n    }\r\n\r\n    jexcel.createFromTable = function(el, options) {\r\n        if (el.tagName != 'TABLE') {\r\n            console.log('Element is not a table');\r\n        } else {\r\n            // Configuration\r\n            if (! options) {\r\n                options = {};\r\n            }\r\n            options.columns = [];\r\n            options.data = [];\r\n\r\n            // Colgroup\r\n            var colgroup = el.querySelectorAll('colgroup > col');\r\n            if (colgroup.length) {\r\n                // Get column width\r\n                for (var i = 0; i < colgroup.length; i++) {\r\n                    var width = colgroup[i].style.width;\r\n                    if (! width) {\r\n                        var width = colgroup[i].getAttribute('width');\r\n                    }\r\n                    // Set column width\r\n                    if (width) {\r\n                        if (! options.columns[i]) {\r\n                            options.columns[i] = {}\r\n                        }\r\n                        options.columns[i].width = width;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Parse header\r\n            var parseHeader = function(header) {\r\n                // Get width information\r\n                var info = header.getBoundingClientRect();\r\n                var width = info.width > 50 ? info.width : 50;\r\n\r\n                // Create column option\r\n                if (! options.columns[i]) {\r\n                    options.columns[i] = {};\r\n                } \r\n                if (header.getAttribute('data-celltype')) {\r\n                    options.columns[i].type = header.getAttribute('data-celltype');\r\n                } else {\r\n                    options.columns[i].type = 'text';\r\n                }\r\n                options.columns[i].width = width + 'px';\r\n                options.columns[i].title = header.innerHTML;\r\n                options.columns[i].align = header.style.textAlign || 'center';\r\n            }\r\n\r\n            // Headers\r\n            var headers = el.querySelectorAll('thead > tr');\r\n            if (headers.length) {\r\n                // Get the last row in the thead\r\n                headers = headers[headers.length-1].children;\r\n                // Go though the headers\r\n                for (var i = 0; i < headers.length; i++) {\r\n                    parseHeader(headers[i]);\r\n                }\r\n            }\r\n\r\n            // Content\r\n            var rowNumber = 0;\r\n            var mergeCells = {};\r\n            var rows = {};\r\n            var style = {};\r\n\r\n            var content = el.querySelectorAll('table > tr, tbody tr');\r\n            for (var j = 0; j < content.length; j++) {\r\n                options.data[rowNumber] = [];\r\n                if (options.parseTableFirstRowAsHeader == true && j == 0) {\r\n                    for (var i = 0; i < content[j].children.length; i++) {\r\n                        parseHeader(content[j].children[i]);\r\n                    }\r\n                } else {\r\n                    for (var i = 0; i < content[j].children.length; i++) {\r\n                        // WickedGrid formula compatibility\r\n                        var value = content[j].children[i].getAttribute('data-formula');\r\n                        if (value) {\r\n                            if (value.substr(0,1) != '=') {\r\n                                value = '=' + value;\r\n                            }\r\n                        } else {\r\n                            var value = content[j].children[i].innerHTML;\r\n                        }\r\n                        options.data[rowNumber].push(value);\r\n\r\n                        // Key\r\n                        var cellName = jexcel.getColumnNameFromId([ i, j ]);\r\n\r\n                        // Merged cells\r\n                        var mergedColspan = parseInt(content[j].children[i].getAttribute('colspan')) || 0;\r\n                        var mergedRowspan = parseInt(content[j].children[i].getAttribute('rowspan')) || 0;\r\n                        if (mergedColspan || mergedRowspan) {\r\n                            mergeCells[cellName] = [ mergedColspan || 1, mergedRowspan || 1 ];\r\n                        }\r\n\r\n                        // Avoid problems with hidden cells\r\n                        if (s = content[j].children[i].style && content[j].children[i].style.display == 'none') {\r\n                            content[j].children[i].style.display = '';\r\n                        }\r\n                        // Get style\r\n                        var s = content[j].children[i].getAttribute('style');\r\n                        if (s) {\r\n                            style[cellName] = s;\r\n                        }\r\n                        // Bold\r\n                        if (content[j].children[i].classList.contains('styleBold')) {\r\n                            if (style[cellName]) {\r\n                                style[cellName] += '; font-weight:bold;';\r\n                            } else {\r\n                                style[cellName] = 'font-weight:bold;';\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Row Height\r\n                    if (content[j].style && content[j].style.height) {\r\n                        rows[j] = { height: content[j].style.height };\r\n                    }\r\n\r\n                    // Index\r\n                    rowNumber++;\r\n                }\r\n            }\r\n\r\n            // Style\r\n            if (Object.keys(style).length > 0) {\r\n                //options.style = style;\r\n            }\r\n            // Merged\r\n            if (Object.keys(mergeCells).length > 0) {\r\n                options.mergeCells = mergeCells;\r\n            }\r\n            // Row height\r\n            if (Object.keys(rows).length > 0) {\r\n                options.rows = rows;\r\n            }\r\n\r\n            // TODO: data-hiddencolumns=\"3,4\"\r\n            \r\n            // I guess in terms the better column type\r\n            if (options.parseTableAutoCellType == true) {\r\n                var pattern = [];\r\n                for (var i = 0; i < options.columns.length; i++) {\r\n                    var test = true;\r\n                    var testCalendar = true;\r\n                    pattern[i] = [];\r\n                    for (var j = 0; j < options.data.length; j++) {\r\n                        var value = options.data[j][i];\r\n                        if (! pattern[i][value]) {\r\n                            pattern[i][value] = 0;\r\n                        }\r\n                        pattern[i][value]++;\r\n                        if (value.length > 25) {\r\n                            test = false;\r\n                        }\r\n                        if (value.length == 10) {\r\n                            if (! (value.substr(4,1) == '-' && value.substr(7,1) == '-')) {\r\n                                testCalendar = false;\r\n                            }\r\n                        } else {\r\n                            testCalendar = false;\r\n                        }\r\n                    }\r\n\r\n                    var keys = Object.keys(pattern[i]).length;\r\n                    if (testCalendar) {\r\n                        options.columns[i].type = 'calendar';\r\n                    } else if (test == true && keys > 1 && keys <= parseInt(options.data.length * 0.1)) {\r\n                        options.columns[i].type = 'dropdown';\r\n                        options.columns[i].source = Object.keys(pattern[i]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return options;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Jquery Support\r\n     */\r\n    if (typeof(jQuery) != 'undefined') {\r\n        (function($){\r\n            $.fn.jexcel = function(method) {\r\n                var spreadsheetContainer = $(this).get(0);\r\n                if (! spreadsheetContainer.jexcel) {\r\n                    return jexcel($(this).get(0), arguments[0]);\r\n                } else {\r\n                    return spreadsheetContainer.jexcel[method].apply(this, Array.prototype.slice.call( arguments, 1 ));\r\n                }\r\n            };\r\n    \r\n        })(jQuery);\r\n    }\r\n    \r\n    \r\n    // Based on sutoiku work (https://github.com/sutoiku)\r\n    \r\n    var error = (function() {\r\n        var exports = {};\r\n    \r\n        exports.nil = new Error('#NULL!');\r\n        exports.div0 = new Error('#DIV/0!');\r\n        exports.value = new Error('#VALUE!');\r\n        exports.ref = new Error('#REF!');\r\n        exports.name = new Error('#NAME?');\r\n        exports.num = new Error('#NUM!');\r\n        exports.na = new Error('#N/A');\r\n        exports.error = new Error('#ERROR!');\r\n        exports.data = new Error('#GETTING_DATA');\r\n    \r\n        return exports;\r\n    })();\r\n    \r\n    var utils = (function() {\r\n        var exports = {};\r\n    \r\n        exports.flattenShallow = function(array) {\r\n            if (!array || !array.reduce) {\r\n                return array;\r\n            }\r\n    \r\n            return array.reduce(function(a, b) {\r\n                var aIsArray = Array.isArray(a);\r\n                var bIsArray = Array.isArray(b);\r\n    \r\n                if (aIsArray && bIsArray) {\r\n                    return a.concat(b);\r\n                }\r\n                if (aIsArray) {\r\n                    a.push(b);\r\n    \r\n                    return a;\r\n                }\r\n                if (bIsArray) {\r\n                    return [ a ].concat(b);\r\n                }\r\n    \r\n                return [ a, b ];\r\n            });\r\n        };\r\n    \r\n        exports.isFlat = function(array) {\r\n            if (!array) {\r\n                return false;\r\n            }\r\n    \r\n            for (var i = 0; i < array.length; ++i) {\r\n                if (Array.isArray(array[i])) {\r\n                    return false;\r\n                }\r\n            }\r\n    \r\n            return true;\r\n        };\r\n    \r\n        exports.flatten = function() {\r\n            var result = exports.argsToArray.apply(null, arguments);\r\n    \r\n            while (!exports.isFlat(result)) {\r\n                result = exports.flattenShallow(result);\r\n            }\r\n    \r\n            return result;\r\n        };\r\n    \r\n        exports.argsToArray = function(args) {\r\n            var result = [];\r\n    \r\n            exports.arrayEach(args, function(value) {\r\n                result.push(value);\r\n            });\r\n    \r\n            return result;\r\n        };\r\n    \r\n        exports.numbers = function() {\r\n            var possibleNumbers = this.flatten.apply(null, arguments);\r\n            return possibleNumbers.filter(function(el) {\r\n                return typeof el === 'number';\r\n            });\r\n        };\r\n    \r\n        exports.cleanFloat = function(number) {\r\n            var power = 1e14;\r\n            return Math.round(number * power) / power;\r\n        };\r\n    \r\n        exports.parseBool = function(bool) {\r\n            if (typeof bool === 'boolean') {\r\n                return bool;\r\n            }\r\n    \r\n            if (bool instanceof Error) {\r\n                return bool;\r\n            }\r\n    \r\n            if (typeof bool === 'number') {\r\n                return bool !== 0;\r\n            }\r\n    \r\n            if (typeof bool === 'string') {\r\n                var up = bool.toUpperCase();\r\n                if (up === 'TRUE') {\r\n                    return true;\r\n                }\r\n    \r\n                if (up === 'FALSE') {\r\n                    return false;\r\n                }\r\n            }\r\n    \r\n            if (bool instanceof Date && !isNaN(bool)) {\r\n                return true;\r\n            }\r\n    \r\n            return error.value;\r\n        };\r\n    \r\n        exports.parseNumber = function(string) {\r\n            if (string === undefined || string === '') {\r\n                return error.value;\r\n            }\r\n            if (!isNaN(string)) {\r\n                return parseFloat(string);\r\n            }\r\n    \r\n            return error.value;\r\n        };\r\n    \r\n        exports.parseNumberArray = function(arr) {\r\n            var len;\r\n    \r\n            if (!arr || (len = arr.length) === 0) {\r\n                return error.value;\r\n            }\r\n    \r\n            var parsed;\r\n    \r\n            while (len--) {\r\n                parsed = exports.parseNumber(arr[len]);\r\n                if (parsed === error.value) {\r\n                    return parsed;\r\n                }\r\n                arr[len] = parsed;\r\n            }\r\n    \r\n            return arr;\r\n        };\r\n    \r\n        exports.parseMatrix = function(matrix) {\r\n            var n;\r\n    \r\n            if (!matrix || (n = matrix.length) === 0) {\r\n                return error.value;\r\n            }\r\n            var pnarr;\r\n    \r\n            for (var i = 0; i < matrix.length; i++) {\r\n                pnarr = exports.parseNumberArray(matrix[i]);\r\n                matrix[i] = pnarr;\r\n    \r\n                if (pnarr instanceof Error) {\r\n                    return pnarr;\r\n                }\r\n            }\r\n    \r\n            return matrix;\r\n        };\r\n    \r\n        var d1900 = new Date(Date.UTC(1900, 0, 1));\r\n        exports.parseDate = function(date) {\r\n            if (!isNaN(date)) {\r\n                if (date instanceof Date) {\r\n                    return new Date(date);\r\n                }\r\n                var d = parseInt(date, 10);\r\n                if (d < 0) {\r\n                    return error.num;\r\n                }\r\n                if (d <= 60) {\r\n                    return new Date(d1900.getTime() + (d - 1) * 86400000);\r\n                }\r\n                return new Date(d1900.getTime() + (d - 2) * 86400000);\r\n            }\r\n            if (typeof date === 'string') {\r\n                date = new Date(date);\r\n                if (!isNaN(date)) {\r\n                    return date;\r\n                }\r\n            }\r\n            return error.value;\r\n        };\r\n    \r\n        exports.parseDateArray = function(arr) {\r\n            var len = arr.length;\r\n            var parsed;\r\n            while (len--) {\r\n                parsed = this.parseDate(arr[len]);\r\n                if (parsed === error.value) {\r\n                    return parsed;\r\n                }\r\n                arr[len] = parsed;\r\n            }\r\n            return arr;\r\n        };\r\n    \r\n        exports.anyIsError = function() {\r\n            var n = arguments.length;\r\n            while (n--) {\r\n                if (arguments[n] instanceof Error) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n    \r\n        exports.arrayValuesToNumbers = function(arr) {\r\n            var n = arr.length;\r\n            var el;\r\n            while (n--) {\r\n                el = arr[n];\r\n                if (typeof el === 'number') {\r\n                    continue;\r\n                }\r\n                if (el === true) {\r\n                    arr[n] = 1;\r\n                    continue;\r\n                }\r\n                if (el === false) {\r\n                    arr[n] = 0;\r\n                    continue;\r\n                }\r\n                if (typeof el === 'string') {\r\n                    var number = this.parseNumber(el);\r\n                    if (number instanceof Error) {\r\n                        arr[n] = 0;\r\n                    } else {\r\n                        arr[n] = number;\r\n                    }\r\n                }\r\n            }\r\n            return arr;\r\n        };\r\n    \r\n        exports.rest = function(array, idx) {\r\n            idx = idx || 1;\r\n            if (!array || typeof array.slice !== 'function') {\r\n                return array;\r\n            }\r\n            return array.slice(idx);\r\n        };\r\n    \r\n        exports.initial = function(array, idx) {\r\n            idx = idx || 1;\r\n            if (!array || typeof array.slice !== 'function') {\r\n                return array;\r\n            }\r\n            return array.slice(0, array.length - idx);\r\n        };\r\n    \r\n        exports.arrayEach = function(array, iteratee) {\r\n            var index = -1, length = array.length;\r\n    \r\n            while (++index < length) {\r\n                if (iteratee(array[index], index, array) === false) {\r\n                    break;\r\n                }\r\n            }\r\n    \r\n            return array;\r\n        };\r\n    \r\n        exports.transpose = function(matrix) {\r\n            if (!matrix) {\r\n                return error.value;\r\n            }\r\n    \r\n            return matrix[0].map(function(col, i) {\r\n                return matrix.map(function(row) {\r\n                    return row[i];\r\n                });\r\n            });\r\n        };\r\n    \r\n        return exports;\r\n    })();\r\n    \r\n    jexcel.methods = {};\r\n    \r\n    jexcel.methods.datetime = (function() {\r\n        var exports = {};\r\n    \r\n        var d1900 = new Date(1900, 0, 1);\r\n        var WEEK_STARTS = [\r\n            undefined,\r\n            0,\r\n            1,\r\n            undefined,\r\n            undefined,\r\n            undefined,\r\n            undefined,\r\n            undefined,\r\n            undefined,\r\n            undefined,\r\n            undefined,\r\n            undefined,\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5,\r\n            6,\r\n            0\r\n        ];\r\n        var WEEK_TYPES = [\r\n            [],\r\n            [1, 2, 3, 4, 5, 6, 7],\r\n            [7, 1, 2, 3, 4, 5, 6],\r\n            [6, 0, 1, 2, 3, 4, 5],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [7, 1, 2, 3, 4, 5, 6],\r\n            [6, 7, 1, 2, 3, 4, 5],\r\n            [5, 6, 7, 1, 2, 3, 4],\r\n            [4, 5, 6, 7, 1, 2, 3],\r\n            [3, 4, 5, 6, 7, 1, 2],\r\n            [2, 3, 4, 5, 6, 7, 1],\r\n            [1, 2, 3, 4, 5, 6, 7]\r\n        ];\r\n        var WEEKEND_TYPES = [\r\n            [],\r\n            [6, 0],\r\n            [0, 1],\r\n            [1, 2],\r\n            [2, 3],\r\n            [3, 4],\r\n            [4, 5],\r\n            [5, 6],\r\n            undefined,\r\n            undefined,\r\n            undefined, [0, 0],\r\n            [1, 1],\r\n            [2, 2],\r\n            [3, 3],\r\n            [4, 4],\r\n            [5, 5],\r\n            [6, 6]\r\n        ];\r\n    \r\n        exports.DATE = function(year, month, day) {\r\n            year = utils.parseNumber(year);\r\n            month = utils.parseNumber(month);\r\n            day = utils.parseNumber(day);\r\n            if (utils.anyIsError(year, month, day)) {\r\n                return error.value;\r\n            }\r\n            if (year < 0 || month < 0 || day < 0) {\r\n                return error.num;\r\n            }\r\n            var date = new Date(year, month - 1, day);\r\n            return date;\r\n        };\r\n    \r\n        exports.DATEVALUE = function(date_text) {\r\n            if (typeof date_text !== 'string') {\r\n                return error.value;\r\n            }\r\n            var date = Date.parse(date_text);\r\n            if (isNaN(date)) {\r\n                return error.value;\r\n            }\r\n            if (date <= -2203891200000) {\r\n                return (date - d1900) / 86400000 + 1;\r\n            }\r\n            return (date - d1900) / 86400000 + 2;\r\n        };\r\n    \r\n        exports.DAY = function(serial_number) {\r\n            var date = utils.parseDate(serial_number);\r\n            if (date instanceof Error) {\r\n                return date;\r\n            }\r\n            return date.getDate();\r\n        };\r\n    \r\n        exports.DAYS = function(end_date, start_date) {\r\n            end_date = utils.parseDate(end_date);\r\n            start_date = utils.parseDate(start_date);\r\n            if (end_date instanceof Error) {\r\n                return end_date;\r\n            }\r\n            if (start_date instanceof Error) {\r\n                return start_date;\r\n            }\r\n            return serial(end_date) - serial(start_date);\r\n        };\r\n    \r\n        exports.DAYS360 = function(start_date, end_date, method) {\r\n        };\r\n    \r\n        exports.EDATE = function(start_date, months) {\r\n            start_date = utils.parseDate(start_date);\r\n            if (start_date instanceof Error) {\r\n                return start_date;\r\n            }\r\n            if (isNaN(months)) {\r\n                return error.value;\r\n            }\r\n            months = parseInt(months, 10);\r\n            start_date.setMonth(start_date.getMonth() + months);\r\n            return serial(start_date);\r\n        };\r\n    \r\n        exports.EOMONTH = function(start_date, months) {\r\n            start_date = utils.parseDate(start_date);\r\n            if (start_date instanceof Error) {\r\n                return start_date;\r\n            }\r\n            if (isNaN(months)) {\r\n                return error.value;\r\n            }\r\n            months = parseInt(months, 10);\r\n            return serial(new Date(start_date.getFullYear(), start_date.getMonth() + months + 1, 0));\r\n        };\r\n    \r\n        exports.HOUR = function(serial_number) {\r\n            serial_number = utils.parseDate(serial_number);\r\n            if (serial_number instanceof Error) {\r\n                return serial_number;\r\n            }\r\n            return serial_number.getHours();\r\n        };\r\n    \r\n        exports.INTERVAL = function(second) {\r\n            if (typeof second !== 'number' && typeof second !== 'string') {\r\n                return error.value;\r\n            } else {\r\n                second = parseInt(second, 10);\r\n            }\r\n    \r\n            var year  = Math.floor(second/946080000);\r\n            second    = second%946080000;\r\n            var month = Math.floor(second/2592000);\r\n            second    = second%2592000;\r\n            var day   = Math.floor(second/86400);\r\n            second    = second%86400;\r\n    \r\n            var hour  = Math.floor(second/3600);\r\n            second    = second%3600;\r\n            var min   = Math.floor(second/60);\r\n            second    = second%60;\r\n            var sec   = second;\r\n    \r\n            year  = (year  > 0) ? year  + 'Y' : '';\r\n            month = (month > 0) ? month + 'M' : '';\r\n            day   = (day   > 0) ? day   + 'D' : '';\r\n            hour  = (hour  > 0) ? hour  + 'H' : '';\r\n            min   = (min   > 0) ? min   + 'M' : '';\r\n            sec   = (sec   > 0) ? sec   + 'S' : '';\r\n    \r\n            return 'P' + year + month + day + 'T' + hour + min + sec;\r\n        };\r\n    \r\n        exports.ISOWEEKNUM = function(date) {\r\n            date = utils.parseDate(date);\r\n            if (date instanceof Error) {\r\n                return date;\r\n            }\r\n    \r\n            date.setHours(0, 0, 0);\r\n            date.setDate(date.getDate() + 4 - (date.getDay() || 7));\r\n            var yearStart = new Date(date.getFullYear(), 0, 1);\r\n            return Math.ceil((((date - yearStart) / 86400000) + 1) / 7);\r\n        };\r\n    \r\n        exports.MINUTE = function(serial_number) {\r\n            serial_number = utils.parseDate(serial_number);\r\n            if (serial_number instanceof Error) {\r\n                return serial_number;\r\n            }\r\n            return serial_number.getMinutes();\r\n        };\r\n    \r\n        exports.MONTH = function(serial_number) {\r\n            serial_number = utils.parseDate(serial_number);\r\n            if (serial_number instanceof Error) {\r\n                return serial_number;\r\n            }\r\n            return serial_number.getMonth() + 1;\r\n        };\r\n    \r\n        exports.NETWORKDAYS = function(start_date, end_date, holidays) {\r\n        };\r\n    \r\n        exports.NETWORKDAYS.INTL = function(start_date, end_date, weekend, holidays) {\r\n        };\r\n    \r\n        exports.NOW = function() {\r\n            return new Date();\r\n        };\r\n    \r\n        exports.SECOND = function(serial_number) {\r\n            serial_number = utils.parseDate(serial_number);\r\n            if (serial_number instanceof Error) {\r\n                return serial_number;\r\n            }\r\n            return serial_number.getSeconds();\r\n        };\r\n    \r\n        exports.TIME = function(hour, minute, second) {\r\n            hour = utils.parseNumber(hour);\r\n            minute = utils.parseNumber(minute);\r\n            second = utils.parseNumber(second);\r\n            if (utils.anyIsError(hour, minute, second)) {\r\n                return error.value;\r\n            }\r\n            if (hour < 0 || minute < 0 || second < 0) {\r\n                return error.num;\r\n            }\r\n            return (3600 * hour + 60 * minute + second) / 86400;\r\n        };\r\n    \r\n        exports.TIMEVALUE = function(time_text) {\r\n            time_text = utils.parseDate(time_text);\r\n            if (time_text instanceof Error) {\r\n                return time_text;\r\n            }\r\n            return (3600 * time_text.getHours() + 60 * time_text.getMinutes() + time_text.getSeconds()) / 86400;\r\n        };\r\n    \r\n        exports.TODAY = function() {\r\n            return new Date();\r\n        };\r\n    \r\n        exports.WEEKDAY = function(serial_number, return_type) {\r\n            serial_number = utils.parseDate(serial_number);\r\n            if (serial_number instanceof Error) {\r\n                return serial_number;\r\n            }\r\n            if (return_type === undefined) {\r\n                return_type = 1;\r\n            }\r\n            var day = serial_number.getDay();\r\n            return WEEK_TYPES[return_type][day];\r\n        };\r\n    \r\n        exports.WEEKNUM = function(serial_number, return_type) {\r\n        };\r\n    \r\n        exports.WORKDAY = function(start_date, days, holidays) {\r\n        };\r\n    \r\n        exports.WORKDAY.INTL = function(start_date, days, weekend, holidays) {\r\n        };\r\n    \r\n        exports.YEAR = function(serial_number) {\r\n            serial_number = utils.parseDate(serial_number);\r\n            if (serial_number instanceof Error) {\r\n                return serial_number;\r\n            }\r\n            return serial_number.getFullYear();\r\n        };\r\n    \r\n        function isLeapYear(year) {\r\n            return new Date(year, 1, 29).getMonth() === 1;\r\n        }\r\n    \r\n        exports.YEARFRAC = function(start_date, end_date, basis) {\r\n        };\r\n    \r\n        function serial(date) {\r\n            var addOn = (date > -2203891200000)?2:1;\r\n            return (date - d1900) / 86400000 + addOn;\r\n        }\r\n    \r\n        return exports;\r\n    })();\r\n    \r\n    jexcel.methods.database = (function() {\r\n        var exports = {};\r\n    \r\n        function compact(array) {\r\n            if (!array) {\r\n                return array;\r\n            }\r\n            var result = [];\r\n            for (var i = 0; i < array.length; ++i) {\r\n                if (!array[i]) {\r\n                    continue;\r\n                }\r\n                result.push(array[i]);\r\n            }\r\n            return result;\r\n        }\r\n    \r\n        exports.FINDFIELD = function(database, title) {\r\n            var index = null;\r\n            for (var i = 0; i < database.length; i++) {\r\n                if (database[i][0] === title) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n    \r\n            // Return error if the input field title is incorrect\r\n            if (index == null) {\r\n                return error.value;\r\n            }\r\n            return index;\r\n        };\r\n    \r\n        function findResultIndex(database, criterias) {\r\n            var matches = {};\r\n            for (var i = 1; i < database[0].length; ++i) {\r\n                matches[i] = true;\r\n            }\r\n            var maxCriteriaLength = criterias[0].length;\r\n            for (i = 1; i < criterias.length; ++i) {\r\n                if (criterias[i].length > maxCriteriaLength) {\r\n                    maxCriteriaLength = criterias[i].length;\r\n                }\r\n            }\r\n    \r\n            for (var k = 1; k < database.length; ++k) {\r\n                for (var l = 1; l < database[k].length; ++l) {\r\n                    var currentCriteriaResult = false;\r\n                    var hasMatchingCriteria = false;\r\n                    for (var j = 0; j < criterias.length; ++j) {\r\n                        var criteria = criterias[j];\r\n                        if (criteria.length < maxCriteriaLength) {\r\n                            continue;\r\n                        }\r\n    \r\n                        var criteriaField = criteria[0];\r\n                        if (database[k][0] !== criteriaField) {\r\n                            continue;\r\n                        }\r\n                        hasMatchingCriteria = true;\r\n                        for (var p = 1; p < criteria.length; ++p) {\r\n                            currentCriteriaResult = currentCriteriaResult\r\n                                    || eval(database[k][l] + criteria[p]); // jshint\r\n                                                                            // ignore:line\r\n                        }\r\n                    }\r\n                    if (hasMatchingCriteria) {\r\n                        matches[l] = matches[l] && currentCriteriaResult;\r\n                    }\r\n                }\r\n            }\r\n    \r\n            var result = [];\r\n            for (var n = 0; n < database[0].length; ++n) {\r\n                if (matches[n]) {\r\n                    result.push(n - 1);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    \r\n        // Database functions\r\n        exports.DAVERAGE = function(database, field, criteria) {\r\n            // Return error if field is not a number and not a string\r\n            if (isNaN(field) && (typeof field !== \"string\")) {\r\n                return error.value;\r\n            }\r\n            var resultIndexes = findResultIndex(database, criteria);\r\n            var targetFields = [];\r\n            if (typeof field === \"string\") {\r\n                var index = exports.FINDFIELD(database, field);\r\n                targetFields = utils.rest(database[index]);\r\n            } else {\r\n                targetFields = utils.rest(database[field]);\r\n            }\r\n            var sum = 0;\r\n            for (var i = 0; i < resultIndexes.length; i++) {\r\n                sum += targetFields[resultIndexes[i]];\r\n            }\r\n            return resultIndexes.length === 0 ? error.div0 : sum / resultIndexes.length;\r\n        };\r\n    \r\n        exports.DCOUNT = function(database, field, criteria) {\r\n        };\r\n    \r\n        exports.DCOUNTA = function(database, field, criteria) {\r\n        };\r\n    \r\n        exports.DGET = function(database, field, criteria) {\r\n            // Return error if field is not a number and not a string\r\n            if (isNaN(field) && (typeof field !== \"string\")) {\r\n                return error.value;\r\n            }\r\n            var resultIndexes = findResultIndex(database, criteria);\r\n            var targetFields = [];\r\n            if (typeof field === \"string\") {\r\n                var index = exports.FINDFIELD(database, field);\r\n                targetFields = utils.rest(database[index]);\r\n            } else {\r\n                targetFields = utils.rest(database[field]);\r\n            }\r\n            // Return error if no record meets the criteria\r\n            if (resultIndexes.length === 0) {\r\n                return error.value;\r\n            }\r\n            // Returns the #NUM! error value because more than one record meets the\r\n            // criteria\r\n            if (resultIndexes.length > 1) {\r\n                return error.num;\r\n            }\r\n    \r\n            return targetFields[resultIndexes[0]];\r\n        };\r\n    \r\n        exports.DMAX = function(database, field, criteria) {\r\n            // Return error if field is not a number and not a string\r\n            if (isNaN(field) && (typeof field !== \"string\")) {\r\n                return error.value;\r\n            }\r\n            var resultIndexes = findResultIndex(database, criteria);\r\n            var targetFields = [];\r\n            if (typeof field === \"string\") {\r\n                var index = exports.FINDFIELD(database, field);\r\n                targetFields = utils.rest(database[index]);\r\n            } else {\r\n                targetFields = utils.rest(database[field]);\r\n            }\r\n            var maxValue = targetFields[resultIndexes[0]];\r\n            for (var i = 1; i < resultIndexes.length; i++) {\r\n                if (maxValue < targetFields[resultIndexes[i]]) {\r\n                    maxValue = targetFields[resultIndexes[i]];\r\n                }\r\n            }\r\n            return maxValue;\r\n        };\r\n    \r\n        exports.DMIN = function(database, field, criteria) {\r\n            // Return error if field is not a number and not a string\r\n            if (isNaN(field) && (typeof field !== \"string\")) {\r\n                return error.value;\r\n            }\r\n            var resultIndexes = findResultIndex(database, criteria);\r\n            var targetFields = [];\r\n            if (typeof field === \"string\") {\r\n                var index = exports.FINDFIELD(database, field);\r\n                targetFields = utils.rest(database[index]);\r\n            } else {\r\n                targetFields = utils.rest(database[field]);\r\n            }\r\n            var minValue = targetFields[resultIndexes[0]];\r\n            for (var i = 1; i < resultIndexes.length; i++) {\r\n                if (minValue > targetFields[resultIndexes[i]]) {\r\n                    minValue = targetFields[resultIndexes[i]];\r\n                }\r\n            }\r\n            return minValue;\r\n        };\r\n    \r\n        exports.DPRODUCT = function(database, field, criteria) {\r\n            // Return error if field is not a number and not a string\r\n            if (isNaN(field) && (typeof field !== \"string\")) {\r\n                return error.value;\r\n            }\r\n            var resultIndexes = findResultIndex(database, criteria);\r\n            var targetFields = [];\r\n            if (typeof field === \"string\") {\r\n                var index = exports.FINDFIELD(database, field);\r\n                targetFields = utils.rest(database[index]);\r\n            } else {\r\n                targetFields = utils.rest(database[field]);\r\n            }\r\n            var targetValues = [];\r\n            for (var i = 0; i < resultIndexes.length; i++) {\r\n                targetValues[i] = targetFields[resultIndexes[i]];\r\n            }\r\n            targetValues = compact(targetValues);\r\n            var result = 1;\r\n            for (i = 0; i < targetValues.length; i++) {\r\n                result *= targetValues[i];\r\n            }\r\n            return result;\r\n        };\r\n    \r\n        exports.DSTDEV = function(database, field, criteria) {\r\n        };\r\n    \r\n        exports.DSTDEVP = function(database, field, criteria) {\r\n        };\r\n    \r\n        exports.DSUM = function(database, field, criteria) {\r\n        };\r\n    \r\n        exports.DVAR = function(database, field, criteria) {\r\n        };\r\n    \r\n        exports.DVARP = function(database, field, criteria) {\r\n        };\r\n    \r\n        exports.MATCH = function(lookupValue, lookupArray, matchType) {\r\n            if (!lookupValue && !lookupArray) {\r\n                return error.na;\r\n            }\r\n            if (arguments.length === 2) {\r\n                matchType = 1;\r\n            }\r\n            if (!(lookupArray instanceof Array)) {\r\n                return error.na;\r\n            }\r\n            if (matchType !== -1 && matchType !== 0 && matchType !== 1) {\r\n                return error.na;\r\n            }\r\n    \r\n            var index;\r\n            var indexValue;\r\n    \r\n            for (var idx = 0; idx < lookupArray.length; idx++) {\r\n                if (matchType === 1) {\r\n                    if (lookupArray[idx] === lookupValue) {\r\n                        return idx + 1;\r\n                    } else if (lookupArray[idx] < lookupValue) {\r\n                        if (!indexValue) {\r\n                            index = idx + 1;\r\n                            indexValue = lookupArray[idx];\r\n                        } else if (lookupArray[idx] > indexValue) {\r\n                            index = idx + 1;\r\n                            indexValue = lookupArray[idx];\r\n                        }\r\n                    }\r\n                } else if (matchType === 0) {\r\n                    if (typeof lookupValue === 'string') {\r\n                        lookupValue = lookupValue.replace(/\\?/g, '.');\r\n                        if (lookupArray[idx].toLowerCase().match(lookupValue.toLowerCase())) {\r\n                            return idx + 1;\r\n                        }\r\n                    } else {\r\n                        if (lookupArray[idx] === lookupValue) {\r\n                            return idx + 1;\r\n                        }\r\n                    }\r\n                } else if (matchType === -1) {\r\n                    if (lookupArray[idx] === lookupValue) {\r\n                        return idx + 1;\r\n                    } else if (lookupArray[idx] > lookupValue) {\r\n                        if (!indexValue) {\r\n                            index = idx + 1;\r\n                            indexValue = lookupArray[idx];\r\n                        } else if (lookupArray[idx] < indexValue) {\r\n                            index = idx + 1;\r\n                            indexValue = lookupArray[idx];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n    \r\n            return index ? index : error.na;\r\n        };\r\n    \r\n        return exports;\r\n    })();\r\n    \r\n    jexcel.methods.engineering = (function() {\r\n        var exports = {};\r\n    \r\n        function isValidBinaryNumber(number) {\r\n            return (/^[01]{1,10}$/).test(number);\r\n        }\r\n    \r\n        exports.BESSELI = function(x, n) {\r\n        };\r\n    \r\n        exports.BESSELJ = function(x, n) {\r\n        };\r\n    \r\n        exports.BESSELK = function(x, n) {\r\n        };\r\n    \r\n        exports.BESSELY = function(x, n) {\r\n        };\r\n    \r\n        exports.BIN2DEC = function(number) {\r\n            // Return error if number is not binary or contains more than 10\r\n            // characters (10 digits)\r\n            if (!isValidBinaryNumber(number)) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Convert binary number to decimal\r\n            var result = parseInt(number, 2);\r\n    \r\n            // Handle negative numbers\r\n            var stringified = number.toString();\r\n            if (stringified.length === 10 && stringified.substring(0, 1) === '1') {\r\n                return parseInt(stringified.substring(1), 2) - 512;\r\n            } else {\r\n                return result;\r\n            }\r\n        };\r\n    \r\n        exports.BIN2HEX = function(number, places) {\r\n            // Return error if number is not binary or contains more than 10\r\n            // characters (10 digits)\r\n            if (!isValidBinaryNumber(number)) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Ignore places and return a 10-character hexadecimal number if number\r\n            // is negative\r\n            var stringified = number.toString();\r\n            if (stringified.length === 10 && stringified.substring(0, 1) === '1') {\r\n                return (1099511627264 + parseInt(stringified.substring(1), 2)).toString(16);\r\n            }\r\n    \r\n            // Convert binary number to hexadecimal\r\n            var result = parseInt(number, 2).toString(16);\r\n    \r\n            // Return hexadecimal number using the minimum number of characters\r\n            // necessary if places is undefined\r\n            if (places === undefined) {\r\n                return result;\r\n            } else {\r\n                // Return error if places is nonnumeric\r\n                if (isNaN(places)) {\r\n                  return error.value;\r\n                }\r\n    \r\n                // Return error if places is negative\r\n                if (places < 0) {\r\n                  return error.num;\r\n                }\r\n    \r\n                // Truncate places in case it is not an integer\r\n                places = Math.floor(places);\r\n    \r\n                // Pad return value with leading 0s (zeros) if necessary (using\r\n                // Underscore.string)\r\n                return (places >= result.length) ? REPT('0', places - result.length) + result : error.num;\r\n            }\r\n        };\r\n    \r\n        exports.BIN2OCT = function(number, places) {\r\n            // Return error if number is not binary or contains more than 10\r\n            // characters (10 digits)\r\n            if (!isValidBinaryNumber(number)) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Ignore places and return a 10-character octal number if number is\r\n            // negative\r\n            var stringified = number.toString();\r\n            if (stringified.length === 10 && stringified.substring(0, 1) === '1') {\r\n                return (1073741312 + parseInt(stringified.substring(1), 2)).toString(8);\r\n            }\r\n    \r\n            // Convert binary number to octal\r\n            var result = parseInt(number, 2).toString(8);\r\n    \r\n            // Return octal number using the minimum number of characters necessary\r\n            // if places is undefined\r\n            if (places === undefined) {\r\n                return result;\r\n            } else {\r\n                // Return error if places is nonnumeric\r\n                if (isNaN(places)) {\r\n                  return error.value;\r\n                }\r\n    \r\n                // Return error if places is negative\r\n                if (places < 0) {\r\n                  return error.num;\r\n                }\r\n    \r\n                // Truncate places in case it is not an integer\r\n                places = Math.floor(places);\r\n    \r\n                // Pad return value with leading 0s (zeros) if necessary (using\r\n                // Underscore.string)\r\n                return (places >= result.length) ? REPT('0', places - result.length) + result : error.num;\r\n            }\r\n        };\r\n    \r\n        exports.BITAND = function(number1, number2) {\r\n            // Return error if either number is a non-numeric value\r\n            number1 = utils.parseNumber(number1);\r\n            number2 = utils.parseNumber(number2);\r\n            if (utils.anyIsError(number1, number2)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return error if either number is less than 0\r\n            if (number1 < 0 || number2 < 0) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if either number is a non-integer\r\n            if (Math.floor(number1) !== number1 || Math.floor(number2) !== number2) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if either number is greater than (2^48)-1\r\n            if (number1 > 281474976710655 || number2 > 281474976710655) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return bitwise AND of two numbers\r\n            return number1 & number2;\r\n        };\r\n    \r\n        exports.BITLSHIFT = function(number, shift) {\r\n            number = utils.parseNumber(number);\r\n            shift = utils.parseNumber(shift);\r\n            if (utils.anyIsError(number, shift)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return error if number is less than 0\r\n            if (number < 0) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if number is a non-integer\r\n            if (Math.floor(number) !== number) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if number is greater than (2^48)-1\r\n            if (number > 281474976710655) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if the absolute value of shift is greater than 53\r\n            if (Math.abs(shift) > 53) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return number shifted by shift bits to the left or to the right if\r\n            // shift is negative\r\n            return (shift >= 0) ? number << shift : number >> -shift;\r\n        };\r\n    \r\n        exports.BITOR = function(number1, number2) {\r\n            number1 = utils.parseNumber(number1);\r\n            number2 = utils.parseNumber(number2);\r\n            if (utils.anyIsError(number1, number2)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return error if either number is less than 0\r\n            if (number1 < 0 || number2 < 0) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if either number is a non-integer\r\n            if (Math.floor(number1) !== number1 || Math.floor(number2) !== number2) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if either number is greater than (2^48)-1\r\n            if (number1 > 281474976710655 || number2 > 281474976710655) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return bitwise OR of two numbers\r\n            return number1 | number2;\r\n        };\r\n    \r\n        exports.BITRSHIFT = function(number, shift) {\r\n            number = utils.parseNumber(number);\r\n            shift = utils.parseNumber(shift);\r\n            if (utils.anyIsError(number, shift)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return error if number is less than 0\r\n            if (number < 0) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if number is a non-integer\r\n            if (Math.floor(number) !== number) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if number is greater than (2^48)-1\r\n            if (number > 281474976710655) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if the absolute value of shift is greater than 53\r\n            if (Math.abs(shift) > 53) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return number shifted by shift bits to the right or to the left if\r\n            // shift is negative\r\n            return (shift >= 0) ? number >> shift : number << -shift;\r\n        };\r\n    \r\n        exports.BITXOR = function(number1, number2) {\r\n            number1 = utils.parseNumber(number1);\r\n            number2 = utils.parseNumber(number2);\r\n            if (utils.anyIsError(number1, number2)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return error if either number is less than 0\r\n            if (number1 < 0 || number2 < 0) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if either number is a non-integer\r\n            if (Math.floor(number1) !== number1 || Math.floor(number2) !== number2) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if either number is greater than (2^48)-1\r\n            if (number1 > 281474976710655 || number2 > 281474976710655) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return bitwise XOR of two numbers\r\n            return number1 ^ number2;\r\n        };\r\n    \r\n        exports.COMPLEX = function(real, imaginary, suffix) {\r\n            real = utils.parseNumber(real);\r\n            imaginary = utils.parseNumber(imaginary);\r\n            if (utils.anyIsError(real, imaginary)) {\r\n                return real;\r\n            }\r\n    \r\n            // Set suffix\r\n            suffix = (suffix === undefined) ? 'i' : suffix;\r\n    \r\n            // Return error if suffix is neither \"i\" nor \"j\"\r\n            if (suffix !== 'i' && suffix !== 'j') {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return complex number\r\n            if (real === 0 && imaginary === 0) {\r\n                return 0;\r\n            } else if (real === 0) {\r\n                return (imaginary === 1) ? suffix : imaginary.toString() + suffix;\r\n            } else if (imaginary === 0) {\r\n                return real.toString();\r\n            } else {\r\n                var sign = (imaginary > 0) ? '+' : '';\r\n                return real.toString() + sign + ((imaginary === 1) ? suffix : imaginary.toString() + suffix);\r\n            }\r\n        };\r\n    \r\n        exports.CONVERT = function(number, from_unit, to_unit) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n    \r\n            // List of units supported by CONVERT and units defined by the\r\n            // International System of Units\r\n            // [Name, Symbol, Alternate symbols, Quantity, ISU, CONVERT, Conversion\r\n            // ratio]\r\n            var units = [\r\n                [\"a.u. of action\", \"?\", null, \"action\", false, false, 1.05457168181818e-34],\r\n                [\"a.u. of charge\", \"e\", null, \"electric_charge\", false, false, 1.60217653141414e-19],\r\n                [\"a.u. of energy\", \"Eh\", null, \"energy\", false, false, 4.35974417757576e-18],\r\n                [\"a.u. of length\", \"a?\", null, \"length\", false, false, 5.29177210818182e-11],\r\n                [\"a.u. of mass\", \"m?\", null, \"mass\", false, false, 9.10938261616162e-31],\r\n                [\"a.u. of time\", \"?/Eh\", null, \"time\", false, false, 2.41888432650516e-17],\r\n                [\"admiralty knot\", \"admkn\", null, \"speed\", false, true, 0.514773333],\r\n                [\"ampere\", \"A\", null, \"electric_current\", true, false, 1],\r\n                [\"ampere per meter\", \"A/m\", null, \"magnetic_field_intensity\", true, false, 1],\r\n                [\"ångström\", \"Å\", [\"ang\"], \"length\", false, true, 1e-10],\r\n                [\"are\", \"ar\", null, \"area\", false, true, 100],\r\n                [\"astronomical unit\", \"ua\", null, \"length\", false, false, 1.49597870691667e-11],\r\n                [\"bar\", \"bar\", null, \"pressure\", false, false, 100000],\r\n                [\"barn\", \"b\", null, \"area\", false, false, 1e-28],\r\n                [\"becquerel\", \"Bq\", null, \"radioactivity\", true, false, 1],\r\n                [\"bit\", \"bit\", [\"b\"], \"information\", false, true, 1],\r\n                [\"btu\", \"BTU\", [\"btu\"], \"energy\", false, true, 1055.05585262],\r\n                [\"byte\", \"byte\", null, \"information\", false, true, 8],\r\n                [\"candela\", \"cd\", null, \"luminous_intensity\", true, false, 1],\r\n                [\"candela per square metre\", \"cd/m?\", null, \"luminance\", true, false, 1],\r\n                [\"coulomb\", \"C\", null, \"electric_charge\", true, false, 1],\r\n                [\"cubic ångström\", \"ang3\", [\"ang^3\"], \"volume\", false, true, 1e-30],\r\n                [\"cubic foot\", \"ft3\", [\"ft^3\"], \"volume\", false, true, 0.028316846592],\r\n                [\"cubic inch\", \"in3\", [\"in^3\"], \"volume\", false, true, 0.000016387064],\r\n                [\"cubic light-year\", \"ly3\", [\"ly^3\"], \"volume\", false, true, 8.46786664623715e-47],\r\n                [\"cubic metre\", \"m?\", null, \"volume\", true, true, 1],\r\n                [\"cubic mile\", \"mi3\", [\"mi^3\"], \"volume\", false, true, 4168181825.44058],\r\n                [\"cubic nautical mile\", \"Nmi3\", [\"Nmi^3\"], \"volume\", false, true, 6352182208],\r\n                [\"cubic Pica\", \"Pica3\", [\"Picapt3\", \"Pica^3\", \"Picapt^3\"], \"volume\", false, true, 7.58660370370369e-8],\r\n                [\"cubic yard\", \"yd3\", [\"yd^3\"], \"volume\", false, true, 0.764554857984],\r\n                [\"cup\", \"cup\", null, \"volume\", false, true, 0.0002365882365],\r\n                [\"dalton\", \"Da\", [\"u\"], \"mass\", false, false, 1.66053886282828e-27],\r\n                [\"day\", \"d\", [\"day\"], \"time\", false, true, 86400],\r\n                [\"degree\", \"°\", null, \"angle\", false, false, 0.0174532925199433],\r\n                [\"degrees Rankine\", \"Rank\", null, \"temperature\", false, true, 0.555555555555556],\r\n                [\"dyne\", \"dyn\", [\"dy\"], \"force\", false, true, 0.00001],\r\n                [\"electronvolt\", \"eV\", [\"ev\"], \"energy\", false, true, 1.60217656514141],\r\n                [\"ell\", \"ell\", null, \"length\", false, true, 1.143],\r\n                [\"erg\", \"erg\", [\"e\"], \"energy\", false, true, 1e-7],\r\n                [\"farad\", \"F\", null, \"electric_capacitance\", true, false, 1],\r\n                [\"fluid ounce\", \"oz\", null, \"volume\", false, true, 0.0000295735295625],\r\n                [\"foot\", \"ft\", null, \"length\", false, true, 0.3048],\r\n                [\"foot-pound\", \"flb\", null, \"energy\", false, true, 1.3558179483314],\r\n                [\"gal\", \"Gal\", null, \"acceleration\", false, false, 0.01],\r\n                [\"gallon\", \"gal\", null, \"volume\", false, true, 0.003785411784],\r\n                [\"gauss\", \"G\", [\"ga\"], \"magnetic_flux_density\", false, true, 1],\r\n                [\"grain\", \"grain\", null, \"mass\", false, true, 0.0000647989],\r\n                [\"gram\", \"g\", null, \"mass\", false, true, 0.001],\r\n                [\"gray\", \"Gy\", null, \"absorbed_dose\", true, false, 1],\r\n                [\"gross registered ton\", \"GRT\", [\"regton\"], \"volume\", false, true, 2.8316846592],\r\n                [\"hectare\", \"ha\", null, \"area\", false, true, 10000],\r\n                [\"henry\", \"H\", null, \"inductance\", true, false, 1],\r\n                [\"hertz\", \"Hz\", null, \"frequency\", true, false, 1],\r\n                [\"horsepower\", \"HP\", [\"h\"], \"power\", false, true, 745.69987158227],\r\n                [\"horsepower-hour\", \"HPh\", [\"hh\", \"hph\"], \"energy\", false, true, 2684519.538],\r\n                [\"hour\", \"h\", [\"hr\"], \"time\", false, true, 3600],\r\n                [\"imperial gallon (U.K.)\", \"uk_gal\", null, \"volume\", false, true, 0.00454609],\r\n                [\"imperial hundredweight\", \"lcwt\", [\"uk_cwt\", \"hweight\"], \"mass\", false, true, 50.802345],\r\n                [\"imperial quart (U.K)\", \"uk_qt\", null, \"volume\", false, true, 0.0011365225],\r\n                [\"imperial ton\", \"brton\", [\"uk_ton\", \"LTON\"], \"mass\", false, true, 1016.046909],\r\n                [\"inch\", \"in\", null, \"length\", false, true, 0.0254],\r\n                [\"international acre\", \"uk_acre\", null, \"area\", false, true, 4046.8564224],\r\n                [\"IT calorie\", \"cal\", null, \"energy\", false, true, 4.1868],\r\n                [\"joule\", \"J\", null, \"energy\", true, true, 1],\r\n                [\"katal\", \"kat\", null, \"catalytic_activity\", true, false, 1],\r\n                [\"kelvin\", \"K\", [\"kel\"], \"temperature\", true, true, 1],\r\n                [\"kilogram\", \"kg\", null, \"mass\", true, true, 1],\r\n                [\"knot\", \"kn\", null, \"speed\", false, true, 0.514444444444444],\r\n                [\"light-year\", \"ly\", null, \"length\", false, true, 9460730472580800],\r\n                [\"litre\", \"L\", [\"l\", \"lt\"], \"volume\", false, true, 0.001],\r\n                [\"lumen\", \"lm\", null, \"luminous_flux\", true, false, 1],\r\n                [\"lux\", \"lx\", null, \"illuminance\", true, false, 1],\r\n                [\"maxwell\", \"Mx\", null, \"magnetic_flux\", false, false, 1e-18],\r\n                [\"measurement ton\", \"MTON\", null, \"volume\", false, true, 1.13267386368],\r\n                [\"meter per hour\", \"m/h\", [\"m/hr\"], \"speed\", false, true, 0.00027777777777778],\r\n                [\"meter per second\", \"m/s\", [\"m/sec\"], \"speed\", true, true, 1],\r\n                [\"meter per second squared\", \"m?s??\", null, \"acceleration\", true, false, 1],\r\n                [\"parsec\", \"pc\", [\"parsec\"], \"length\", false, true, 30856775814671900],\r\n                [\"meter squared per second\", \"m?/s\", null, \"kinematic_viscosity\", true, false, 1],\r\n                [\"metre\", \"m\", null, \"length\", true, true, 1],\r\n                [\"miles per hour\", \"mph\", null, \"speed\", false, true, 0.44704],\r\n                [\"millimetre of mercury\", \"mmHg\", null, \"pressure\", false, false, 133.322],\r\n                [\"minute\", \"?\", null, \"angle\", false, false, 0.000290888208665722],\r\n                [\"minute\", \"min\", [\"mn\"], \"time\", false, true, 60],\r\n                [\"modern teaspoon\", \"tspm\", null, \"volume\", false, true, 0.000005],\r\n                [\"mole\", \"mol\", null, \"amount_of_substance\", true, false, 1],\r\n                [\"morgen\", \"Morgen\", null, \"area\", false, true, 2500],\r\n                [\"n.u. of action\", \"?\", null, \"action\", false, false, 1.05457168181818e-34],\r\n                [\"n.u. of mass\", \"m?\", null, \"mass\", false, false, 9.10938261616162e-31],\r\n                [\"n.u. of speed\", \"c?\", null, \"speed\", false, false, 299792458],\r\n                [\"n.u. of time\", \"?/(me?c??)\", null, \"time\", false, false, 1.28808866778687e-21],\r\n                [\"nautical mile\", \"M\", [\"Nmi\"], \"length\", false, true, 1852],\r\n                [\"newton\", \"N\", null, \"force\", true, true, 1],\r\n                [\"œrsted\", \"Oe \", null, \"magnetic_field_intensity\", false, false, 79.5774715459477],\r\n                [\"ohm\", \"Ω\", null, \"electric_resistance\", true, false, 1],\r\n                [\"ounce mass\", \"ozm\", null, \"mass\", false, true, 0.028349523125],\r\n                [\"pascal\", \"Pa\", null, \"pressure\", true, false, 1],\r\n                [\"pascal second\", \"Pa?s\", null, \"dynamic_viscosity\", true, false, 1],\r\n                [\"pferdestärke\", \"PS\", null, \"power\", false, true, 735.49875],\r\n                [\"phot\", \"ph\", null, \"illuminance\", false, false, 0.0001],\r\n                [\"pica (1/6 inch)\", \"pica\", null, \"length\", false, true, 0.00035277777777778],\r\n                [\"pica (1/72 inch)\", \"Pica\", [\"Picapt\"], \"length\", false, true, 0.00423333333333333],\r\n                [\"poise\", \"P\", null, \"dynamic_viscosity\", false, false, 0.1],\r\n                [\"pond\", \"pond\", null, \"force\", false, true, 0.00980665],\r\n                [\"pound force\", \"lbf\", null, \"force\", false, true, 4.4482216152605],\r\n                [\"pound mass\", \"lbm\", null, \"mass\", false, true, 0.45359237],\r\n                [\"quart\", \"qt\", null, \"volume\", false, true, 0.000946352946],\r\n                [\"radian\", \"rad\", null, \"angle\", true, false, 1],\r\n                [\"second\", \"?\", null, \"angle\", false, false, 0.00000484813681109536],\r\n                [\"second\", \"s\", [\"sec\"], \"time\", true, true, 1],\r\n                [\"short hundredweight\", \"cwt\", [\"shweight\"], \"mass\", false, true, 45.359237],\r\n                [\"siemens\", \"S\", null, \"electrical_conductance\", true, false, 1],\r\n                [\"sievert\", \"Sv\", null, \"equivalent_dose\", true, false, 1],\r\n                [\"slug\", \"sg\", null, \"mass\", false, true, 14.59390294],\r\n                [\"square ångström\", \"ang2\", [\"ang^2\"], \"area\", false, true, 1e-20],\r\n                [\"square foot\", \"ft2\", [\"ft^2\"], \"area\", false, true, 0.09290304],\r\n                [\"square inch\", \"in2\", [\"in^2\"], \"area\", false, true, 0.00064516],\r\n                [\"square light-year\", \"ly2\", [\"ly^2\"], \"area\", false, true, 8.95054210748189e+31],\r\n                [\"square meter\", \"m?\", null, \"area\", true, true, 1],\r\n                [\"square mile\", \"mi2\", [\"mi^2\"], \"area\", false, true, 2589988.110336],\r\n                [\"square nautical mile\", \"Nmi2\", [\"Nmi^2\"], \"area\", false, true, 3429904],\r\n                [\"square Pica\", \"Pica2\", [\"Picapt2\", \"Pica^2\", \"Picapt^2\"], \"area\", false, true, 0.00001792111111111],\r\n                [\"square yard\", \"yd2\", [\"yd^2\"], \"area\", false, true, 0.83612736],\r\n                [\"statute mile\", \"mi\", null, \"length\", false, true, 1609.344],\r\n                [\"steradian\", \"sr\", null, \"solid_angle\", true, false, 1],\r\n                [\"stilb\", \"sb\", null, \"luminance\", false, false, 0.0001],\r\n                [\"stokes\", \"St\", null, \"kinematic_viscosity\", false, false, 0.0001],\r\n                [\"stone\", \"stone\", null, \"mass\", false, true, 6.35029318],\r\n                [\"tablespoon\", \"tbs\", null, \"volume\", false, true, 0.0000147868],\r\n                [\"teaspoon\", \"tsp\", null, \"volume\", false, true, 0.00000492892],\r\n                [\"tesla\", \"T\", null, \"magnetic_flux_density\", true, true, 1],\r\n                [\"thermodynamic calorie\", \"c\", null, \"energy\", false, true, 4.184],\r\n                [\"ton\", \"ton\", null, \"mass\", false, true, 907.18474],\r\n                [\"tonne\", \"t\", null, \"mass\", false, false, 1000],\r\n                [\"U.K. pint\", \"uk_pt\", null, \"volume\", false, true, 0.00056826125],\r\n                [\"U.S. bushel\", \"bushel\", null, \"volume\", false, true, 0.03523907],\r\n                [\"U.S. oil barrel\", \"barrel\", null, \"volume\", false, true, 0.158987295],\r\n                [\"U.S. pint\", \"pt\", [\"us_pt\"], \"volume\", false, true, 0.000473176473],\r\n                [\"U.S. survey mile\", \"survey_mi\", null, \"length\", false, true, 1609.347219],\r\n                [\"U.S. survey/statute acre\", \"us_acre\", null, \"area\", false, true, 4046.87261],\r\n                [\"volt\", \"V\", null, \"voltage\", true, false, 1],\r\n                [\"watt\", \"W\", null, \"power\", true, true, 1],\r\n                [\"watt-hour\", \"Wh\", [\"wh\"], \"energy\", false, true, 3600],\r\n                [\"weber\", \"Wb\", null, \"magnetic_flux\", true, false, 1],\r\n                [\"yard\", \"yd\", null, \"length\", false, true, 0.9144],\r\n                [\"year\", \"yr\", null, \"time\", false, true, 31557600]\r\n            ];\r\n    \r\n            // Binary prefixes\r\n            // [Name, Prefix power of 2 value, Previx value, Abbreviation, Derived\r\n            // from]\r\n            var binary_prefixes = {\r\n                Yi: [\"yobi\", 80, 1208925819614629174706176, \"Yi\", \"yotta\"],\r\n                Zi: [\"zebi\", 70, 1180591620717411303424, \"Zi\", \"zetta\"],\r\n                Ei: [\"exbi\", 60, 1152921504606846976, \"Ei\", \"exa\"],\r\n                Pi: [\"pebi\", 50, 1125899906842624, \"Pi\", \"peta\"],\r\n                Ti: [\"tebi\", 40, 1099511627776, \"Ti\", \"tera\"],\r\n                Gi: [\"gibi\", 30, 1073741824, \"Gi\", \"giga\"],\r\n                Mi: [\"mebi\", 20, 1048576, \"Mi\", \"mega\"],\r\n                ki: [\"kibi\", 10, 1024, \"ki\", \"kilo\"]\r\n            };\r\n    \r\n            // Unit prefixes\r\n            // [Name, Multiplier, Abbreviation]\r\n            var unit_prefixes = {\r\n                Y: [\"yotta\", 1e+24, \"Y\"],\r\n                Z: [\"zetta\", 1e+21, \"Z\"],\r\n                E: [\"exa\", 1e+18, \"E\"],\r\n                P: [\"peta\", 1e+15, \"P\"],\r\n                T: [\"tera\", 1e+12, \"T\"],\r\n                G: [\"giga\", 1e+09, \"G\"],\r\n                M: [\"mega\", 1e+06, \"M\"],\r\n                k: [\"kilo\", 1e+03, \"k\"],\r\n                h: [\"hecto\", 1e+02, \"h\"],\r\n                e: [\"dekao\", 1e+01, \"e\"],\r\n                d: [\"deci\", 1e-01, \"d\"],\r\n                c: [\"centi\", 1e-02, \"c\"],\r\n                m: [\"milli\", 1e-03, \"m\"],\r\n                u: [\"micro\", 1e-06, \"u\"],\r\n                n: [\"nano\", 1e-09, \"n\"],\r\n                p: [\"pico\", 1e-12, \"p\"],\r\n                f: [\"femto\", 1e-15, \"f\"],\r\n                a: [\"atto\", 1e-18, \"a\"],\r\n                z: [\"zepto\", 1e-21, \"z\"],\r\n                y: [\"yocto\", 1e-24, \"y\"]\r\n            };\r\n    \r\n            // Initialize units and multipliers\r\n            var from = null;\r\n            var to = null;\r\n            var base_from_unit = from_unit;\r\n            var base_to_unit = to_unit;\r\n            var from_multiplier = 1;\r\n            var to_multiplier = 1;\r\n            var alt;\r\n    \r\n            // Lookup from and to units\r\n            for (var i = 0; i < units.length; i++) {\r\n                alt = (units[i][2] === null) ? [] : units[i][2];\r\n                if (units[i][1] === base_from_unit || alt.indexOf(base_from_unit) >= 0) {\r\n                  from = units[i];\r\n                }\r\n                if (units[i][1] === base_to_unit || alt.indexOf(base_to_unit) >= 0) {\r\n                  to = units[i];\r\n                }\r\n            }\r\n    \r\n            // Lookup from prefix\r\n            if (from === null) {\r\n                var from_binary_prefix = binary_prefixes[from_unit.substring(0, 2)];\r\n                var from_unit_prefix = unit_prefixes[from_unit.substring(0, 1)];\r\n    \r\n                // Handle dekao unit prefix (only unit prefix with two characters)\r\n                if (from_unit.substring(0, 2) === 'da') {\r\n                  from_unit_prefix = [\"dekao\", 1e+01, \"da\"];\r\n                }\r\n    \r\n                // Handle binary prefixes first (so that 'Yi' is processed before\r\n                // 'Y')\r\n                if (from_binary_prefix) {\r\n                  from_multiplier = from_binary_prefix[2];\r\n                  base_from_unit = from_unit.substring(2);\r\n                } else if (from_unit_prefix) {\r\n                  from_multiplier = from_unit_prefix[1];\r\n                  base_from_unit = from_unit.substring(from_unit_prefix[2].length);\r\n                }\r\n    \r\n                // Lookup from unit\r\n                for (var j = 0; j < units.length; j++) {\r\n                  alt = (units[j][2] === null) ? [] : units[j][2];\r\n                  if (units[j][1] === base_from_unit || alt.indexOf(base_from_unit) >= 0) {\r\n                      from = units[j];\r\n                  }\r\n                }\r\n            }\r\n    \r\n            // Lookup to prefix\r\n            if (to === null) {\r\n                var to_binary_prefix = binary_prefixes[to_unit.substring(0, 2)];\r\n                var to_unit_prefix = unit_prefixes[to_unit.substring(0, 1)];\r\n    \r\n                // Handle dekao unit prefix (only unit prefix with two characters)\r\n                if (to_unit.substring(0, 2) === 'da') {\r\n                  to_unit_prefix = [\"dekao\", 1e+01, \"da\"];\r\n                }\r\n    \r\n                // Handle binary prefixes first (so that 'Yi' is processed before\r\n                // 'Y')\r\n                if (to_binary_prefix) {\r\n                  to_multiplier = to_binary_prefix[2];\r\n                  base_to_unit = to_unit.substring(2);\r\n                } else if (to_unit_prefix) {\r\n                  to_multiplier = to_unit_prefix[1];\r\n                  base_to_unit = to_unit.substring(to_unit_prefix[2].length);\r\n                }\r\n    \r\n                // Lookup to unit\r\n                for (var k = 0; k < units.length; k++) {\r\n                  alt = (units[k][2] === null) ? [] : units[k][2];\r\n                  if (units[k][1] === base_to_unit || alt.indexOf(base_to_unit) >= 0) {\r\n                      to = units[k];\r\n                  }\r\n                }\r\n            }\r\n    \r\n            // Return error if a unit does not exist\r\n            if (from === null || to === null) {\r\n                return error.na;\r\n            }\r\n    \r\n            // Return error if units represent different quantities\r\n            if (from[3] !== to[3]) {\r\n                return error.na;\r\n            }\r\n    \r\n            // Return converted number\r\n            return number * from[6] * from_multiplier / (to[6] * to_multiplier);\r\n        };\r\n    \r\n        exports.DEC2BIN = function(number, places) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n    \r\n            // Return error if number is not decimal, is lower than -512, or is\r\n            // greater than 511\r\n            if (!/^-?[0-9]{1,3}$/.test(number) || number < -512 || number > 511) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Ignore places and return a 10-character binary number if number is\r\n            // negative\r\n            if (number < 0) {\r\n                return '1' + REPT('0', 9 - (512 + number).toString(2).length) + (512 + number).toString(2);\r\n            }\r\n    \r\n            // Convert decimal number to binary\r\n            var result = parseInt(number, 10).toString(2);\r\n    \r\n            // Return binary number using the minimum number of characters necessary\r\n            // if places is undefined\r\n            if (typeof places === 'undefined') {\r\n                return result;\r\n            } else {\r\n                // Return error if places is nonnumeric\r\n                if (isNaN(places)) {\r\n                  return error.value;\r\n                }\r\n    \r\n                // Return error if places is negative\r\n                if (places < 0) {\r\n                  return error.num;\r\n                }\r\n    \r\n                // Truncate places in case it is not an integer\r\n                places = Math.floor(places);\r\n    \r\n                // Pad return value with leading 0s (zeros) if necessary (using\r\n                // Underscore.string)\r\n                return (places >= result.length) ? REPT('0', places - result.length) + result : error.num;\r\n            }\r\n        };\r\n    \r\n        exports.DEC2HEX = function(number, places) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n    \r\n            // Return error if number is not decimal, is lower than -549755813888,\r\n            // or is greater than 549755813887\r\n            if (!/^-?[0-9]{1,12}$/.test(number) || number < -549755813888 || number > 549755813887) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Ignore places and return a 10-character hexadecimal number if number\r\n            // is negative\r\n            if (number < 0) {\r\n                return (1099511627776 + number).toString(16);\r\n            }\r\n    \r\n            // Convert decimal number to hexadecimal\r\n            var result = parseInt(number, 10).toString(16);\r\n    \r\n            // Return hexadecimal number using the minimum number of characters\r\n            // necessary if places is undefined\r\n            if (typeof places === 'undefined') {\r\n                return result;\r\n            } else {\r\n                // Return error if places is nonnumeric\r\n                if (isNaN(places)) {\r\n                  return error.value;\r\n                }\r\n    \r\n                // Return error if places is negative\r\n                if (places < 0) {\r\n                  return error.num;\r\n                }\r\n    \r\n                // Truncate places in case it is not an integer\r\n                places = Math.floor(places);\r\n    \r\n                // Pad return value with leading 0s (zeros) if necessary (using\r\n                // Underscore.string)\r\n                return (places >= result.length) ? REPT('0', places - result.length) + result : error.num;\r\n            }\r\n        };\r\n    \r\n        exports.DEC2OCT = function(number, places) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n    \r\n            // Return error if number is not decimal, is lower than -549755813888,\r\n            // or is greater than 549755813887\r\n            if (!/^-?[0-9]{1,9}$/.test(number) || number < -536870912 || number > 536870911) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Ignore places and return a 10-character octal number if number is\r\n            // negative\r\n            if (number < 0) {\r\n                return (1073741824 + number).toString(8);\r\n            }\r\n    \r\n            // Convert decimal number to octal\r\n            var result = parseInt(number, 10).toString(8);\r\n    \r\n            // Return octal number using the minimum number of characters necessary\r\n            // if places is undefined\r\n            if (typeof places === 'undefined') {\r\n                return result;\r\n            } else {\r\n                // Return error if places is nonnumeric\r\n                if (isNaN(places)) {\r\n                  return error.value;\r\n                }\r\n    \r\n                // Return error if places is negative\r\n                if (places < 0) {\r\n                  return error.num;\r\n                }\r\n    \r\n                // Truncate places in case it is not an integer\r\n                places = Math.floor(places);\r\n    \r\n                // Pad return value with leading 0s (zeros) if necessary (using\r\n                // Underscore.string)\r\n                return (places >= result.length) ? REPT('0', places - result.length) + result : error.num;\r\n            }\r\n        };\r\n    \r\n        exports.DELTA = function(number1, number2) {\r\n            // Set number2 to zero if undefined\r\n            number2 = (number2 === undefined) ? 0 : number2;\r\n            number1 = utils.parseNumber(number1);\r\n            number2 = utils.parseNumber(number2);\r\n            if (utils.anyIsError(number1, number2)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return delta\r\n            return (number1 === number2) ? 1 : 0;\r\n        };\r\n    \r\n        exports.ERF = function(lower_bound, upper_bound) {\r\n        };\r\n    \r\n        exports.ERF.PRECISE = function() {\r\n        };\r\n    \r\n        exports.ERFC = function(x) {\r\n        };\r\n    \r\n        exports.ERFC.PRECISE = function() {\r\n        };\r\n    \r\n        exports.GESTEP = function(number, step) {\r\n            step = step || 0;\r\n            number = utils.parseNumber(number);\r\n            if (utils.anyIsError(step, number)) {\r\n                return number;\r\n            }\r\n    \r\n            // Return delta\r\n            return (number >= step) ? 1 : 0;\r\n        };\r\n    \r\n        exports.HEX2BIN = function(number, places) {\r\n            // Return error if number is not hexadecimal or contains more than ten\r\n            // characters (10 digits)\r\n            if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Check if number is negative\r\n            var negative = (number.length === 10 && number.substring(0, 1).toLowerCase() === 'f') ? true : false;\r\n    \r\n            // Convert hexadecimal number to decimal\r\n            var decimal = (negative) ? parseInt(number, 16) - 1099511627776 : parseInt(number, 16);\r\n    \r\n            // Return error if number is lower than -512 or greater than 511\r\n            if (decimal < -512 || decimal > 511) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Ignore places and return a 10-character binary number if number is\r\n            // negative\r\n            if (negative) {\r\n                return '1' + REPT('0', 9 - (512 + decimal).toString(2).length) + (512 + decimal).toString(2);\r\n            }\r\n    \r\n            // Convert decimal number to binary\r\n            var result = decimal.toString(2);\r\n    \r\n            // Return binary number using the minimum number of characters necessary\r\n            // if places is undefined\r\n            if (places === undefined) {\r\n                return result;\r\n            } else {\r\n                // Return error if places is nonnumeric\r\n                if (isNaN(places)) {\r\n                  return error.value;\r\n                }\r\n    \r\n                // Return error if places is negative\r\n                if (places < 0) {\r\n                  return error.num;\r\n                }\r\n    \r\n                // Truncate places in case it is not an integer\r\n                places = Math.floor(places);\r\n    \r\n                // Pad return value with leading 0s (zeros) if necessary (using\r\n                // Underscore.string)\r\n                return (places >= result.length) ? REPT('0', places - result.length) + result : error.num;\r\n            }\r\n        };\r\n    \r\n        exports.HEX2DEC = function(number) {\r\n            // Return error if number is not hexadecimal or contains more than ten\r\n            // characters (10 digits)\r\n            if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Convert hexadecimal number to decimal\r\n            var decimal = parseInt(number, 16);\r\n    \r\n            // Return decimal number\r\n            return (decimal >= 549755813888) ? decimal - 1099511627776 : decimal;\r\n        };\r\n    \r\n        exports.HEX2OCT = function(number, places) {\r\n            // Return error if number is not hexadecimal or contains more than ten\r\n            // characters (10 digits)\r\n            if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Convert hexadecimal number to decimal\r\n            var decimal = parseInt(number, 16);\r\n    \r\n            // Return error if number is positive and greater than 0x1fffffff\r\n            // (536870911)\r\n            if (decimal > 536870911 && decimal < 1098974756864) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Ignore places and return a 10-character octal number if number is\r\n            // negative\r\n            if (decimal >= 1098974756864) {\r\n                return (decimal - 1098437885952).toString(8);\r\n            }\r\n    \r\n            // Convert decimal number to octal\r\n            var result = decimal.toString(8);\r\n    \r\n            // Return octal number using the minimum number of characters necessary\r\n            // if places is undefined\r\n            if (places === undefined) {\r\n                return result;\r\n            } else {\r\n                // Return error if places is nonnumeric\r\n                if (isNaN(places)) {\r\n                  return error.value;\r\n                }\r\n    \r\n                // Return error if places is negative\r\n                if (places < 0) {\r\n                  return error.num;\r\n                }\r\n    \r\n                // Truncate places in case it is not an integer\r\n                places = Math.floor(places);\r\n    \r\n                // Pad return value with leading 0s (zeros) if necessary (using\r\n                // Underscore.string)\r\n                return (places >= result.length) ? REPT('0', places - result.length) + result : error.num;\r\n            }\r\n        };\r\n    \r\n        exports.IMABS = function(inumber) {\r\n            // Lookup real and imaginary coefficients using exports.js\r\n            // [http://formulajs.org]\r\n            var x = exports.IMREAL(inumber);\r\n            var y = exports.IMAGINARY(inumber);\r\n    \r\n            // Return error if either coefficient is not a number\r\n            if (utils.anyIsError(x, y)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return absolute value of complex number\r\n            return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\r\n        };\r\n    \r\n        exports.IMAGINARY = function(inumber) {\r\n            if (inumber === undefined || inumber === true || inumber === false) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return 0 if inumber is equal to 0\r\n            if (inumber === 0 || inumber === '0') {\r\n                return 0;\r\n            }\r\n    \r\n            // Handle special cases\r\n            if (['i', 'j'].indexOf(inumber) >= 0) {\r\n                return 1;\r\n            }\r\n    \r\n            // Normalize imaginary coefficient\r\n            inumber = inumber.replace('+i', '+1i').replace('-i', '-1i').replace('+j', '+1j').replace('-j', '-1j');\r\n    \r\n            // Lookup sign\r\n            var plus = inumber.indexOf('+');\r\n            var minus = inumber.indexOf('-');\r\n            if (plus === 0) {\r\n                plus = inumber.indexOf('+', 1);\r\n            }\r\n    \r\n            if (minus === 0) {\r\n                minus = inumber.indexOf('-', 1);\r\n            }\r\n    \r\n            // Lookup imaginary unit\r\n            var last = inumber.substring(inumber.length - 1, inumber.length);\r\n            var unit = (last === 'i' || last === 'j');\r\n    \r\n            if (plus >= 0 || minus >= 0) {\r\n                // Return error if imaginary unit is neither i nor j\r\n                if (!unit) {\r\n                  return error.num;\r\n                }\r\n    \r\n                // Return imaginary coefficient of complex number\r\n                if (plus >= 0) {\r\n                  return (isNaN(inumber.substring(0, plus)) || isNaN(inumber.substring(plus + 1, inumber.length - 1))) ?\r\n                      error.num :\r\n                      Number(inumber.substring(plus + 1, inumber.length - 1));\r\n                } else {\r\n                  return (isNaN(inumber.substring(0, minus)) || isNaN(inumber.substring(minus + 1, inumber.length - 1))) ?\r\n                      error.num :\r\n                      -Number(inumber.substring(minus + 1, inumber.length - 1));\r\n                }\r\n            } else {\r\n                if (unit) {\r\n                  return (isNaN(inumber.substring(0, inumber.length - 1))) ? error.num : inumber.substring(0, inumber.length - 1);\r\n                } else {\r\n                  return (isNaN(inumber)) ? error.num : 0;\r\n                }\r\n            }\r\n        };\r\n    \r\n        exports.IMARGUMENT = function(inumber) {\r\n            // Lookup real and imaginary coefficients using exports.js\r\n            // [http://formulajs.org]\r\n            var x = exports.IMREAL(inumber);\r\n            var y = exports.IMAGINARY(inumber);\r\n    \r\n            // Return error if either coefficient is not a number\r\n            if (utils.anyIsError(x, y)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return error if inumber is equal to zero\r\n            if (x === 0 && y === 0) {\r\n                return error.div0;\r\n            }\r\n    \r\n            // Return PI/2 if x is equal to zero and y is positive\r\n            if (x === 0 && y > 0) {\r\n                return Math.PI / 2;\r\n            }\r\n    \r\n            // Return -PI/2 if x is equal to zero and y is negative\r\n            if (x === 0 && y < 0) {\r\n                return -Math.PI / 2;\r\n            }\r\n    \r\n            // Return zero if x is negative and y is equal to zero\r\n            if (y === 0 && x > 0) {\r\n                return 0;\r\n            }\r\n    \r\n            // Return zero if x is negative and y is equal to zero\r\n            if (y === 0 && x < 0) {\r\n                return -Math.PI;\r\n            }\r\n    \r\n            // Return argument of complex number\r\n            if (x > 0) {\r\n                return Math.atan(y / x);\r\n            } else if (x < 0 && y >= 0) {\r\n                return Math.atan(y / x) + Math.PI;\r\n            } else {\r\n                return Math.atan(y / x) - Math.PI;\r\n            }\r\n        };\r\n    \r\n        exports.IMCONJUGATE = function(inumber) {\r\n            // Lookup real and imaginary coefficients using exports.js\r\n            // [http://formulajs.org]\r\n            var x = exports.IMREAL(inumber);\r\n            var y = exports.IMAGINARY(inumber);\r\n    \r\n            if (utils.anyIsError(x, y)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Lookup imaginary unit\r\n            var unit = inumber.substring(inumber.length - 1);\r\n            unit = (unit === 'i' || unit === 'j') ? unit : 'i';\r\n    \r\n            // Return conjugate of complex number\r\n            return (y !== 0) ? exports.COMPLEX(x, -y, unit) : inumber;\r\n        };\r\n    \r\n        exports.IMCOS = function(inumber) {\r\n            // Lookup real and imaginary coefficients using exports.js\r\n            // [http://formulajs.org]\r\n            var x = exports.IMREAL(inumber);\r\n            var y = exports.IMAGINARY(inumber);\r\n    \r\n            if (utils.anyIsError(x, y)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Lookup imaginary unit\r\n            var unit = inumber.substring(inumber.length - 1);\r\n            unit = (unit === 'i' || unit === 'j') ? unit : 'i';\r\n    \r\n            // Return cosine of complex number\r\n            return exports.COMPLEX(Math.cos(x) * (Math.exp(y) + Math.exp(-y)) / 2, -Math.sin(x) * (Math.exp(y) - Math.exp(-y)) / 2, unit);\r\n        };\r\n    \r\n        exports.IMCOSH = function(inumber) {\r\n            // Lookup real and imaginary coefficients using exports.js\r\n            // [http://formulajs.org]\r\n            var x = exports.IMREAL(inumber);\r\n            var y = exports.IMAGINARY(inumber);\r\n    \r\n            if (utils.anyIsError(x, y)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Lookup imaginary unit\r\n            var unit = inumber.substring(inumber.length - 1);\r\n            unit = (unit === 'i' || unit === 'j') ? unit : 'i';\r\n    \r\n            // Return hyperbolic cosine of complex number\r\n            return exports.COMPLEX(Math.cos(y) * (Math.exp(x) + Math.exp(-x)) / 2, Math.sin(y) * (Math.exp(x) - Math.exp(-x)) / 2, unit);\r\n        };\r\n    \r\n        exports.IMCOT = function(inumber) {\r\n            // Lookup real and imaginary coefficients using Formula.js\r\n            // [http://formulajs.org]\r\n            var x = exports.IMREAL(inumber);\r\n            var y = exports.IMAGINARY(inumber);\r\n    \r\n            if (utils.anyIsError(x, y)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return cotangent of complex number\r\n            return exports.IMDIV(exports.IMCOS(inumber), exports.IMSIN(inumber));\r\n        };\r\n    \r\n        exports.IMDIV = function(inumber1, inumber2) {\r\n            // Lookup real and imaginary coefficients using Formula.js\r\n            // [http://formulajs.org]\r\n            var a = exports.IMREAL(inumber1);\r\n            var b = exports.IMAGINARY(inumber1);\r\n            var c = exports.IMREAL(inumber2);\r\n            var d = exports.IMAGINARY(inumber2);\r\n    \r\n            if (utils.anyIsError(a, b, c, d)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Lookup imaginary unit\r\n            var unit1 = inumber1.substring(inumber1.length - 1);\r\n            var unit2 = inumber2.substring(inumber2.length - 1);\r\n            var unit = 'i';\r\n            if (unit1 === 'j') {\r\n                unit = 'j';\r\n            } else if (unit2 === 'j') {\r\n                unit = 'j';\r\n            }\r\n    \r\n            // Return error if inumber2 is null\r\n            if (c === 0 && d === 0) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return exponential of complex number\r\n            var den = c * c + d * d;\r\n            return exports.COMPLEX((a * c + b * d) / den, (b * c - a * d) / den, unit);\r\n        };\r\n    \r\n        exports.IMEXP = function(inumber) {\r\n            // Lookup real and imaginary coefficients using Formula.js\r\n            // [http://formulajs.org]\r\n            var x = exports.IMREAL(inumber);\r\n            var y = exports.IMAGINARY(inumber);\r\n    \r\n            if (utils.anyIsError(x, y)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Lookup imaginary unit\r\n            var unit = inumber.substring(inumber.length - 1);\r\n            unit = (unit === 'i' || unit === 'j') ? unit : 'i';\r\n    \r\n            // Return exponential of complex number\r\n            var e = Math.exp(x);\r\n            return exports.COMPLEX(e * Math.cos(y), e * Math.sin(y), unit);\r\n        };\r\n    \r\n        exports.IMLN = function(inumber) {\r\n            // Lookup real and imaginary coefficients using Formula.js\r\n            // [http://formulajs.org]\r\n            var x = exports.IMREAL(inumber);\r\n            var y = exports.IMAGINARY(inumber);\r\n    \r\n            if (utils.anyIsError(x, y)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Lookup imaginary unit\r\n            var unit = inumber.substring(inumber.length - 1);\r\n            unit = (unit === 'i' || unit === 'j') ? unit : 'i';\r\n    \r\n            // Return exponential of complex number\r\n            return exports.COMPLEX(Math.log(Math.sqrt(x * x + y * y)), Math.atan(y / x), unit);\r\n        };\r\n    \r\n        exports.IMLOG10 = function(inumber) {\r\n            // Lookup real and imaginary coefficients using Formula.js\r\n            // [http://formulajs.org]\r\n            var x = exports.IMREAL(inumber);\r\n            var y = exports.IMAGINARY(inumber);\r\n    \r\n            if (utils.anyIsError(x, y)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Lookup imaginary unit\r\n            var unit = inumber.substring(inumber.length - 1);\r\n            unit = (unit === 'i' || unit === 'j') ? unit : 'i';\r\n    \r\n            // Return exponential of complex number\r\n            return exports.COMPLEX(Math.log(Math.sqrt(x * x + y * y)) / Math.log(10), Math.atan(y / x) / Math.log(10), unit);\r\n        };\r\n    \r\n        exports.IMLOG2 = function(inumber) {\r\n            // Lookup real and imaginary coefficients using Formula.js\r\n            // [http://formulajs.org]\r\n            var x = exports.IMREAL(inumber);\r\n            var y = exports.IMAGINARY(inumber);\r\n    \r\n            if (utils.anyIsError(x, y)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Lookup imaginary unit\r\n            var unit = inumber.substring(inumber.length - 1);\r\n            unit = (unit === 'i' || unit === 'j') ? unit : 'i';\r\n    \r\n            // Return exponential of complex number\r\n            return exports.COMPLEX(Math.log(Math.sqrt(x * x + y * y)) / Math.log(2), Math.atan(y / x) / Math.log(2), unit);\r\n        };\r\n    \r\n        exports.IMPOWER = function(inumber, number) {\r\n            number = utils.parseNumber(number);\r\n            var x = exports.IMREAL(inumber);\r\n            var y = exports.IMAGINARY(inumber);\r\n            if (utils.anyIsError(number, x, y)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Lookup imaginary unit\r\n            var unit = inumber.substring(inumber.length - 1);\r\n            unit = (unit === 'i' || unit === 'j') ? unit : 'i';\r\n    \r\n            // Calculate power of modulus\r\n            var p = Math.pow(exports.IMABS(inumber), number);\r\n    \r\n            // Calculate argument\r\n            var t = exports.IMARGUMENT(inumber);\r\n    \r\n            // Return exponential of complex number\r\n            return exports.COMPLEX(p * Math.cos(number * t), p * Math.sin(number * t), unit);\r\n        };\r\n    \r\n        exports.IMPRODUCT = function() {\r\n            // Initialize result\r\n            var result = arguments[0];\r\n    \r\n            // Loop on all numbers\r\n            for (var i = 1; i < arguments.length; i++) {\r\n                // Lookup coefficients of two complex numbers\r\n                var a = exports.IMREAL(result);\r\n                var b = exports.IMAGINARY(result);\r\n                var c = exports.IMREAL(arguments[i]);\r\n                var d = exports.IMAGINARY(arguments[i]);\r\n    \r\n                if (utils.anyIsError(a, b, c, d)) {\r\n                  return error.value;\r\n                }\r\n    \r\n                // Complute product of two complex numbers\r\n                result = exports.COMPLEX(a * c - b * d, a * d + b * c);\r\n            }\r\n    \r\n            // Return product of complex numbers\r\n            return result;\r\n        };\r\n    \r\n        exports.IMREAL = function(inumber) {\r\n            if (inumber === undefined || inumber === true || inumber === false) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return 0 if inumber is equal to 0\r\n            if (inumber === 0 || inumber === '0') {\r\n                return 0;\r\n            }\r\n    \r\n            // Handle special cases\r\n            if (['i', '+i', '1i', '+1i', '-i', '-1i', 'j', '+j', '1j', '+1j', '-j', '-1j'].indexOf(inumber) >= 0) {\r\n                return 0;\r\n            }\r\n    \r\n            // Lookup sign\r\n            var plus = inumber.indexOf('+');\r\n            var minus = inumber.indexOf('-');\r\n            if (plus === 0) {\r\n                plus = inumber.indexOf('+', 1);\r\n            }\r\n            if (minus === 0) {\r\n                minus = inumber.indexOf('-', 1);\r\n            }\r\n    \r\n            // Lookup imaginary unit\r\n            var last = inumber.substring(inumber.length - 1, inumber.length);\r\n            var unit = (last === 'i' || last === 'j');\r\n    \r\n            if (plus >= 0 || minus >= 0) {\r\n                // Return error if imaginary unit is neither i nor j\r\n                if (!unit) {\r\n                  return error.num;\r\n                }\r\n    \r\n                // Return real coefficient of complex number\r\n                if (plus >= 0) {\r\n                  return (isNaN(inumber.substring(0, plus)) || isNaN(inumber.substring(plus + 1, inumber.length - 1))) ?\r\n                      error.num :\r\n                      Number(inumber.substring(0, plus));\r\n                } else {\r\n                  return (isNaN(inumber.substring(0, minus)) || isNaN(inumber.substring(minus + 1, inumber.length - 1))) ?\r\n                      error.num :\r\n                      Number(inumber.substring(0, minus));\r\n                }\r\n            } else {\r\n                if (unit) {\r\n                  return (isNaN(inumber.substring(0, inumber.length - 1))) ? error.num : 0;\r\n                } else {\r\n                  return (isNaN(inumber)) ? error.num : inumber;\r\n                }\r\n            }\r\n        };\r\n    \r\n        exports.IMSEC = function(inumber) {\r\n            // Return error if inumber is a logical value\r\n            if (inumber === true || inumber === false) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Lookup real and imaginary coefficients using Formula.js\r\n            // [http://formulajs.org]\r\n            var x = exports.IMREAL(inumber);\r\n            var y = exports.IMAGINARY(inumber);\r\n    \r\n            if (utils.anyIsError(x, y)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return secant of complex number\r\n            return exports.IMDIV('1', exports.IMCOS(inumber));\r\n        };\r\n    \r\n        exports.IMSECH = function(inumber) {\r\n            // Lookup real and imaginary coefficients using Formula.js\r\n            // [http://formulajs.org]\r\n            var x = exports.IMREAL(inumber);\r\n            var y = exports.IMAGINARY(inumber);\r\n    \r\n            if (utils.anyIsError(x, y)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return hyperbolic secant of complex number\r\n            return exports.IMDIV('1', exports.IMCOSH(inumber));\r\n        };\r\n    \r\n        exports.IMSIN = function(inumber) {\r\n            // Lookup real and imaginary coefficients using Formula.js\r\n            // [http://formulajs.org]\r\n            var x = exports.IMREAL(inumber);\r\n            var y = exports.IMAGINARY(inumber);\r\n    \r\n            if (utils.anyIsError(x, y)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Lookup imaginary unit\r\n            var unit = inumber.substring(inumber.length - 1);\r\n            unit = (unit === 'i' || unit === 'j') ? unit : 'i';\r\n    \r\n            // Return sine of complex number\r\n            return exports.COMPLEX(Math.sin(x) * (Math.exp(y) + Math.exp(-y)) / 2, Math.cos(x) * (Math.exp(y) - Math.exp(-y)) / 2, unit);\r\n        };\r\n    \r\n        exports.IMSINH = function(inumber) {\r\n            // Lookup real and imaginary coefficients using Formula.js\r\n            // [http://formulajs.org]\r\n            var x = exports.IMREAL(inumber);\r\n            var y = exports.IMAGINARY(inumber);\r\n    \r\n            if (utils.anyIsError(x, y)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Lookup imaginary unit\r\n            var unit = inumber.substring(inumber.length - 1);\r\n            unit = (unit === 'i' || unit === 'j') ? unit : 'i';\r\n    \r\n            // Return hyperbolic sine of complex number\r\n            return exports.COMPLEX(Math.cos(y) * (Math.exp(x) - Math.exp(-x)) / 2, Math.sin(y) * (Math.exp(x) + Math.exp(-x)) / 2, unit);\r\n        };\r\n    \r\n        exports.IMSQRT = function(inumber) {\r\n            // Lookup real and imaginary coefficients using Formula.js\r\n            // [http://formulajs.org]\r\n            var x = exports.IMREAL(inumber);\r\n            var y = exports.IMAGINARY(inumber);\r\n    \r\n            if (utils.anyIsError(x, y)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Lookup imaginary unit\r\n            var unit = inumber.substring(inumber.length - 1);\r\n            unit = (unit === 'i' || unit === 'j') ? unit : 'i';\r\n    \r\n            // Calculate power of modulus\r\n            var s = Math.sqrt(exports.IMABS(inumber));\r\n    \r\n            // Calculate argument\r\n            var t = exports.IMARGUMENT(inumber);\r\n    \r\n            // Return exponential of complex number\r\n            return exports.COMPLEX(s * Math.cos(t / 2), s * Math.sin(t / 2), unit);\r\n        };\r\n    \r\n        exports.IMCSC = function (inumber) {\r\n            // Return error if inumber is a logical value\r\n            if (inumber === true || inumber === false) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Lookup real and imaginary coefficients using Formula.js\r\n            // [http://formulajs.org]\r\n            var x = exports.IMREAL(inumber);\r\n            var y = exports.IMAGINARY(inumber);\r\n    \r\n            // Return error if either coefficient is not a number\r\n            if (utils.anyIsError(x, y)) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return cosecant of complex number\r\n            return exports.IMDIV('1', exports.IMSIN(inumber));\r\n        };\r\n    \r\n        exports.IMCSCH = function (inumber) {\r\n            // Return error if inumber is a logical value\r\n            if (inumber === true || inumber === false) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Lookup real and imaginary coefficients using Formula.js\r\n            // [http://formulajs.org]\r\n            var x = exports.IMREAL(inumber);\r\n            var y = exports.IMAGINARY(inumber);\r\n    \r\n            // Return error if either coefficient is not a number\r\n            if (utils.anyIsError(x, y)) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return hyperbolic cosecant of complex number\r\n            return exports.IMDIV('1', exports.IMSINH(inumber));\r\n        };\r\n    \r\n        exports.IMSUB = function(inumber1, inumber2) {\r\n            // Lookup real and imaginary coefficients using Formula.js\r\n            // [http://formulajs.org]\r\n            var a = this.IMREAL(inumber1);\r\n            var b = this.IMAGINARY(inumber1);\r\n            var c = this.IMREAL(inumber2);\r\n            var d = this.IMAGINARY(inumber2);\r\n    \r\n            if (utils.anyIsError(a, b, c, d)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Lookup imaginary unit\r\n            var unit1 = inumber1.substring(inumber1.length - 1);\r\n            var unit2 = inumber2.substring(inumber2.length - 1);\r\n            var unit = 'i';\r\n            if (unit1 === 'j') {\r\n                unit = 'j';\r\n            } else if (unit2 === 'j') {\r\n                unit = 'j';\r\n            }\r\n    \r\n            // Return _ of two complex numbers\r\n            return this.COMPLEX(a - c, b - d, unit);\r\n        };\r\n    \r\n        exports.IMSUM = function() {\r\n            var args = utils.flatten(arguments);\r\n    \r\n            // Initialize result\r\n            var result = args[0];\r\n    \r\n            // Loop on all numbers\r\n            for (var i = 1; i < args.length; i++) {\r\n                // Lookup coefficients of two complex numbers\r\n                var a = this.IMREAL(result);\r\n                var b = this.IMAGINARY(result);\r\n                var c = this.IMREAL(args[i]);\r\n                var d = this.IMAGINARY(args[i]);\r\n    \r\n                if (utils.anyIsError(a, b, c, d)) {\r\n                  return error.value;\r\n                }\r\n    \r\n                // Complute product of two complex numbers\r\n                result = this.COMPLEX(a + c, b + d);\r\n            }\r\n    \r\n            // Return sum of complex numbers\r\n            return result;\r\n        };\r\n    \r\n        exports.IMTAN = function(inumber) {\r\n            // Return error if inumber is a logical value\r\n            if (inumber === true || inumber === false) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Lookup real and imaginary coefficients using Formula.js\r\n            // [http://formulajs.org]\r\n            var x = exports.IMREAL(inumber);\r\n            var y = exports.IMAGINARY(inumber);\r\n    \r\n            if (utils.anyIsError(x, y)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return tangent of complex number\r\n            return this.IMDIV(this.IMSIN(inumber), this.IMCOS(inumber));\r\n        };\r\n    \r\n        exports.OCT2BIN = function(number, places) {\r\n            // Return error if number is not hexadecimal or contains more than ten\r\n            // characters (10 digits)\r\n            if (!/^[0-7]{1,10}$/.test(number)) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Check if number is negative\r\n            var negative = (number.length === 10 && number.substring(0, 1) === '7') ? true : false;\r\n    \r\n            // Convert octal number to decimal\r\n            var decimal = (negative) ? parseInt(number, 8) - 1073741824 : parseInt(number, 8);\r\n    \r\n            // Return error if number is lower than -512 or greater than 511\r\n            if (decimal < -512 || decimal > 511) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Ignore places and return a 10-character binary number if number is\r\n            // negative\r\n            if (negative) {\r\n                return '1' + REPT('0', 9 - (512 + decimal).toString(2).length) + (512 + decimal).toString(2);\r\n            }\r\n    \r\n            // Convert decimal number to binary\r\n            var result = decimal.toString(2);\r\n    \r\n            // Return binary number using the minimum number of characters necessary\r\n            // if places is undefined\r\n            if (typeof places === 'undefined') {\r\n                return result;\r\n            } else {\r\n                // Return error if places is nonnumeric\r\n                if (isNaN(places)) {\r\n                  return error.value;\r\n                }\r\n    \r\n                // Return error if places is negative\r\n                if (places < 0) {\r\n                  return error.num;\r\n                }\r\n    \r\n                // Truncate places in case it is not an integer\r\n                places = Math.floor(places);\r\n    \r\n                // Pad return value with leading 0s (zeros) if necessary (using\r\n                // Underscore.string)\r\n                return (places >= result.length) ? REPT('0', places - result.length) + result : error.num;\r\n            }\r\n        };\r\n    \r\n        exports.OCT2DEC = function(number) {\r\n            // Return error if number is not octal or contains more than ten\r\n            // characters (10 digits)\r\n            if (!/^[0-7]{1,10}$/.test(number)) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Convert octal number to decimal\r\n            var decimal = parseInt(number, 8);\r\n    \r\n            // Return decimal number\r\n            return (decimal >= 536870912) ? decimal - 1073741824 : decimal;\r\n        };\r\n    \r\n        exports.OCT2HEX = function(number, places) {\r\n            // Return error if number is not octal or contains more than ten\r\n            // characters (10 digits)\r\n            if (!/^[0-7]{1,10}$/.test(number)) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Convert octal number to decimal\r\n            var decimal = parseInt(number, 8);\r\n    \r\n            // Ignore places and return a 10-character octal number if number is\r\n            // negative\r\n            if (decimal >= 536870912) {\r\n                return 'ff' + (decimal + 3221225472).toString(16);\r\n            }\r\n    \r\n            // Convert decimal number to hexadecimal\r\n            var result = decimal.toString(16);\r\n    \r\n            // Return hexadecimal number using the minimum number of characters\r\n            // necessary if places is undefined\r\n            if (places === undefined) {\r\n                return result;\r\n            } else {\r\n                // Return error if places is nonnumeric\r\n                if (isNaN(places)) {\r\n                  return error.value;\r\n                }\r\n    \r\n                // Return error if places is negative\r\n                if (places < 0) {\r\n                  return error.num;\r\n                }\r\n    \r\n                // Truncate places in case it is not an integer\r\n                places = Math.floor(places);\r\n    \r\n                // Pad return value with leading 0s (zeros) if necessary (using\r\n                // Underscore.string)\r\n                return (places >= result.length) ? REPT('0', places - result.length) + result : error.num;\r\n            }\r\n        };\r\n    \r\n        return exports;\r\n    })();\r\n    \r\n    jexcel.methods.financial = (function() {\r\n        var exports = {};\r\n    \r\n        function validDate(d) {\r\n            return d && d.getTime && !isNaN(d.getTime());\r\n        }\r\n    \r\n        function ensureDate(d) {\r\n            return (d instanceof Date)?d:new Date(d);\r\n        }\r\n    \r\n        exports.ACCRINT = function(issue, first, settlement, rate, par, frequency, basis) {\r\n            // Return error if either date is invalid\r\n            issue        = ensureDate(issue);\r\n            first        = ensureDate(first);\r\n            settlement = ensureDate(settlement);\r\n            if (!validDate(issue) || !validDate(first) || !validDate(settlement)) {\r\n                return '#VALUE!';\r\n            }\r\n    \r\n            // Return error if either rate or par are lower than or equal to zero\r\n            if (rate <= 0 || par <= 0) {\r\n                return '#NUM!';\r\n            }\r\n    \r\n            // Return error if frequency is neither 1, 2, or 4\r\n            if ([1, 2, 4].indexOf(frequency) === -1) {\r\n                return '#NUM!';\r\n            }\r\n    \r\n            // Return error if basis is neither 0, 1, 2, 3, or 4\r\n            if ([0, 1, 2, 3, 4].indexOf(basis) === -1) {\r\n                return '#NUM!';\r\n            }\r\n    \r\n            // Return error if settlement is before or equal to issue\r\n            if (settlement <= issue) {\r\n                return '#NUM!';\r\n            }\r\n    \r\n            // Set default values\r\n            par   = par   || 0;\r\n            basis = basis || 0;\r\n    \r\n            // Compute accrued interest\r\n            return par * rate * YEARFRAC(issue, settlement, basis);\r\n        };\r\n    \r\n        exports.ACCRINTM = null;\r\n    \r\n        exports.AMORDEGRC = null;\r\n    \r\n        exports.AMORLINC = null;\r\n    \r\n        exports.COUPDAYBS = null;\r\n    \r\n        exports.COUPDAYS = null;\r\n    \r\n        exports.COUPDAYSNC = null;\r\n    \r\n        exports.COUPNCD = null;\r\n    \r\n        exports.COUPNUM = null;\r\n    \r\n        exports.COUPPCD = null;\r\n    \r\n        exports.CUMIPMT = function(rate, periods, value, start, end, type) {\r\n            // Credits: algorithm inspired by Apache OpenOffice\r\n            // Credits: Hannes Stiebitzhofer for the translations of function and\r\n                // variable names\r\n            // Requires exports.FV() and exports.PMT() from exports.js\r\n                // [http://stoic.com/exports/]\r\n    \r\n            rate = utils.parseNumber(rate);\r\n            periods = utils.parseNumber(periods);\r\n            value = utils.parseNumber(value);\r\n            if (utils.anyIsError(rate, periods, value)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return error if either rate, periods, or value are lower than or\r\n                // equal to zero\r\n            if (rate <= 0 || periods <= 0 || value <= 0) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if start < 1, end < 1, or start > end\r\n            if (start < 1 || end < 1 || start > end) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if type is neither 0 nor 1\r\n            if (type !== 0 && type !== 1) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Compute cumulative interest\r\n            var payment = exports.PMT(rate, periods, value, 0, type);\r\n            var interest = 0;\r\n    \r\n            if (start === 1) {\r\n                if (type === 0) {\r\n                    interest = -value;\r\n                    start++;\r\n                }\r\n            }\r\n    \r\n            for (var i = start; i <= end; i++) {\r\n                if (type === 1) {\r\n                    interest += exports.FV(rate, i - 2, payment, value, 1) - payment;\r\n                } else {\r\n                    interest += exports.FV(rate, i - 1, payment, value, 0);\r\n                }\r\n            }\r\n            interest *= rate;\r\n    \r\n            // Return cumulative interest\r\n            return interest;\r\n        };\r\n    \r\n        exports.CUMPRINC = function(rate, periods, value, start, end, type) {\r\n            // Credits: algorithm inspired by Apache OpenOffice\r\n            // Credits: Hannes Stiebitzhofer for the translations of function and\r\n                // variable names\r\n    \r\n            rate = utils.parseNumber(rate);\r\n            periods = utils.parseNumber(periods);\r\n            value = utils.parseNumber(value);\r\n            if (utils.anyIsError(rate, periods, value)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return error if either rate, periods, or value are lower than or\r\n                // equal to zero\r\n            if (rate <= 0 || periods <= 0 || value <= 0) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if start < 1, end < 1, or start > end\r\n            if (start < 1 || end < 1 || start > end) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if type is neither 0 nor 1\r\n            if (type !== 0 && type !== 1) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Compute cumulative principal\r\n            var payment = exports.PMT(rate, periods, value, 0, type);\r\n            var principal = 0;\r\n            if (start === 1) {\r\n                if (type === 0) {\r\n                    principal = payment + value * rate;\r\n                } else {\r\n                    principal = payment;\r\n                }\r\n                start++;\r\n            }\r\n            for (var i = start; i <= end; i++) {\r\n                if (type > 0) {\r\n                    principal += payment - (exports.FV(rate, i - 2, payment, value, 1) - payment) * rate;\r\n                } else {\r\n                    principal += payment - exports.FV(rate, i - 1, payment, value, 0) * rate;\r\n                }\r\n            }\r\n    \r\n            // Return cumulative principal\r\n            return principal;\r\n        };\r\n    \r\n        exports.DB = function(cost, salvage, life, period, month) {\r\n            // Initialize month\r\n            month = (month === undefined) ? 12 : month;\r\n    \r\n            cost = utils.parseNumber(cost);\r\n            salvage = utils.parseNumber(salvage);\r\n            life = utils.parseNumber(life);\r\n            period = utils.parseNumber(period);\r\n            month = utils.parseNumber(month);\r\n            if (utils.anyIsError(cost, salvage, life, period, month)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return error if any of the parameters is negative\r\n            if (cost < 0 || salvage < 0 || life < 0 || period < 0) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if month is not an integer between 1 and 12\r\n            if ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].indexOf(month) === -1) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if period is greater than life\r\n            if (period > life) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return 0 (zero) if salvage is greater than or equal to cost\r\n            if (salvage >= cost) {\r\n                return 0;\r\n            }\r\n    \r\n            // Rate is rounded to three decimals places\r\n            var rate = (1 - Math.pow(salvage / cost, 1 / life)).toFixed(3);\r\n    \r\n            // Compute initial depreciation\r\n            var initial = cost * rate * month / 12;\r\n    \r\n            // Compute total depreciation\r\n            var total = initial;\r\n            var current = 0;\r\n            var ceiling = (period === life) ? life - 1 : period;\r\n            for (var i = 2; i <= ceiling; i++) {\r\n                current = (cost - total) * rate;\r\n                total += current;\r\n            }\r\n    \r\n            // Depreciation for the first and last periods are special cases\r\n            if (period === 1) {\r\n                // First period\r\n                return initial;\r\n            } else if (period === life) {\r\n                // Last period\r\n                return (cost - total) * rate;\r\n            } else {\r\n                return current;\r\n            }\r\n        };\r\n    \r\n        exports.DDB = function(cost, salvage, life, period, factor) {\r\n            // Initialize factor\r\n            factor = (factor === undefined) ? 2 : factor;\r\n    \r\n            cost = utils.parseNumber(cost);\r\n            salvage = utils.parseNumber(salvage);\r\n            life = utils.parseNumber(life);\r\n            period = utils.parseNumber(period);\r\n            factor = utils.parseNumber(factor);\r\n            if (utils.anyIsError(cost, salvage, life, period, factor)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return error if any of the parameters is negative or if factor is\r\n                // null\r\n            if (cost < 0 || salvage < 0 || life < 0 || period < 0 || factor <= 0) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if period is greater than life\r\n            if (period > life) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return 0 (zero) if salvage is greater than or equal to cost\r\n            if (salvage >= cost) {\r\n                return 0;\r\n            }\r\n    \r\n            // Compute depreciation\r\n            var total = 0;\r\n            var current = 0;\r\n            for (var i = 1; i <= period; i++) {\r\n                current = Math.min((cost - total) * (factor / life), (cost - salvage - total));\r\n                total += current;\r\n            }\r\n    \r\n            // Return depreciation\r\n            return current;\r\n        };\r\n    \r\n        exports.DISC = null;\r\n    \r\n        exports.DOLLARDE = function(dollar, fraction) {\r\n            // Credits: algorithm inspired by Apache OpenOffice\r\n    \r\n            dollar = utils.parseNumber(dollar);\r\n            fraction = utils.parseNumber(fraction);\r\n            if (utils.anyIsError(dollar, fraction)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return error if fraction is negative\r\n            if (fraction < 0) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if fraction is greater than or equal to 0 and less than\r\n                // 1\r\n            if (fraction >= 0 && fraction < 1) {\r\n                return error.div0;\r\n            }\r\n    \r\n            // Truncate fraction if it is not an integer\r\n            fraction = parseInt(fraction, 10);\r\n    \r\n            // Compute integer part\r\n            var result = parseInt(dollar, 10);\r\n    \r\n            // Add decimal part\r\n            result += (dollar % 1) * Math.pow(10, Math.ceil(Math.log(fraction) / Math.LN10)) / fraction;\r\n    \r\n            // Round result\r\n            var power = Math.pow(10, Math.ceil(Math.log(fraction) / Math.LN2) + 1);\r\n            result = Math.round(result * power) / power;\r\n    \r\n            // Return converted dollar price\r\n            return result;\r\n        };\r\n    \r\n        exports.DOLLARFR = function(dollar, fraction) {\r\n            // Credits: algorithm inspired by Apache OpenOffice\r\n    \r\n            dollar = utils.parseNumber(dollar);\r\n            fraction = utils.parseNumber(fraction);\r\n            if (utils.anyIsError(dollar, fraction)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return error if fraction is negative\r\n            if (fraction < 0) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if fraction is greater than or equal to 0 and less than\r\n                // 1\r\n            if (fraction >= 0 && fraction < 1) {\r\n                return error.div0;\r\n            }\r\n    \r\n            // Truncate fraction if it is not an integer\r\n            fraction = parseInt(fraction, 10);\r\n    \r\n            // Compute integer part\r\n            var result = parseInt(dollar, 10);\r\n    \r\n            // Add decimal part\r\n            result += (dollar % 1) * Math.pow(10, -Math.ceil(Math.log(fraction) / Math.LN10)) * fraction;\r\n    \r\n            // Return converted dollar price\r\n            return result;\r\n        };\r\n    \r\n        exports.DURATION = null;\r\n    \r\n        exports.EFFECT = function(rate, periods) {\r\n            rate = utils.parseNumber(rate);\r\n            periods = utils.parseNumber(periods);\r\n            if (utils.anyIsError(rate, periods)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return error if rate <=0 or periods < 1\r\n            if (rate <= 0 || periods < 1) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Truncate periods if it is not an integer\r\n            periods = parseInt(periods, 10);\r\n    \r\n            // Return effective annual interest rate\r\n            return Math.pow(1 + rate / periods, periods) - 1;\r\n        };\r\n    \r\n        exports.FV = function(rate, periods, payment, value, type) {\r\n            // Credits: algorithm inspired by Apache OpenOffice\r\n    \r\n            value = value || 0;\r\n            type = type || 0;\r\n    \r\n            rate = utils.parseNumber(rate);\r\n            periods = utils.parseNumber(periods);\r\n            payment = utils.parseNumber(payment);\r\n            value = utils.parseNumber(value);\r\n            type = utils.parseNumber(type);\r\n            if (utils.anyIsError(rate, periods, payment, value, type)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return future value\r\n            var result;\r\n            if (rate === 0) {\r\n                result = value + payment * periods;\r\n            } else {\r\n                var term = Math.pow(1 + rate, periods);\r\n                if (type === 1) {\r\n                    result = value * term + payment * (1 + rate) * (term - 1) / rate;\r\n                } else {\r\n                    result = value * term + payment * (term - 1) / rate;\r\n                }\r\n            }\r\n            return -result;\r\n        };\r\n    \r\n        exports.FVSCHEDULE = function(principal, schedule) {\r\n            principal = utils.parseNumber(principal);\r\n            schedule = utils.parseNumberArray(utils.flatten(schedule));\r\n            if (utils.anyIsError(principal, schedule)) {\r\n                return error.value;\r\n            }\r\n    \r\n            var n = schedule.length;\r\n            var future = principal;\r\n    \r\n            // Apply all interests in schedule\r\n            for (var i = 0; i < n; i++) {\r\n                // Apply scheduled interest\r\n                future *= 1 + schedule[i];\r\n            }\r\n    \r\n            // Return future value\r\n            return future;\r\n        };\r\n    \r\n        exports.INTRATE = null;\r\n    \r\n        exports.IPMT = function(rate, period, periods, present, future, type) {\r\n            // Credits: algorithm inspired by Apache OpenOffice\r\n    \r\n            future = future || 0;\r\n            type = type || 0;\r\n    \r\n            rate = utils.parseNumber(rate);\r\n            period = utils.parseNumber(period);\r\n            periods = utils.parseNumber(periods);\r\n            present = utils.parseNumber(present);\r\n            future = utils.parseNumber(future);\r\n            type = utils.parseNumber(type);\r\n            if (utils.anyIsError(rate, period, periods, present, future, type)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Compute payment\r\n            var payment = exports.PMT(rate, periods, present, future, type);\r\n    \r\n            // Compute interest\r\n            var interest;\r\n            if (period === 1) {\r\n                if (type === 1) {\r\n                    interest = 0;\r\n                } else {\r\n                    interest = -present;\r\n                }\r\n            } else {\r\n                if (type === 1) {\r\n                    interest = exports.FV(rate, period - 2, payment, present, 1) - payment;\r\n                } else {\r\n                    interest = exports.FV(rate, period - 1, payment, present, 0);\r\n                }\r\n            }\r\n    \r\n            // Return interest\r\n            return interest * rate;\r\n        };\r\n    \r\n        exports.IRR = function(values, guess) {\r\n            // Credits: algorithm inspired by Apache OpenOffice\r\n    \r\n            guess = guess || 0;\r\n    \r\n            values = utils.parseNumberArray(utils.flatten(values));\r\n            guess = utils.parseNumber(guess);\r\n            if (utils.anyIsError(values, guess)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Calculates the resulting amount\r\n            var irrResult = function(values, dates, rate) {\r\n                var r = rate + 1;\r\n                var result = values[0];\r\n                for (var i = 1; i < values.length; i++) {\r\n                    result += values[i] / Math.pow(r, (dates[i] - dates[0]) / 365);\r\n                }\r\n                return result;\r\n            };\r\n    \r\n            // Calculates the first derivation\r\n            var irrResultDeriv = function(values, dates, rate) {\r\n                var r = rate + 1;\r\n                var result = 0;\r\n                for (var i = 1; i < values.length; i++) {\r\n                    var frac = (dates[i] - dates[0]) / 365;\r\n                    result -= frac * values[i] / Math.pow(r, frac + 1);\r\n                }\r\n                return result;\r\n            };\r\n    \r\n            // Initialize dates and check that values contains at least one positive\r\n                // value and one negative value\r\n            var dates = [];\r\n            var positive = false;\r\n            var negative = false;\r\n            for (var i = 0; i < values.length; i++) {\r\n                dates[i] = (i === 0) ? 0 : dates[i - 1] + 365;\r\n                if (values[i] > 0) {\r\n                    positive = true;\r\n                }\r\n                if (values[i] < 0) {\r\n                    negative = true;\r\n                }\r\n            }\r\n    \r\n            // Return error if values does not contain at least one positive value\r\n                // and one negative value\r\n            if (!positive || !negative) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Initialize guess and resultRate\r\n            guess = (guess === undefined) ? 0.1 : guess;\r\n            var resultRate = guess;\r\n    \r\n            // Set maximum epsilon for end of iteration\r\n            var epsMax = 1e-10;\r\n    \r\n            // Implement Newton's method\r\n            var newRate, epsRate, resultValue;\r\n            var contLoop = true;\r\n            do {\r\n                resultValue = irrResult(values, dates, resultRate);\r\n                newRate = resultRate - resultValue / irrResultDeriv(values, dates, resultRate);\r\n                epsRate = Math.abs(newRate - resultRate);\r\n                resultRate = newRate;\r\n                contLoop = (epsRate > epsMax) && (Math.abs(resultValue) > epsMax);\r\n            } while (contLoop);\r\n    \r\n            // Return internal rate of return\r\n            return resultRate;\r\n        };\r\n    \r\n        exports.ISPMT = function(rate, period, periods, value) {\r\n            rate = utils.parseNumber(rate);\r\n            period = utils.parseNumber(period);\r\n            periods = utils.parseNumber(periods);\r\n            value = utils.parseNumber(value);\r\n            if (utils.anyIsError(rate, period, periods, value)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return interest\r\n            return value * rate * (period / periods - 1);\r\n        };\r\n    \r\n        exports.MDURATION = null;\r\n    \r\n        exports.MIRR = function(values, finance_rate, reinvest_rate) {\r\n            values = utils.parseNumberArray(utils.flatten(values));\r\n            finance_rate = utils.parseNumber(finance_rate);\r\n            reinvest_rate = utils.parseNumber(reinvest_rate);\r\n            if (utils.anyIsError(values, finance_rate, reinvest_rate)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Initialize number of values\r\n            var n = values.length;\r\n    \r\n            // Lookup payments (negative values) and incomes (positive values)\r\n            var payments = [];\r\n            var incomes = [];\r\n            for (var i = 0; i < n; i++) {\r\n                if (values[i] < 0) {\r\n                    payments.push(values[i]);\r\n                } else {\r\n                    incomes.push(values[i]);\r\n                }\r\n            }\r\n    \r\n            // Return modified internal rate of return\r\n            var num = -exports.NPV(reinvest_rate, incomes) * Math.pow(1 + reinvest_rate, n - 1);\r\n            var den = exports.NPV(finance_rate, payments) * (1 + finance_rate);\r\n            return Math.pow(num / den, 1 / (n - 1)) - 1;\r\n        };\r\n    \r\n        exports.NOMINAL = function(rate, periods) {\r\n            rate = utils.parseNumber(rate);\r\n            periods = utils.parseNumber(periods);\r\n            if (utils.anyIsError(rate, periods)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return error if rate <=0 or periods < 1\r\n            if (rate <= 0 || periods < 1) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Truncate periods if it is not an integer\r\n            periods = parseInt(periods, 10);\r\n    \r\n            // Return nominal annual interest rate\r\n            return (Math.pow(rate + 1, 1 / periods) - 1) * periods;\r\n        };\r\n    \r\n        exports.NPER = function(rate, payment, present, future, type) {\r\n            type = (type === undefined) ? 0 : type;\r\n            future = (future === undefined) ? 0 : future;\r\n    \r\n            rate = utils.parseNumber(rate);\r\n            payment = utils.parseNumber(payment);\r\n            present = utils.parseNumber(present);\r\n            future = utils.parseNumber(future);\r\n            type = utils.parseNumber(type);\r\n            if (utils.anyIsError(rate, payment, present, future, type)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return number of periods\r\n            var num = payment * (1 + rate * type) - future * rate;\r\n            var den = (present * rate + payment * (1 + rate * type));\r\n            return Math.log(num / den) / Math.log(1 + rate);\r\n        };\r\n    \r\n        exports.NPV = function() {\r\n            var args = utils.parseNumberArray(utils.flatten(arguments));\r\n            if (args instanceof Error) {\r\n                return args;\r\n            }\r\n    \r\n            // Lookup rate\r\n            var rate = args[0];\r\n    \r\n            // Initialize net present value\r\n            var value = 0;\r\n    \r\n            // Loop on all values\r\n            for (var j = 1; j < args.length; j++) {\r\n                value += args[j] / Math.pow(1 + rate, j);\r\n            }\r\n    \r\n            // Return net present value\r\n            return value;\r\n        };\r\n    \r\n        exports.ODDFPRICE = null;\r\n    \r\n        exports.ODDFYIELD = null;\r\n    \r\n        exports.ODDLPRICE = null;\r\n    \r\n        exports.ODDLYIELD = null;\r\n    \r\n        exports.PDURATION = function(rate, present, future) {\r\n            rate = utils.parseNumber(rate);\r\n            present = utils.parseNumber(present);\r\n            future = utils.parseNumber(future);\r\n            if (utils.anyIsError(rate, present, future)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return error if rate <=0\r\n            if (rate <= 0) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return number of periods\r\n            return (Math.log(future) - Math.log(present)) / Math.log(1 + rate);\r\n        };\r\n    \r\n        exports.PMT = function(rate, periods, present, future, type) {\r\n            // Credits: algorithm inspired by Apache OpenOffice\r\n    \r\n            future = future || 0;\r\n            type = type || 0;\r\n    \r\n            rate = utils.parseNumber(rate);\r\n            periods = utils.parseNumber(periods);\r\n            present = utils.parseNumber(present);\r\n            future = utils.parseNumber(future);\r\n            type = utils.parseNumber(type);\r\n            if (utils.anyIsError(rate, periods, present, future, type)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return payment\r\n            var result;\r\n            if (rate === 0) {\r\n                result = (present + future) / periods;\r\n            } else {\r\n                var term = Math.pow(1 + rate, periods);\r\n                if (type === 1) {\r\n                    result = (future * rate / (term - 1) + present * rate / (1 - 1 / term)) / (1 + rate);\r\n                } else {\r\n                    result = future * rate / (term - 1) + present * rate / (1 - 1 / term);\r\n                }\r\n            }\r\n            return -result;\r\n        };\r\n    \r\n        exports.PPMT = function(rate, period, periods, present, future, type) {\r\n            future = future || 0;\r\n            type = type || 0;\r\n    \r\n            rate = utils.parseNumber(rate);\r\n            periods = utils.parseNumber(periods);\r\n            present = utils.parseNumber(present);\r\n            future = utils.parseNumber(future);\r\n            type = utils.parseNumber(type);\r\n            if (utils.anyIsError(rate, periods, present, future, type)) {\r\n                return error.value;\r\n            }\r\n    \r\n            return exports.PMT(rate, periods, present, future, type) - exports.IPMT(rate, period, periods, present, future, type);\r\n        };\r\n    \r\n        exports.PRICE = null;\r\n    \r\n        exports.PRICEDISC = null;\r\n    \r\n        exports.PRICEMAT = null;\r\n    \r\n        exports.PV = function(rate, periods, payment, future, type) {\r\n            future = future || 0;\r\n            type = type || 0;\r\n    \r\n            rate = utils.parseNumber(rate);\r\n            periods = utils.parseNumber(periods);\r\n            payment = utils.parseNumber(payment);\r\n            future = utils.parseNumber(future);\r\n            type = utils.parseNumber(type);\r\n            if (utils.anyIsError(rate, periods, payment, future, type)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return present value\r\n            if (rate === 0) {\r\n                return -payment * periods - future;\r\n            } else {\r\n                return (((1 - Math.pow(1 + rate, periods)) / rate) * payment * (1 + rate * type) - future) / Math.pow(1 + rate, periods);\r\n            }\r\n        };\r\n    \r\n        exports.RATE = function(periods, payment, present, future, type, guess) {\r\n            // Credits: rabugento\r\n    \r\n            guess = (guess === undefined) ? 0.01 : guess;\r\n            future = (future === undefined) ? 0 : future;\r\n            type = (type === undefined) ? 0 : type;\r\n    \r\n            periods = utils.parseNumber(periods);\r\n            payment = utils.parseNumber(payment);\r\n            present = utils.parseNumber(present);\r\n            future = utils.parseNumber(future);\r\n            type = utils.parseNumber(type);\r\n            guess = utils.parseNumber(guess);\r\n            if (utils.anyIsError(periods, payment, present, future, type, guess)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Set maximum epsilon for end of iteration\r\n            var epsMax = 1e-6;\r\n    \r\n            // Set maximum number of iterations\r\n            var iterMax = 100;\r\n            var iter = 0;\r\n            var close = false;\r\n            var rate = guess;\r\n    \r\n            while (iter < iterMax && !close) {\r\n                var t1 = Math.pow(rate + 1, periods);\r\n                var t2 = Math.pow(rate + 1, periods - 1);\r\n    \r\n                var f1 = future + t1 * present + payment * (t1 - 1) * (rate * type + 1) / rate;\r\n                var f2 = periods * t2 * present - payment * (t1 - 1) *(rate * type + 1) / Math.pow(rate,2);\r\n                var f3 = periods * payment * t2 * (rate * type + 1) / rate + payment * (t1 - 1) * type / rate;\r\n    \r\n                var newRate = rate - f1 / (f2 + f3);\r\n    \r\n                if (Math.abs(newRate - rate) < epsMax) close = true;\r\n                iter++\r\n                rate = newRate;\r\n            }\r\n    \r\n            if (!close) return Number.NaN + rate;\r\n            return rate;\r\n        };\r\n    \r\n        // TODO\r\n        exports.RECEIVED = null;\r\n    \r\n        exports.RRI = function(periods, present, future) {\r\n            periods = utils.parseNumber(periods);\r\n            present = utils.parseNumber(present);\r\n            future = utils.parseNumber(future);\r\n            if (utils.anyIsError(periods, present, future)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return error if periods or present is equal to 0 (zero)\r\n            if (periods === 0 || present === 0) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return equivalent interest rate\r\n            return Math.pow(future / present, 1 / periods) - 1;\r\n        };\r\n    \r\n        exports.SLN = function(cost, salvage, life) {\r\n            cost = utils.parseNumber(cost);\r\n            salvage = utils.parseNumber(salvage);\r\n            life = utils.parseNumber(life);\r\n            if (utils.anyIsError(cost, salvage, life)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return error if life equal to 0 (zero)\r\n            if (life === 0) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return straight-line depreciation\r\n            return (cost - salvage) / life;\r\n        };\r\n    \r\n        exports.SYD = function(cost, salvage, life, period) {\r\n            // Return error if any of the parameters is not a number\r\n            cost = utils.parseNumber(cost);\r\n            salvage = utils.parseNumber(salvage);\r\n            life = utils.parseNumber(life);\r\n            period = utils.parseNumber(period);\r\n            if (utils.anyIsError(cost, salvage, life, period)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return error if life equal to 0 (zero)\r\n            if (life === 0) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if period is lower than 1 or greater than life\r\n            if (period < 1 || period > life) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Truncate period if it is not an integer\r\n            period = parseInt(period, 10);\r\n    \r\n            // Return straight-line depreciation\r\n            return ((cost - salvage) * (life - period + 1) * 2) / (life * (life + 1));\r\n        };\r\n    \r\n        exports.TBILLEQ = function(settlement, maturity, discount) {\r\n            settlement = utils.parseDate(settlement);\r\n            maturity = utils.parseDate(maturity);\r\n            discount = utils.parseNumber(discount);\r\n            if (utils.anyIsError(settlement, maturity, discount)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return error if discount is lower than or equal to zero\r\n            if (discount <= 0) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if settlement is greater than maturity\r\n            if (settlement > maturity) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if maturity is more than one year after settlement\r\n            if (maturity - settlement > 365 * 24 * 60 * 60 * 1000) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return bond-equivalent yield\r\n            return (365 * discount) / (360 - discount * DAYS360(settlement, maturity, false));\r\n        };\r\n    \r\n        exports.TBILLPRICE = function(settlement, maturity, discount) {\r\n            settlement = utils.parseDate(settlement);\r\n            maturity = utils.parseDate(maturity);\r\n            discount = utils.parseNumber(discount);\r\n            if (utils.anyIsError(settlement, maturity, discount)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return error if discount is lower than or equal to zero\r\n            if (discount <= 0) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if settlement is greater than maturity\r\n            if (settlement > maturity) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if maturity is more than one year after settlement\r\n            if (maturity - settlement > 365 * 24 * 60 * 60 * 1000) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return bond-equivalent yield\r\n            return 100 * (1 - discount * DAYS360(settlement, maturity, false) / 360);\r\n        };\r\n    \r\n        exports.TBILLYIELD = function(settlement, maturity, price) {\r\n            settlement = utils.parseDate(settlement);\r\n            maturity = utils.parseDate(maturity);\r\n            price = utils.parseNumber(price);\r\n            if (utils.anyIsError(settlement, maturity, price)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Return error if price is lower than or equal to zero\r\n            if (price <= 0) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if settlement is greater than maturity\r\n            if (settlement > maturity) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return error if maturity is more than one year after settlement\r\n            if (maturity - settlement > 365 * 24 * 60 * 60 * 1000) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Return bond-equivalent yield\r\n            return (100 - price) * 360 / (price * DAYS360(settlement, maturity, false));\r\n        };\r\n    \r\n        exports.VDB = null;\r\n    \r\n        exports.XIRR = function(values, dates, guess) {\r\n            // Credits: algorithm inspired by Apache OpenOffice\r\n    \r\n            values = utils.parseNumberArray(utils.flatten(values));\r\n            dates = utils.parseDateArray(utils.flatten(dates));\r\n            guess = utils.parseNumber(guess);\r\n            if (utils.anyIsError(values, dates, guess)) {\r\n                return error.value;\r\n            }\r\n    \r\n            // Calculates the resulting amount\r\n            var irrResult = function(values, dates, rate) {\r\n                var r = rate + 1;\r\n                var result = values[0];\r\n                for (var i = 1; i < values.length; i++) {\r\n                    result += values[i] / Math.pow(r, DAYS(dates[i], dates[0]) / 365);\r\n                }\r\n                return result;\r\n            };\r\n    \r\n            // Calculates the first derivation\r\n            var irrResultDeriv = function(values, dates, rate) {\r\n                var r = rate + 1;\r\n                var result = 0;\r\n                for (var i = 1; i < values.length; i++) {\r\n                    var frac = DAYS(dates[i], dates[0]) / 365;\r\n                    result -= frac * values[i] / Math.pow(r, frac + 1);\r\n                }\r\n                return result;\r\n            };\r\n    \r\n            // Check that values contains at least one positive value and one\r\n                // negative value\r\n            var positive = false;\r\n            var negative = false;\r\n            for (var i = 0; i < values.length; i++) {\r\n                if (values[i] > 0) {\r\n                    positive = true;\r\n                }\r\n                if (values[i] < 0) {\r\n                    negative = true;\r\n                }\r\n            }\r\n    \r\n            // Return error if values does not contain at least one positive value\r\n                // and one negative value\r\n            if (!positive || !negative) {\r\n                return error.num;\r\n            }\r\n    \r\n            // Initialize guess and resultRate\r\n            guess = guess || 0.1;\r\n            var resultRate = guess;\r\n    \r\n            // Set maximum epsilon for end of iteration\r\n            var epsMax = 1e-10;\r\n    \r\n            // Implement Newton's method\r\n            var newRate, epsRate, resultValue;\r\n            var contLoop = true;\r\n            do {\r\n                resultValue = irrResult(values, dates, resultRate);\r\n                newRate = resultRate - resultValue / irrResultDeriv(values, dates, resultRate);\r\n                epsRate = Math.abs(newRate - resultRate);\r\n                resultRate = newRate;\r\n                contLoop = (epsRate > epsMax) && (Math.abs(resultValue) > epsMax);\r\n            } while (contLoop);\r\n    \r\n            // Return internal rate of return\r\n            return resultRate;\r\n        };\r\n    \r\n        exports.XNPV = function(rate, values, dates) {\r\n            rate = utils.parseNumber(rate);\r\n            values = utils.parseNumberArray(utils.flatten(values));\r\n            dates = utils.parseDateArray(utils.flatten(dates));\r\n            if (utils.anyIsError(rate, values, dates)) {\r\n                return error.value;\r\n            }\r\n    \r\n            var result = 0;\r\n            for (var i = 0; i < values.length; i++) {\r\n                result += values[i] / Math.pow(1 + rate, DAYS(dates[i], dates[0]) / 365);\r\n            }\r\n            return result;\r\n        };\r\n    \r\n        exports.YIELD = null;\r\n    \r\n        exports.YIELDDISC = null;\r\n    \r\n        exports.YIELDMAT = null;\r\n    \r\n        return exports;\r\n    })();\r\n    \r\n    jexcel.methods.information = (function() {\r\n        var exports = {};\r\n        exports.CELL = null;\r\n    \r\n        exports.ERROR = {};\r\n        exports.ERROR.TYPE = function(error_val) {\r\n            switch (error_val) {\r\n                case error.nil: return 1;\r\n                case error.div0: return 2;\r\n                case error.value: return 3;\r\n                case error.ref: return 4;\r\n                case error.name: return 5;\r\n                case error.num: return 6;\r\n                case error.na: return 7;\r\n                case error.data: return 8;\r\n            }\r\n            return error.na;\r\n        };\r\n    \r\n        exports.INFO = null;\r\n    \r\n        exports.ISBLANK = function(value) {\r\n            return value === null;\r\n        };\r\n    \r\n        exports.ISBINARY = function (number) {\r\n            return (/^[01]{1,10}$/).test(number);\r\n        };\r\n    \r\n        exports.ISERR = function(value) {\r\n            return ([error.value, error.ref, error.div0, error.num, error.name, error.nil]).indexOf(value) >= 0 ||\r\n                (typeof value === 'number' && (isNaN(value) || !isFinite(value)));\r\n        };\r\n    \r\n        exports.ISERROR = function(value) {\r\n            return exports.ISERR(value) || value === error.na;\r\n        };\r\n    \r\n        exports.ISEVEN = function(number) {\r\n            return (Math.floor(Math.abs(number)) & 1) ? false : true;\r\n        };\r\n    \r\n        // TODO\r\n        exports.ISFORMULA = null;\r\n    \r\n        exports.ISLOGICAL = function(value) {\r\n            return value === true || value === false;\r\n        };\r\n    \r\n        exports.ISNA = function(value) {\r\n            return value === error.na;\r\n        };\r\n    \r\n        exports.ISNONTEXT = function(value) {\r\n            return typeof(value) !== 'string';\r\n        };\r\n    \r\n        exports.ISNUMBER = function(value) {\r\n            return typeof(value) === 'number' && !isNaN(value) && isFinite(value);\r\n        };\r\n    \r\n        exports.ISODD = function(number) {\r\n            return (Math.floor(Math.abs(number)) & 1) ? true : false;\r\n        };\r\n    \r\n        exports.ISREF = null;\r\n    \r\n        exports.ISTEXT = function(value) {\r\n            return typeof(value) === 'string';\r\n        };\r\n    \r\n        exports.N = function(value) {\r\n            if (this.ISNUMBER(value)) {\r\n                return value;\r\n            }\r\n            if (value instanceof Date) {\r\n                return value.getTime();\r\n            }\r\n            if (value === true) {\r\n                return 1;\r\n            }\r\n            if (value === false) {\r\n                return 0;\r\n            }\r\n            if (this.ISERROR(value)) {\r\n                return value;\r\n            }\r\n            return 0;\r\n        };\r\n    \r\n        exports.NA = function() {\r\n            return error.na;\r\n        };\r\n    \r\n        exports.SHEET = null;\r\n    \r\n        exports.SHEETS = null;\r\n    \r\n        exports.TYPE = function(value) {\r\n            if (this.ISNUMBER(value)) {\r\n                return 1;\r\n            }\r\n            if (this.ISTEXT(value)) {\r\n                return 2;\r\n            }\r\n            if (this.ISLOGICAL(value)) {\r\n                return 4;\r\n            }\r\n            if (this.ISERROR(value)) {\r\n                return 16;\r\n            }\r\n            if (Array.isArray(value)) {\r\n                return 64;\r\n            }\r\n        };\r\n    \r\n        return exports;\r\n    })();\r\n    \r\n    jexcel.methods.logical = (function() {\r\n        var exports = {};\r\n    \r\n        exports.AND = function() {\r\n            var args = utils.flatten(arguments);\r\n            var result = true;\r\n            for (var i = 0; i < args.length; i++) {\r\n                if (!args[i]) {\r\n                    result = false;\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n    \r\n        exports.CHOOSE = function() {\r\n            if (arguments.length < 2) {\r\n                return error.na;\r\n            }\r\n    \r\n            var index = arguments[0];\r\n            if (index < 1 || index > 254) {\r\n                return error.value;\r\n            }\r\n    \r\n            if (arguments.length < index + 1) {\r\n                return error.value;\r\n            }\r\n    \r\n            return arguments[index];\r\n        };\r\n    \r\n        exports.FALSE = function() {\r\n            return false;\r\n        };\r\n    \r\n        exports.IF = function(test, then_value, otherwise_value) {\r\n            return test ? then_value : otherwise_value;\r\n        };\r\n    \r\n        exports.IFERROR = function(value, valueIfError) {\r\n            if (ISERROR(value)) {\r\n                return valueIfError;\r\n            }\r\n            return value;\r\n        };\r\n    \r\n        exports.IFNA = function(value, value_if_na) {\r\n            return value === error.na ? value_if_na : value;\r\n        };\r\n    \r\n        exports.NOT = function(logical) {\r\n            return !logical;\r\n        };\r\n    \r\n        exports.OR = function() {\r\n            var args = utils.flatten(arguments);\r\n            var result = false;\r\n            for (var i = 0; i < args.length; i++) {\r\n                if (args[i]) {\r\n                    result = true;\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n    \r\n        exports.TRUE = function() {\r\n            return true;\r\n        };\r\n    \r\n        exports.XOR = function() {\r\n            var args = utils.flatten(arguments);\r\n            var result = 0;\r\n            for (var i = 0; i < args.length; i++) {\r\n                if (args[i]) {\r\n                    result++;\r\n                }\r\n            }\r\n            return (Math.floor(Math.abs(result)) & 1) ? true : false;\r\n        };\r\n    \r\n        exports.SWITCH = function() {\r\n            var result;\r\n            if (arguments.length > 0)  {\r\n                var targetValue = arguments[0];\r\n                var argc = arguments.length - 1;\r\n                var switchCount = Math.floor(argc / 2);\r\n                var switchSatisfied = false;\r\n                var defaultClause = argc % 2 === 0 ? null : arguments[arguments.length - 1];\r\n    \r\n                if (switchCount) {\r\n                    for (var index = 0; index < switchCount; index++) {\r\n                        if (targetValue === arguments[index * 2 + 1]) {\r\n                          result = arguments[index * 2 + 2];\r\n                          switchSatisfied = true;\r\n                          break;\r\n                        }\r\n                    }\r\n                }\r\n    \r\n                if (!switchSatisfied && defaultClause) {\r\n                    result = defaultClause;\r\n                }\r\n            }\r\n    \r\n            return result;\r\n        };\r\n    \r\n        return exports;\r\n    })();\r\n    \r\n    jexcel.methods.math = (function() {\r\n        var exports = {};\r\n    \r\n        exports.ABS = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return Math.abs(utils.parseNumber(number));\r\n        };\r\n    \r\n        exports.ACOS = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return Math.acos(number);\r\n        };\r\n    \r\n        exports.ACOSH = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return Math.log(number + Math.sqrt(number * number - 1));\r\n        };\r\n    \r\n        exports.ACOT = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return Math.atan(1 / number);\r\n        };\r\n    \r\n        exports.ACOTH = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return 0.5 * Math.log((number + 1) / (number - 1));\r\n        };\r\n    \r\n        exports.AGGREGATE = null\r\n    \r\n        exports.ARABIC = function(text) {\r\n            // Credits: Rafa? Kukawski\r\n            if (!/^M*(?:D?C{0,3}|C[MD])(?:L?X{0,3}|X[CL])(?:V?I{0,3}|I[XV])$/.test(text)) {\r\n                return error.value;\r\n            }\r\n            var r = 0;\r\n            text.replace(/[MDLV]|C[MD]?|X[CL]?|I[XV]?/g, function(i) {\r\n                r += {\r\n                    M: 1000,\r\n                    CM: 900,\r\n                    D: 500,\r\n                    CD: 400,\r\n                    C: 100,\r\n                    XC: 90,\r\n                    L: 50,\r\n                    XL: 40,\r\n                    X: 10,\r\n                    IX: 9,\r\n                    V: 5,\r\n                    IV: 4,\r\n                    I: 1\r\n                }[i];\r\n            });\r\n            return r;\r\n        };\r\n    \r\n        exports.ASIN = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return Math.asin(number);\r\n        };\r\n    \r\n        exports.ASINH = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return Math.log(number + Math.sqrt(number * number + 1));\r\n        };\r\n    \r\n        exports.ATAN = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return Math.atan(number);\r\n        };\r\n    \r\n        exports.ATAN2 = function(number_x, number_y) {\r\n            number_x = utils.parseNumber(number_x);\r\n            number_y = utils.parseNumber(number_y);\r\n            if (utils.anyIsError(number_x, number_y)) {\r\n                return error.value;\r\n            }\r\n            return Math.atan2(number_x, number_y);\r\n        };\r\n    \r\n        exports.ATANH = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return Math.log((1 + number) / (1 - number)) / 2;\r\n        };\r\n    \r\n        exports.BASE = function(number, radix, min_length) {\r\n            min_length = min_length || 0;\r\n    \r\n            number = utils.parseNumber(number);\r\n            radix = utils.parseNumber(radix);\r\n            min_length = utils.parseNumber(min_length);\r\n            if (utils.anyIsError(number, radix, min_length)) {\r\n                return error.value;\r\n            }\r\n            min_length = (min_length === undefined) ? 0 : min_length;\r\n            var result = number.toString(radix);\r\n            return new Array(Math.max(min_length + 1 - result.length, 0)).join('0') + result;\r\n        };\r\n    \r\n        exports.CEILING = function(number, significance, mode) {\r\n            significance = (significance === undefined) ? 1 : significance;\r\n            mode = (mode === undefined) ? 0 : mode;\r\n    \r\n            number = utils.parseNumber(number);\r\n            significance = utils.parseNumber(significance);\r\n            mode = utils.parseNumber(mode);\r\n            if (utils.anyIsError(number, significance, mode)) {\r\n                return error.value;\r\n            }\r\n            if (significance === 0) {\r\n                return 0;\r\n            }\r\n    \r\n            significance = Math.abs(significance);\r\n            if (number >= 0) {\r\n                return Math.ceil(number / significance) * significance;\r\n            } else {\r\n                if (mode === 0) {\r\n                    return -1 * Math.floor(Math.abs(number) / significance) * significance;\r\n                } else {\r\n                    return -1 * Math.ceil(Math.abs(number) / significance) * significance;\r\n                }\r\n            }\r\n        };\r\n    \r\n        exports.CEILING.MATH = exports.CEILING;\r\n    \r\n        exports.CEILING.PRECISE = exports.CEILING;\r\n    \r\n        exports.COMBIN = function(number, number_chosen) {\r\n            number = utils.parseNumber(number);\r\n            number_chosen = utils.parseNumber(number_chosen);\r\n            if (utils.anyIsError(number, number_chosen)) {\r\n                return error.value;\r\n            }\r\n            return exports.FACT(number) / (exports.FACT(number_chosen) * exports.FACT(number - number_chosen));\r\n        };\r\n    \r\n        exports.COMBINA = function(number, number_chosen) {\r\n            number = utils.parseNumber(number);\r\n            number_chosen = utils.parseNumber(number_chosen);\r\n            if (utils.anyIsError(number, number_chosen)) {\r\n                return error.value;\r\n            }\r\n            return (number === 0 && number_chosen === 0) ? 1 : exports.COMBIN(number + number_chosen - 1, number - 1);\r\n        };\r\n    \r\n        exports.COS = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return Math.cos(number);\r\n        };\r\n    \r\n        exports.COSH = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return (Math.exp(number) + Math.exp(-number)) / 2;\r\n        };\r\n    \r\n        exports.COT = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return 1 / Math.tan(number);\r\n        };\r\n    \r\n        exports.COTH = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            var e2 = Math.exp(2 * number);\r\n            return (e2 + 1) / (e2 - 1);\r\n        };\r\n    \r\n        exports.CSC = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return 1 / Math.sin(number);\r\n        };\r\n    \r\n        exports.CSCH = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return 2 / (Math.exp(number) - Math.exp(-number));\r\n        };\r\n    \r\n        exports.DECIMAL = function(number, radix) {\r\n            if (arguments.length < 1) {\r\n                return error.value;\r\n            }\r\n    \r\n    \r\n            return parseInt(number, radix);\r\n        };\r\n    \r\n        exports.DEGREES = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return number * 180 / Math.PI;\r\n        };\r\n    \r\n        exports.EVEN = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return exports.CEILING(number, -2, -1);\r\n        };\r\n    \r\n        exports.EXP = Math.exp;\r\n    \r\n        var MEMOIZED_FACT = [];\r\n        exports.FACT = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            var n = Math.floor(number);\r\n            if (n === 0 || n === 1) {\r\n                return 1;\r\n            } else if (MEMOIZED_FACT[n] > 0) {\r\n                return MEMOIZED_FACT[n];\r\n            } else {\r\n                MEMOIZED_FACT[n] = exports.FACT(n - 1) * n;\r\n                return MEMOIZED_FACT[n];\r\n            }\r\n        };\r\n    \r\n        exports.FACTDOUBLE = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            var n = Math.floor(number);\r\n            if (n <= 0) {\r\n                return 1;\r\n            } else {\r\n                return n * exports.FACTDOUBLE(n - 2);\r\n            }\r\n        };\r\n    \r\n        exports.FLOOR = function(number, significance, mode) {\r\n            significance = (significance === undefined) ? 1 : significance;\r\n            mode = (mode === undefined) ? 0 : mode;\r\n    \r\n            number = utils.parseNumber(number);\r\n            significance = utils.parseNumber(significance);\r\n            mode = utils.parseNumber(mode);\r\n            if (utils.anyIsError(number, significance, mode)) {\r\n                return error.value;\r\n            }\r\n            if (significance === 0) {\r\n                return 0;\r\n            }\r\n    \r\n            significance = Math.abs(significance);\r\n            if (number >= 0) {\r\n                return Math.floor(number / significance) * significance;\r\n            } else {\r\n                if (mode === 0) {\r\n                    return -1 * Math.ceil(Math.abs(number) / significance) * significance;\r\n                } else {\r\n                    return -1 * Math.floor(Math.abs(number) / significance) * significance;\r\n                }\r\n            }\r\n        };\r\n    \r\n        exports.FLOOR.MATH = exports.FLOOR;\r\n    \r\n        exports.GCD = null;\r\n    \r\n        exports.INT = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return Math.floor(number);\r\n        };\r\n    \r\n        exports.LCM = function() {\r\n            // Credits: Jonas Raoni Soares Silva\r\n            var o = utils.parseNumberArray(utils.flatten(arguments));\r\n            if (o instanceof Error) {\r\n                return o;\r\n            }\r\n            for (var i, j, n, d, r = 1;\r\n                (n = o.pop()) !== undefined;) {\r\n                while (n > 1) {\r\n                    if (n % 2) {\r\n                        for (i = 3, j = Math.floor(Math.sqrt(n)); i <= j && n % i; i += 2) {\r\n                          //empty\r\n                        }\r\n                        d = (i <= j) ? i : n;\r\n                    } else {\r\n                        d = 2;\r\n                    }\r\n                    for (n /= d, r *= d, i = o.length; i;\r\n                        (o[--i] % d) === 0 && (o[i] /= d) === 1 && o.splice(i, 1)) {\r\n                        //empty\r\n                    }\r\n                }\r\n            }\r\n            return r;\r\n        };\r\n    \r\n        exports.LN = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return Math.log(number);\r\n        };\r\n    \r\n        exports.LOG = function(number, base) {\r\n            number = utils.parseNumber(number);\r\n            base = (base === undefined) ? 10 : utils.parseNumber(base);\r\n    \r\n            if (utils.anyIsError(number, base)) {\r\n                return error.value;\r\n            }\r\n    \r\n            return Math.log(number) / Math.log(base);\r\n        };\r\n    \r\n        exports.LOG10 = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return Math.log(number) / Math.log(10);\r\n        };\r\n    \r\n        exports.MDETERM = null;\r\n    \r\n        exports.MINVERSE = null;\r\n    \r\n        exports.MMULT = null;\r\n    \r\n        exports.MOD = function(dividend, divisor) {\r\n            dividend = utils.parseNumber(dividend);\r\n            divisor = utils.parseNumber(divisor);\r\n            if (utils.anyIsError(dividend, divisor)) {\r\n                return error.value;\r\n            }\r\n            if (divisor === 0) {\r\n                return error.div0;\r\n            }\r\n            var modulus = Math.abs(dividend % divisor);\r\n            return (divisor > 0) ? modulus : -modulus;\r\n        };\r\n    \r\n        exports.MROUND = function(number, multiple) {\r\n            number = utils.parseNumber(number);\r\n            multiple = utils.parseNumber(multiple);\r\n            if (utils.anyIsError(number, multiple)) {\r\n                return error.value;\r\n            }\r\n            if (number * multiple < 0) {\r\n                return error.num;\r\n            }\r\n    \r\n            return Math.round(number / multiple) * multiple;\r\n        };\r\n    \r\n        exports.MULTINOMIAL = function() {\r\n            var args = utils.parseNumberArray(utils.flatten(arguments));\r\n            if (args instanceof Error) {\r\n                return args;\r\n            }\r\n            var sum = 0;\r\n            var divisor = 1;\r\n            for (var i = 0; i < args.length; i++) {\r\n                sum += args[i];\r\n                divisor *= exports.FACT(args[i]);\r\n            }\r\n            return exports.FACT(sum) / divisor;\r\n        };\r\n    \r\n        exports.MUNIT = null;\r\n    \r\n        exports.ODD = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            var temp = Math.ceil(Math.abs(number));\r\n            temp = (temp & 1) ? temp : temp + 1;\r\n            return (number > 0) ? temp : -temp;\r\n        };\r\n    \r\n        exports.PI = function() {\r\n            return Math.PI;\r\n        };\r\n    \r\n        exports.POWER = function(number, power) {\r\n            number = utils.parseNumber(number);\r\n            power = utils.parseNumber(power);\r\n            if (utils.anyIsError(number, power)) {\r\n                return error.value;\r\n            }\r\n            var result = Math.pow(number, power);\r\n            if (isNaN(result)) {\r\n                return error.num;\r\n            }\r\n    \r\n            return result;\r\n        };\r\n    \r\n        exports.PRODUCT = function() {\r\n            var args = utils.parseNumberArray(utils.flatten(arguments));\r\n            if (args instanceof Error) {\r\n                return args;\r\n            }\r\n            var result = 1;\r\n            for (var i = 0; i < args.length; i++) {\r\n                result *= args[i];\r\n            }\r\n            return result;\r\n        };\r\n    \r\n        exports.QUOTIENT = function(numerator, denominator) {\r\n            numerator = utils.parseNumber(numerator);\r\n            denominator = utils.parseNumber(denominator);\r\n            if (utils.anyIsError(numerator, denominator)) {\r\n                return error.value;\r\n            }\r\n            return parseInt(numerator / denominator, 10);\r\n        };\r\n    \r\n        exports.RADIANS = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return number * Math.PI / 180;\r\n        };\r\n    \r\n        exports.RAND = function() {\r\n            return Math.random();\r\n        };\r\n    \r\n        exports.RANDBETWEEN = function(bottom, top) {\r\n            bottom = utils.parseNumber(bottom);\r\n            top = utils.parseNumber(top);\r\n            if (utils.anyIsError(bottom, top)) {\r\n                return error.value;\r\n            }\r\n            // Creative Commons Attribution 3.0 License\r\n            // Copyright (c) 2012 eqcode\r\n            return bottom + Math.ceil((top - bottom + 1) * Math.random()) - 1;\r\n        };\r\n    \r\n        exports.ROMAN = null;\r\n    \r\n        exports.ROUND = function(number, digits) {\r\n            number = utils.parseNumber(number);\r\n            digits = utils.parseNumber(digits);\r\n            if (utils.anyIsError(number, digits)) {\r\n                return error.value;\r\n            }\r\n            return Math.round(number * Math.pow(10, digits)) / Math.pow(10, digits);\r\n        };\r\n    \r\n        exports.ROUNDDOWN = function(number, digits) {\r\n            number = utils.parseNumber(number);\r\n            digits = utils.parseNumber(digits);\r\n            if (utils.anyIsError(number, digits)) {\r\n                return error.value;\r\n            }\r\n            var sign = (number > 0) ? 1 : -1;\r\n            return sign * (Math.floor(Math.abs(number) * Math.pow(10, digits))) / Math.pow(10, digits);\r\n        };\r\n    \r\n        exports.ROUNDUP = function(number, digits) {\r\n            number = utils.parseNumber(number);\r\n            digits = utils.parseNumber(digits);\r\n            if (utils.anyIsError(number, digits)) {\r\n                return error.value;\r\n            }\r\n            var sign = (number > 0) ? 1 : -1;\r\n            return sign * (Math.ceil(Math.abs(number) * Math.pow(10, digits))) / Math.pow(10, digits);\r\n        };\r\n    \r\n        exports.SEC = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return 1 / Math.cos(number);\r\n        };\r\n    \r\n        exports.SECH = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return 2 / (Math.exp(number) + Math.exp(-number));\r\n        };\r\n    \r\n        exports.SERIESSUM = function(x, n, m, coefficients) {\r\n            x = utils.parseNumber(x);\r\n            n = utils.parseNumber(n);\r\n            m = utils.parseNumber(m);\r\n            coefficients = utils.parseNumberArray(coefficients);\r\n            if (utils.anyIsError(x, n, m, coefficients)) {\r\n                return error.value;\r\n            }\r\n            var result = coefficients[0] * Math.pow(x, n);\r\n            for (var i = 1; i < coefficients.length; i++) {\r\n                result += coefficients[i] * Math.pow(x, n + i * m);\r\n            }\r\n            return result;\r\n        };\r\n    \r\n        exports.SIGN = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            if (number < 0) {\r\n                return -1;\r\n            } else if (number === 0) {\r\n                return 0;\r\n            } else {\r\n                return 1;\r\n            }\r\n        };\r\n    \r\n        exports.SIN = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return Math.sin(number);\r\n        };\r\n    \r\n        exports.SINH = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return (Math.exp(number) - Math.exp(-number)) / 2;\r\n        };\r\n    \r\n        exports.SQRT = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            if (number < 0) {\r\n                return error.num;\r\n            }\r\n            return Math.sqrt(number);\r\n        };\r\n    \r\n        exports.SQRTPI = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return Math.sqrt(number * Math.PI);\r\n        };\r\n    \r\n        exports.SUBTOTAL = null;\r\n    \r\n        exports.ADD = function (num1, num2) {\r\n            if (arguments.length !== 2) {\r\n                return error.na;\r\n            }\r\n    \r\n            num1 = utils.parseNumber(num1);\r\n            num2 = utils.parseNumber(num2);\r\n            if (utils.anyIsError(num1, num2)) {\r\n                return error.value;\r\n            }\r\n    \r\n            return num1 + num2;\r\n        };\r\n    \r\n        exports.MINUS = function (num1, num2) {\r\n            if (arguments.length !== 2) {\r\n                return error.na;\r\n            }\r\n    \r\n            num1 = utils.parseNumber(num1);\r\n            num2 = utils.parseNumber(num2);\r\n            if (utils.anyIsError(num1, num2)) {\r\n                return error.value;\r\n            }\r\n    \r\n            return num1 - num2;\r\n        };\r\n    \r\n        exports.DIVIDE = function (dividend, divisor) {\r\n            if (arguments.length !== 2) {\r\n                return error.na;\r\n            }\r\n    \r\n            dividend = utils.parseNumber(dividend);\r\n            divisor = utils.parseNumber(divisor);\r\n            if (utils.anyIsError(dividend, divisor)) {\r\n                return error.value;\r\n            }\r\n    \r\n            if (divisor === 0) {\r\n                return error.div0;\r\n            }\r\n    \r\n            return dividend / divisor;\r\n        };\r\n    \r\n        exports.MULTIPLY = function (factor1, factor2) {\r\n            if (arguments.length !== 2) {\r\n                return error.na;\r\n            }\r\n    \r\n            factor1 = utils.parseNumber(factor1);\r\n            factor2 = utils.parseNumber(factor2);\r\n            if (utils.anyIsError(factor1, factor2)) {\r\n                return error.value;\r\n            }\r\n    \r\n            return factor1 * factor2;\r\n        };\r\n    \r\n        exports.GTE = function (num1, num2) {\r\n            if (arguments.length !== 2) {\r\n                return error.na;\r\n            }\r\n    \r\n            num1 = utils.parseNumber(num1);\r\n            num2 = utils.parseNumber(num2);\r\n            if (utils.anyIsError(num1, num2)) {\r\n                return error.error;\r\n            }\r\n    \r\n            return num1 >= num2;\r\n        };\r\n    \r\n        exports.LT = function (num1, num2) {\r\n            if (arguments.length !== 2) {\r\n                return error.na;\r\n            }\r\n    \r\n            num1 = utils.parseNumber(num1);\r\n            num2 = utils.parseNumber(num2);\r\n            if (utils.anyIsError(num1, num2)) {\r\n                return error.error;\r\n            }\r\n    \r\n            return num1 < num2;\r\n        };\r\n    \r\n        exports.LTE = function (num1, num2) {\r\n            if (arguments.length !== 2) {\r\n                return error.na;\r\n            }\r\n    \r\n            num1 = utils.parseNumber(num1);\r\n            num2 = utils.parseNumber(num2);\r\n            if (utils.anyIsError(num1, num2)) {\r\n                return error.error;\r\n            }\r\n    \r\n            return num1 <= num2;\r\n        };\r\n    \r\n        exports.EQ = function (value1, value2) {\r\n            if (arguments.length !== 2) {\r\n                return error.na;\r\n            }\r\n    \r\n            return value1 === value2;\r\n        };\r\n    \r\n        exports.NE = function (value1, value2) {\r\n            if (arguments.length !== 2) {\r\n                return error.na;\r\n            }\r\n    \r\n            return value1 !== value2;\r\n        };\r\n    \r\n        exports.POW = function (base, exponent) {\r\n            if (arguments.length !== 2) {\r\n                return error.na;\r\n            }\r\n    \r\n            base = utils.parseNumber(base);\r\n            exponent = utils.parseNumber(exponent);\r\n            if (utils.anyIsError(base, exponent)) {\r\n                return error.error;\r\n            }\r\n    \r\n            return exports.POWER(base, exponent);\r\n        };\r\n    \r\n        exports.SUM = function() {\r\n            var result = 0;\r\n            var argsKeys = Object.keys(arguments);\r\n            for (var i = 0; i < argsKeys.length; ++i) {\r\n                var elt = arguments[argsKeys[i]];\r\n                if (typeof elt === 'number') {\r\n                    result += elt;\r\n                } else if (typeof elt === 'string') {\r\n                    var parsed = parseFloat(elt);\r\n                    !isNaN(parsed) && (result += parsed);\r\n                } else if (Array.isArray(elt)) {\r\n                    result += exports.SUM.apply(null, elt);\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n    \r\n        exports.SUMIF = function(range, criteria) {\r\n            range = utils.parseNumberArray(utils.flatten(range));\r\n            if (range instanceof Error) {\r\n                return range;\r\n            }\r\n            var result = 0;\r\n            for (var i = 0; i < range.length; i++) {\r\n                result += (eval(range[i] + criteria)) ? range[i] : 0; // jshint ignore:line\r\n            }\r\n            return result;\r\n        };\r\n    \r\n        exports.SUMIFS = function() {\r\n            var args = utils.argsToArray(arguments);\r\n            var range = utils.parseNumberArray(utils.flatten(args.shift()));\r\n            if (range instanceof Error) {\r\n                return range;\r\n            }\r\n            var criteria = args;\r\n    \r\n            var n_range_elements = range.length;\r\n            var n_criterias = criteria.length;\r\n    \r\n            var result = 0;\r\n            for (var i = 0; i < n_range_elements; i++) {\r\n                var el = range[i];\r\n                var condition = '';\r\n                for (var c = 0; c < n_criterias; c++) {\r\n                    condition += el + criteria[c];\r\n                    if (c !== n_criterias - 1) {\r\n                        condition += '&&';\r\n                    }\r\n                }\r\n                if (eval(condition)) { // jshint ignore:line\r\n                    result += el;\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n    \r\n        exports.SUMPRODUCT = null;\r\n    \r\n        exports.SUMSQ = function() {\r\n            var numbers = utils.parseNumberArray(utils.flatten(arguments));\r\n            if (numbers instanceof Error) {\r\n                return numbers;\r\n            }\r\n            var result = 0;\r\n            var length = numbers.length;\r\n            for (var i = 0; i < length; i++) {\r\n                result += (ISNUMBER(numbers[i])) ? numbers[i] * numbers[i] : 0;\r\n            }\r\n            return result;\r\n        };\r\n    \r\n        exports.SUMX2MY2 = function(array_x, array_y) {\r\n            array_x = utils.parseNumberArray(utils.flatten(array_x));\r\n            array_y = utils.parseNumberArray(utils.flatten(array_y));\r\n            if (utils.anyIsError(array_x, array_y)) {\r\n                return error.value;\r\n            }\r\n            var result = 0;\r\n            for (var i = 0; i < array_x.length; i++) {\r\n                result += array_x[i] * array_x[i] - array_y[i] * array_y[i];\r\n            }\r\n            return result;\r\n        };\r\n    \r\n        exports.SUMX2PY2 = function(array_x, array_y) {\r\n            array_x = utils.parseNumberArray(utils.flatten(array_x));\r\n            array_y = utils.parseNumberArray(utils.flatten(array_y));\r\n            if (utils.anyIsError(array_x, array_y)) {\r\n                return error.value;\r\n            }\r\n            var result = 0;\r\n            array_x = utils.parseNumberArray(utils.flatten(array_x));\r\n            array_y = utils.parseNumberArray(utils.flatten(array_y));\r\n            for (var i = 0; i < array_x.length; i++) {\r\n                result += array_x[i] * array_x[i] + array_y[i] * array_y[i];\r\n            }\r\n            return result;\r\n        };\r\n    \r\n        exports.SUMXMY2 = function(array_x, array_y) {\r\n            array_x = utils.parseNumberArray(utils.flatten(array_x));\r\n            array_y = utils.parseNumberArray(utils.flatten(array_y));\r\n            if (utils.anyIsError(array_x, array_y)) {\r\n                return error.value;\r\n            }\r\n            var result = 0;\r\n            array_x = utils.flatten(array_x);\r\n            array_y = utils.flatten(array_y);\r\n            for (var i = 0; i < array_x.length; i++) {\r\n                result += Math.pow(array_x[i] - array_y[i], 2);\r\n            }\r\n            return result;\r\n        };\r\n    \r\n        exports.TAN = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return Math.tan(number);\r\n        };\r\n    \r\n        exports.TANH = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            var e2 = Math.exp(2 * number);\r\n            return (e2 - 1) / (e2 + 1);\r\n        };\r\n    \r\n        exports.TRUNC = function(number, digits) {\r\n            digits = (digits === undefined) ? 0 : digits;\r\n            number = utils.parseNumber(number);\r\n            digits = utils.parseNumber(digits);\r\n            if (utils.anyIsError(number, digits)) {\r\n                return error.value;\r\n            }\r\n            var sign = (number > 0) ? 1 : -1;\r\n            return sign * (Math.floor(Math.abs(number) * Math.pow(10, digits))) / Math.pow(10, digits);\r\n        };\r\n    \r\n        return exports;\r\n    })();\r\n    \r\n    jexcel.methods.misc = (function() {\r\n        var exports = {};\r\n    \r\n        exports.UNIQUE = function () {\r\n            var result = [];\r\n            for (var i = 0; i < arguments.length; ++i) {\r\n                var hasElement = false;\r\n                var element = arguments[i];\r\n    \r\n                // Check if we've already seen this element.\r\n                for (var j = 0; j < result.length; ++j) {\r\n                    hasElement = result[j] === element;\r\n                    if (hasElement) { break; }\r\n                }\r\n    \r\n                // If we did not find it, add it to the result.\r\n                if (!hasElement) {\r\n                    result.push(element);\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n    \r\n        exports.FLATTEN = utils.flatten;\r\n    \r\n        exports.ARGS2ARRAY = function () {\r\n            return Array.prototype.slice.call(arguments, 0);\r\n        };\r\n    \r\n        exports.REFERENCE = function (context, reference) {\r\n            try {\r\n                var path = reference.split('.');\r\n                var result = context;\r\n                for (var i = 0; i < path.length; ++i) {\r\n                    var step = path[i];\r\n                    if (step[step.length - 1] === ']') {\r\n                        var opening = step.indexOf('[');\r\n                        var index = step.substring(opening + 1, step.length - 1);\r\n                        result = result[step.substring(0, opening)][index];\r\n                    } else {\r\n                        result = result[step];\r\n                    }\r\n                }\r\n                return result;\r\n            } catch (error) {}\r\n        };\r\n    \r\n        exports.JOIN = function (array, separator) {\r\n            return array.join(separator);\r\n        };\r\n    \r\n        exports.NUMBERS = function () {\r\n            var possibleNumbers = utils.flatten(arguments);\r\n            return possibleNumbers.filter(function (el) {\r\n                return typeof el === 'number';\r\n            });\r\n        };\r\n    \r\n        exports.NUMERAL = null;\r\n    \r\n        return exports;\r\n    })();\r\n    \r\n    jexcel.methods.text = (function() {\r\n        var exports = {};\r\n    \r\n        exports.ASC = null;\r\n    \r\n        exports.BAHTTEXT = null;\r\n    \r\n        exports.CHAR = function(number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return String.fromCharCode(number);\r\n        };\r\n    \r\n        exports.CLEAN = function(text) {\r\n            text = text || '';\r\n            var re = /[\\0-\\x1F]/g;\r\n            return text.replace(re, \"\");\r\n        };\r\n    \r\n        exports.CODE = function(text) {\r\n            text = text || '';\r\n            return text.charCodeAt(0);\r\n        };\r\n    \r\n        exports.CONCATENATE = function() {\r\n            var args = utils.flatten(arguments);\r\n    \r\n            var trueFound = 0;\r\n            while ((trueFound = args.indexOf(true)) > -1) {\r\n                args[trueFound] = 'TRUE';\r\n            }\r\n    \r\n            var falseFound = 0;\r\n            while ((falseFound = args.indexOf(false)) > -1) {\r\n                args[falseFound] = 'FALSE';\r\n            }\r\n    \r\n            return args.join('');\r\n        };\r\n    \r\n        exports.DBCS = null;\r\n    \r\n        exports.DOLLAR = null;\r\n    \r\n        exports.EXACT = function(text1, text2) {\r\n            return text1 === text2;\r\n        };\r\n    \r\n        exports.FIND = function(find_text, within_text, position) {\r\n            position = (position === undefined) ? 0 : position;\r\n            return within_text ? within_text.indexOf(find_text, position - 1) + 1 : null;\r\n        };\r\n    \r\n        exports.FIXED = null;\r\n    \r\n        exports.HTML2TEXT = function (value) {\r\n            var result = '';\r\n    \r\n            if (value) {\r\n                if (value instanceof Array) {\r\n                    value.forEach(function (line) {\r\n                        if (result !== '') {\r\n                          result += '\\n';\r\n                        }\r\n                        result += (line.replace(/<(?:.|\\n)*?>/gm, ''));\r\n                    });\r\n                } else {\r\n                    result = value.replace(/<(?:.|\\n)*?>/gm, '');\r\n                }\r\n            }\r\n    \r\n            return result;\r\n        };\r\n    \r\n        exports.LEFT = function(text, number) {\r\n            number = (number === undefined) ? 1 : number;\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error || typeof text !== 'string') {\r\n                return error.value;\r\n            }\r\n            return text ? text.substring(0, number) : null;\r\n        };\r\n    \r\n        exports.LEN = function(text) {\r\n            if (arguments.length === 0) {\r\n                return error.error;\r\n            }\r\n    \r\n            if (typeof text === 'string') {\r\n                return text ? text.length : 0;\r\n            }\r\n    \r\n            if (text.length) {\r\n                return text.length;\r\n            }\r\n    \r\n            return error.value;\r\n        };\r\n    \r\n        exports.LOWER = function(text) {\r\n            if (typeof text !== 'string') {\r\n                return error.value;\r\n            }\r\n            return text ? text.toLowerCase() : text;\r\n        };\r\n    \r\n        exports.MID = function(text, start, number) {\r\n            start = utils.parseNumber(start);\r\n            number = utils.parseNumber(number);\r\n            if (utils.anyIsError(start, number) || typeof text !== 'string') {\r\n                return number;\r\n            }\r\n    \r\n            var begin = start - 1;\r\n            var end = begin + number;\r\n    \r\n            return text.substring(begin, end);\r\n        };\r\n    \r\n        exports.NUMBERVALUE = null;\r\n    \r\n        exports.PRONETIC = null;\r\n    \r\n        exports.PROPER = function(text) {\r\n            if (text === undefined || text.length === 0) {\r\n                return error.value;\r\n            }\r\n            if (text === true) {\r\n                text = 'TRUE';\r\n            }\r\n            if (text === false) {\r\n                text = 'FALSE';\r\n            }\r\n            if (isNaN(text) && typeof text === 'number') {\r\n                return error.value;\r\n            }\r\n            if (typeof text === 'number') {\r\n                text = '' + text;\r\n            }\r\n    \r\n            return text.replace(/\\w\\S*/g, function(txt) {\r\n                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n            });\r\n        };\r\n    \r\n        exports.REGEXEXTRACT = function (text, regular_expression) {\r\n            var match = text.match(new RegExp(regular_expression));\r\n            return match ? (match[match.length > 1 ? match.length - 1 : 0]) : null;\r\n        };\r\n    \r\n        exports.REGEXMATCH = function (text, regular_expression, full) {\r\n            var match = text.match(new RegExp(regular_expression));\r\n            return full ? match : !!match;\r\n        };\r\n    \r\n        exports.REGEXREPLACE = function (text, regular_expression, replacement) {\r\n            return text.replace(new RegExp(regular_expression), replacement);\r\n        };\r\n    \r\n        exports.REPLACE = function(text, position, length, new_text) {\r\n            position = utils.parseNumber(position);\r\n            length = utils.parseNumber(length);\r\n            if (utils.anyIsError(position, length) ||\r\n                typeof text !== 'string' ||\r\n                typeof new_text !== 'string') {\r\n                return error.value;\r\n            }\r\n            return text.substr(0, position - 1) + new_text + text.substr(position - 1 + length);\r\n        };\r\n    \r\n        exports.REPT = function(text, number) {\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return new Array(number + 1).join(text);\r\n        };\r\n    \r\n        exports.RIGHT = function(text, number) {\r\n            number = (number === undefined) ? 1 : number;\r\n            number = utils.parseNumber(number);\r\n            if (number instanceof Error) {\r\n                return number;\r\n            }\r\n            return text ? text.substring(text.length - number) : null;\r\n        };\r\n    \r\n        exports.SEARCH = function(find_text, within_text, position) {\r\n            var foundAt;\r\n            if (typeof find_text !== 'string' || typeof within_text !== 'string') {\r\n                return error.value;\r\n            }\r\n            position = (position === undefined) ? 0 : position;\r\n            foundAt = within_text.toLowerCase().indexOf(find_text.toLowerCase(), position - 1)+1;\r\n            return (foundAt === 0)?error.value:foundAt;\r\n        };\r\n    \r\n        exports.SPLIT = function (text, separator) {\r\n            return text.split(separator);\r\n        };\r\n    \r\n        exports.SUBSTITUTE = function(text, old_text, new_text, occurrence) {\r\n            if (!text || !old_text || !new_text) {\r\n                return text;\r\n            } else if (occurrence === undefined) {\r\n                return text.replace(new RegExp(old_text, 'g'), new_text);\r\n            } else {\r\n                var index = 0;\r\n                var i = 0;\r\n                while (text.indexOf(old_text, index) > 0) {\r\n                    index = text.indexOf(old_text, index + 1);\r\n                    i++;\r\n                    if (i === occurrence) {\r\n                        return text.substring(0, index) + new_text + text.substring(index + old_text.length);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    \r\n        exports.T = function(value) {\r\n            return (typeof value === \"string\") ? value : '';\r\n        };\r\n    \r\n        exports.TEXT = null;\r\n    \r\n        exports.TRIM = function(text) {\r\n            if (typeof text !== 'string') {\r\n                return error.value;\r\n            }\r\n            return text.replace(/ +/g, ' ').trim();\r\n        };\r\n    \r\n        exports.UNICHAR = exports.CHAR;\r\n    \r\n        exports.UNICODE = exports.CODE;\r\n    \r\n        exports.UPPER = function(text) {\r\n            if (typeof text !== 'string') {\r\n                return error.value;\r\n            }\r\n            return text.toUpperCase();\r\n        };\r\n    \r\n        exports.VALUE = null;\r\n    \r\n        return exports;\r\n    })();\r\n    \r\n    jexcel.methods.stats = (function() {\r\n        var exports = {};\r\n    \r\n        var SQRT2PI = 2.5066282746310002;\r\n    \r\n        exports.AVEDEV = null;\r\n    \r\n        exports.AVERAGE = function() {\r\n            var range = utils.numbers(utils.flatten(arguments));\r\n            var n = range.length;\r\n            var sum = 0;\r\n            var count = 0;\r\n            for (var i = 0; i < n; i++) {\r\n                sum += range[i];\r\n                count += 1;\r\n            }\r\n            return sum / count;\r\n        };\r\n    \r\n        exports.AVERAGEA = function() {\r\n            var range = utils.flatten(arguments);\r\n            var n = range.length;\r\n            var sum = 0;\r\n            var count = 0;\r\n            for (var i = 0; i < n; i++) {\r\n                var el = range[i];\r\n                if (typeof el === 'number') {\r\n                    sum += el;\r\n                }\r\n                if (el === true) {\r\n                    sum++;\r\n                }\r\n                if (el !== null) {\r\n                    count++;\r\n                }\r\n            }\r\n            return sum / count;\r\n        };\r\n    \r\n        exports.AVERAGEIF = function(range, criteria, average_range) {\r\n            average_range = average_range || range;\r\n            range = utils.flatten(range);\r\n            average_range = utils.parseNumberArray(utils.flatten(average_range));\r\n            if (average_range instanceof Error) {\r\n                return average_range;\r\n            }\r\n            var average_count = 0;\r\n            var result = 0;\r\n            for (var i = 0; i < range.length; i++) {\r\n                if (eval(range[i] + criteria)) { // jshint ignore:line\r\n                    result += average_range[i];\r\n                    average_count++;\r\n                }\r\n            }\r\n            return result / average_count;\r\n        };\r\n    \r\n        exports.AVERAGEIFS = null;\r\n    \r\n        exports.COUNT = function() {\r\n            return utils.numbers(utils.flatten(arguments)).length;\r\n        };\r\n    \r\n        exports.COUNTA = function() {\r\n            var range = utils.flatten(arguments);\r\n            return range.length - exports.COUNTBLANK(range);\r\n        };\r\n    \r\n        exports.COUNTIN = function (range, value) {\r\n            var result = 0;\r\n            for (var i = 0; i < range.length; i++) {\r\n                if (range[i] === value) {\r\n                    result++;\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n    \r\n        exports.COUNTBLANK = function() {\r\n            var range = utils.flatten(arguments);\r\n            var blanks = 0;\r\n            var element;\r\n            for (var i = 0; i < range.length; i++) {\r\n                element = range[i];\r\n                if (element === null || element === '') {\r\n                    blanks++;\r\n                }\r\n            }\r\n            return blanks;\r\n        };\r\n    \r\n        exports.COUNTIF = function(range, criteria) {\r\n            range = utils.flatten(range);\r\n            if (!/[<>=!]/.test(criteria)) {\r\n                criteria = '==\"' + criteria + '\"';\r\n            }\r\n            var matches = 0;\r\n            for (var i = 0; i < range.length; i++) {\r\n                if (typeof range[i] !== 'string') {\r\n                    if (eval(range[i] + criteria)) { // jshint ignore:line\r\n                        matches++;\r\n                    }\r\n                } else {\r\n                    if (eval('\"' + range[i] + '\"' + criteria)) { // jshint ignore:line\r\n                        matches++;\r\n                    }\r\n                }\r\n            }\r\n            return matches;\r\n        };\r\n    \r\n        exports.COUNTIFS = function() {\r\n            var args = utils.argsToArray(arguments);\r\n            var results = new Array(utils.flatten(args[0]).length);\r\n            for (var i = 0; i < results.length; i++) {\r\n                results[i] = true;\r\n            }\r\n            for (i = 0; i < args.length; i += 2) {\r\n                var range = utils.flatten(args[i]);\r\n                var criteria = args[i + 1];\r\n                if (!/[<>=!]/.test(criteria)) {\r\n                    criteria = '==\"' + criteria + '\"';\r\n                }\r\n                for (var j = 0; j < range.length; j++) {\r\n                    if (typeof range[j] !== 'string') {\r\n                        results[j] = results[j] && eval(range[j] + criteria); // jshint ignore:line\r\n                    } else {\r\n                        results[j] = results[j] && eval('\"' + range[j] + '\"' + criteria); // jshint ignore:line\r\n                    }\r\n                }\r\n            }\r\n            var result = 0;\r\n            for (i = 0; i < results.length; i++) {\r\n                if (results[i]) {\r\n                    result++;\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n    \r\n        exports.COUNTUNIQUE = function () {\r\n            return UNIQUE.apply(null, utils.flatten(arguments)).length;\r\n        };\r\n    \r\n        exports.FISHER = function(x) {\r\n            x = utils.parseNumber(x);\r\n            if (x instanceof Error) {\r\n                return x;\r\n            }\r\n            return Math.log((1 + x) / (1 - x)) / 2;\r\n        };\r\n    \r\n        exports.FISHERINV = function(y) {\r\n            y = utils.parseNumber(y);\r\n            if (y instanceof Error) {\r\n                return y;\r\n            }\r\n            var e2y = Math.exp(2 * y);\r\n            return (e2y - 1) / (e2y + 1);\r\n        };\r\n    \r\n        exports.FREQUENCY = function(data, bins) {\r\n            data = utils.parseNumberArray(utils.flatten(data));\r\n            bins = utils.parseNumberArray(utils.flatten(bins));\r\n            if (utils.anyIsError(data, bins)) {\r\n                return error.value;\r\n            }\r\n            var n = data.length;\r\n            var b = bins.length;\r\n            var r = [];\r\n            for (var i = 0; i <= b; i++) {\r\n                r[i] = 0;\r\n                for (var j = 0; j < n; j++) {\r\n                    if (i === 0) {\r\n                        if (data[j] <= bins[0]) {\r\n                            r[0] += 1;\r\n                        }\r\n                    } else if (i < b) {\r\n                        if (data[j] > bins[i - 1] && data[j] <= bins[i]) {\r\n                            r[i] += 1;\r\n                        }\r\n                    } else if (i === b) {\r\n                        if (data[j] > bins[b - 1]) {\r\n                            r[b] += 1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return r;\r\n        };\r\n    \r\n        exports.LARGE = function(range, k) {\r\n            range = utils.parseNumberArray(utils.flatten(range));\r\n            k = utils.parseNumber(k);\r\n            if (utils.anyIsError(range, k)) {\r\n                return range;\r\n            }\r\n            return range.sort(function(a, b) {\r\n                return b - a;\r\n            })[k - 1];\r\n        };\r\n    \r\n        exports.MAX = function() {\r\n            var range = utils.numbers(utils.flatten(arguments));\r\n            return (range.length === 0) ? 0 : Math.max.apply(Math, range);\r\n        };\r\n    \r\n        exports.MAXA = function() {\r\n            var range = utils.arrayValuesToNumbers(utils.flatten(arguments));\r\n            return (range.length === 0) ? 0 : Math.max.apply(Math, range);\r\n        };\r\n    \r\n        exports.MIN = function() {\r\n            var range = utils.numbers(utils.flatten(arguments));\r\n            return (range.length === 0) ? 0 : Math.min.apply(Math, range);\r\n        };\r\n    \r\n        exports.MINA = function() {\r\n            var range = utils.arrayValuesToNumbers(utils.flatten(arguments));\r\n            return (range.length === 0) ? 0 : Math.min.apply(Math, range);\r\n        };\r\n    \r\n        exports.MODE = {};\r\n    \r\n        exports.MODE.MULT = function() {\r\n            // Credits: Roönaän\r\n            var range = utils.parseNumberArray(utils.flatten(arguments));\r\n            if (range instanceof Error) {\r\n                return range;\r\n            }\r\n            var n = range.length;\r\n            var count = {};\r\n            var maxItems = [];\r\n            var max = 0;\r\n            var currentItem;\r\n    \r\n            for (var i = 0; i < n; i++) {\r\n                currentItem = range[i];\r\n                count[currentItem] = count[currentItem] ? count[currentItem] + 1 : 1;\r\n                if (count[currentItem] > max) {\r\n                    max = count[currentItem];\r\n                    maxItems = [];\r\n                }\r\n                if (count[currentItem] === max) {\r\n                    maxItems[maxItems.length] = currentItem;\r\n                }\r\n            }\r\n            return maxItems;\r\n        };\r\n    \r\n        exports.MODE.SNGL = function() {\r\n            var range = utils.parseNumberArray(utils.flatten(arguments));\r\n            if (range instanceof Error) {\r\n                return range;\r\n            }\r\n            return exports.MODE.MULT(range).sort(function(a, b) {\r\n                return a - b;\r\n            })[0];\r\n        };\r\n    \r\n        exports.PERCENTILE = {};\r\n    \r\n        exports.PERCENTILE.EXC = function(array, k) {\r\n            array = utils.parseNumberArray(utils.flatten(array));\r\n            k = utils.parseNumber(k);\r\n            if (utils.anyIsError(array, k)) {\r\n                return error.value;\r\n            }\r\n            array = array.sort(function(a, b) {\r\n                {\r\n                    return a - b;\r\n                }\r\n            });\r\n            var n = array.length;\r\n            if (k < 1 / (n + 1) || k > 1 - 1 / (n + 1)) {\r\n                return error.num;\r\n            }\r\n            var l = k * (n + 1) - 1;\r\n            var fl = Math.floor(l);\r\n            return utils.cleanFloat((l === fl) ? array[l] : array[fl] + (l - fl) * (array[fl + 1] - array[fl]));\r\n        };\r\n    \r\n        exports.PERCENTILE.INC = function(array, k) {\r\n            array = utils.parseNumberArray(utils.flatten(array));\r\n            k = utils.parseNumber(k);\r\n            if (utils.anyIsError(array, k)) {\r\n                return error.value;\r\n            }\r\n            array = array.sort(function(a, b) {\r\n                return a - b;\r\n            });\r\n            var n = array.length;\r\n            var l = k * (n - 1);\r\n            var fl = Math.floor(l);\r\n            return utils.cleanFloat((l === fl) ? array[l] : array[fl] + (l - fl) * (array[fl + 1] - array[fl]));\r\n        };\r\n    \r\n        exports.PERCENTRANK = {};\r\n    \r\n        exports.PERCENTRANK.EXC = function(array, x, significance) {\r\n            significance = (significance === undefined) ? 3 : significance;\r\n            array = utils.parseNumberArray(utils.flatten(array));\r\n            x = utils.parseNumber(x);\r\n            significance = utils.parseNumber(significance);\r\n            if (utils.anyIsError(array, x, significance)) {\r\n                return error.value;\r\n            }\r\n            array = array.sort(function(a, b) {\r\n                return a - b;\r\n            });\r\n            var uniques = UNIQUE.apply(null, array);\r\n            var n = array.length;\r\n            var m = uniques.length;\r\n            var power = Math.pow(10, significance);\r\n            var result = 0;\r\n            var match = false;\r\n            var i = 0;\r\n            while (!match && i < m) {\r\n                if (x === uniques[i]) {\r\n                    result = (array.indexOf(uniques[i]) + 1) / (n + 1);\r\n                    match = true;\r\n                } else if (x >= uniques[i] && (x < uniques[i + 1] || i === m - 1)) {\r\n                    result = (array.indexOf(uniques[i]) + 1 + (x - uniques[i]) / (uniques[i + 1] - uniques[i])) / (n + 1);\r\n                    match = true;\r\n                }\r\n                i++;\r\n            }\r\n            return Math.floor(result * power) / power;\r\n        };\r\n    \r\n        exports.PERCENTRANK.INC = function(array, x, significance) {\r\n            significance = (significance === undefined) ? 3 : significance;\r\n            array = utils.parseNumberArray(utils.flatten(array));\r\n            x = utils.parseNumber(x);\r\n            significance = utils.parseNumber(significance);\r\n            if (utils.anyIsError(array, x, significance)) {\r\n                return error.value;\r\n            }\r\n            array = array.sort(function(a, b) {\r\n                return a - b;\r\n            });\r\n            var uniques = UNIQUE.apply(null, array);\r\n            var n = array.length;\r\n            var m = uniques.length;\r\n            var power = Math.pow(10, significance);\r\n            var result = 0;\r\n            var match = false;\r\n            var i = 0;\r\n            while (!match && i < m) {\r\n                if (x === uniques[i]) {\r\n                    result = array.indexOf(uniques[i]) / (n - 1);\r\n                    match = true;\r\n                } else if (x >= uniques[i] && (x < uniques[i + 1] || i === m - 1)) {\r\n                    result = (array.indexOf(uniques[i]) + (x - uniques[i]) / (uniques[i + 1] - uniques[i])) / (n - 1);\r\n                    match = true;\r\n                }\r\n                i++;\r\n            }\r\n            return Math.floor(result * power) / power;\r\n        };\r\n    \r\n        exports.PERMUT = function(number, number_chosen) {\r\n            number = utils.parseNumber(number);\r\n            number_chosen = utils.parseNumber(number_chosen);\r\n            if (utils.anyIsError(number, number_chosen)) {\r\n                return error.value;\r\n            }\r\n            return FACT(number) / FACT(number - number_chosen);\r\n        };\r\n    \r\n        exports.PERMUTATIONA = function(number, number_chosen) {\r\n            number = utils.parseNumber(number);\r\n            number_chosen = utils.parseNumber(number_chosen);\r\n            if (utils.anyIsError(number, number_chosen)) {\r\n                return error.value;\r\n            }\r\n            return Math.pow(number, number_chosen);\r\n        };\r\n    \r\n        exports.PHI = function(x) {\r\n            x = utils.parseNumber(x);\r\n            if (x instanceof Error) {\r\n                return error.value;\r\n            }\r\n            return Math.exp(-0.5 * x * x) / SQRT2PI;\r\n        };\r\n    \r\n        exports.PROB = function(range, probability, lower, upper) {\r\n            if (lower === undefined) {\r\n                return 0;\r\n            }\r\n            upper = (upper === undefined) ? lower : upper;\r\n    \r\n            range = utils.parseNumberArray(utils.flatten(range));\r\n            probability = utils.parseNumberArray(utils.flatten(probability));\r\n            lower = utils.parseNumber(lower);\r\n            upper = utils.parseNumber(upper);\r\n            if (utils.anyIsError(range, probability, lower, upper)) {\r\n                return error.value;\r\n            }\r\n    \r\n            if (lower === upper) {\r\n                return (range.indexOf(lower) >= 0) ? probability[range.indexOf(lower)] : 0;\r\n            }\r\n    \r\n            var sorted = range.sort(function(a, b) {\r\n                return a - b;\r\n            });\r\n            var n = sorted.length;\r\n            var result = 0;\r\n            for (var i = 0; i < n; i++) {\r\n                if (sorted[i] >= lower && sorted[i] <= upper) {\r\n                    result += probability[range.indexOf(sorted[i])];\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n    \r\n        exports.QUARTILE = {};\r\n    \r\n        exports.QUARTILE.EXC = function(range, quart) {\r\n            range = utils.parseNumberArray(utils.flatten(range));\r\n            quart = utils.parseNumber(quart);\r\n            if (utils.anyIsError(range, quart)) {\r\n                return error.value;\r\n            }\r\n            switch (quart) {\r\n                case 1:\r\n                    return exports.PERCENTILE.EXC(range, 0.25);\r\n                case 2:\r\n                    return exports.PERCENTILE.EXC(range, 0.5);\r\n                case 3:\r\n                    return exports.PERCENTILE.EXC(range, 0.75);\r\n                default:\r\n                    return error.num;\r\n            }\r\n        };\r\n    \r\n        exports.QUARTILE.INC = function(range, quart) {\r\n            range = utils.parseNumberArray(utils.flatten(range));\r\n            quart = utils.parseNumber(quart);\r\n            if (utils.anyIsError(range, quart)) {\r\n                return error.value;\r\n            }\r\n            switch (quart) {\r\n                case 1:\r\n                    return exports.PERCENTILE.INC(range, 0.25);\r\n                case 2:\r\n                    return exports.PERCENTILE.INC(range, 0.5);\r\n                case 3:\r\n                    return exports.PERCENTILE.INC(range, 0.75);\r\n                default:\r\n                    return error.num;\r\n            }\r\n        };\r\n    \r\n        exports.RANK = {};\r\n    \r\n        exports.RANK.AVG = function(number, range, order) {\r\n            number = utils.parseNumber(number);\r\n            range = utils.parseNumberArray(utils.flatten(range));\r\n            if (utils.anyIsError(number, range)) {\r\n                return error.value;\r\n            }\r\n            range = utils.flatten(range);\r\n            order = order || false;\r\n            var sort = (order) ? function(a, b) {\r\n                return a - b;\r\n            } : function(a, b) {\r\n                return b - a;\r\n            };\r\n            range = range.sort(sort);\r\n    \r\n            var length = range.length;\r\n            var count = 0;\r\n            for (var i = 0; i < length; i++) {\r\n                if (range[i] === number) {\r\n                    count++;\r\n                }\r\n            }\r\n    \r\n            return (count > 1) ? (2 * range.indexOf(number) + count + 1) / 2 : range.indexOf(number) + 1;\r\n        };\r\n    \r\n        exports.RANK.EQ = function(number, range, order) {\r\n            number = utils.parseNumber(number);\r\n            range = utils.parseNumberArray(utils.flatten(range));\r\n            if (utils.anyIsError(number, range)) {\r\n                return error.value;\r\n            }\r\n            order = order || false;\r\n            var sort = (order) ? function(a, b) {\r\n                return a - b;\r\n            } : function(a, b) {\r\n                return b - a;\r\n            };\r\n            range = range.sort(sort);\r\n            return range.indexOf(number) + 1;\r\n        };\r\n    \r\n        exports.RSQ = function(data_x, data_y) { // no need to flatten here, PEARSON will take care of that\r\n            data_x = utils.parseNumberArray(utils.flatten(data_x));\r\n            data_y = utils.parseNumberArray(utils.flatten(data_y));\r\n            if (utils.anyIsError(data_x, data_y)) {\r\n                return error.value;\r\n            }\r\n            return Math.pow(exports.PEARSON(data_x, data_y), 2);\r\n        };\r\n    \r\n        exports.SMALL = function(range, k) {\r\n            range = utils.parseNumberArray(utils.flatten(range));\r\n            k = utils.parseNumber(k);\r\n            if (utils.anyIsError(range, k)) {\r\n                return range;\r\n            }\r\n            return range.sort(function(a, b) {\r\n                return a - b;\r\n            })[k - 1];\r\n        };\r\n    \r\n        exports.STANDARDIZE = function(x, mean, sd) {\r\n            x = utils.parseNumber(x);\r\n            mean = utils.parseNumber(mean);\r\n            sd = utils.parseNumber(sd);\r\n            if (utils.anyIsError(x, mean, sd)) {\r\n                return error.value;\r\n            }\r\n            return (x - mean) / sd;\r\n        };\r\n    \r\n        exports.STDEV = {};\r\n    \r\n        exports.STDEV.P = function() {\r\n            var v = exports.VAR.P.apply(this, arguments);\r\n            return Math.sqrt(v);\r\n        };\r\n    \r\n        exports.STDEV.S = function() {\r\n            var v = exports.VAR.S.apply(this, arguments);\r\n            return Math.sqrt(v);\r\n        };\r\n    \r\n        exports.STDEVA = function() {\r\n            var v = exports.VARA.apply(this, arguments);\r\n            return Math.sqrt(v);\r\n        };\r\n    \r\n        exports.STDEVPA = function() {\r\n            var v = exports.VARPA.apply(this, arguments);\r\n            return Math.sqrt(v);\r\n        };\r\n    \r\n        exports.VAR = {};\r\n    \r\n        exports.VAR.P = function() {\r\n            var range = utils.numbers(utils.flatten(arguments));\r\n            var n = range.length;\r\n            var sigma = 0;\r\n            var mean = exports.AVERAGE(range);\r\n            for (var i = 0; i < n; i++) {\r\n                sigma += Math.pow(range[i] - mean, 2);\r\n            }\r\n            return sigma / n;\r\n        };\r\n    \r\n        exports.VAR.S = function() {\r\n            var range = utils.numbers(utils.flatten(arguments));\r\n            var n = range.length;\r\n            var sigma = 0;\r\n            var mean = exports.AVERAGE(range);\r\n            for (var i = 0; i < n; i++) {\r\n                sigma += Math.pow(range[i] - mean, 2);\r\n            }\r\n            return sigma / (n - 1);\r\n        };\r\n    \r\n        exports.VARA = function() {\r\n            var range = utils.flatten(arguments);\r\n            var n = range.length;\r\n            var sigma = 0;\r\n            var count = 0;\r\n            var mean = exports.AVERAGEA(range);\r\n            for (var i = 0; i < n; i++) {\r\n                var el = range[i];\r\n                if (typeof el === 'number') {\r\n                    sigma += Math.pow(el - mean, 2);\r\n                } else if (el === true) {\r\n                    sigma += Math.pow(1 - mean, 2);\r\n                } else {\r\n                    sigma += Math.pow(0 - mean, 2);\r\n                }\r\n    \r\n                if (el !== null) {\r\n                    count++;\r\n                }\r\n            }\r\n            return sigma / (count - 1);\r\n        };\r\n    \r\n        exports.VARPA = function() {\r\n            var range = utils.flatten(arguments);\r\n            var n = range.length;\r\n            var sigma = 0;\r\n            var count = 0;\r\n            var mean = exports.AVERAGEA(range);\r\n            for (var i = 0; i < n; i++) {\r\n                var el = range[i];\r\n                if (typeof el === 'number') {\r\n                    sigma += Math.pow(el - mean, 2);\r\n                } else if (el === true) {\r\n                    sigma += Math.pow(1 - mean, 2);\r\n                } else {\r\n                    sigma += Math.pow(0 - mean, 2);\r\n                }\r\n    \r\n                if (el !== null) {\r\n                    count++;\r\n                }\r\n            }\r\n            return sigma / count;\r\n        };\r\n    \r\n        exports.WEIBULL = {};\r\n    \r\n        exports.WEIBULL.DIST = function(x, alpha, beta, cumulative) {\r\n            x = utils.parseNumber(x);\r\n            alpha = utils.parseNumber(alpha);\r\n            beta = utils.parseNumber(beta);\r\n            if (utils.anyIsError(x, alpha, beta)) {\r\n                return error.value;\r\n            }\r\n            return (cumulative) ? 1 - Math.exp(-Math.pow(x / beta, alpha)) : Math.pow(x, alpha - 1) * Math.exp(-Math.pow(x / beta, alpha)) * alpha / Math.pow(beta, alpha);\r\n        };\r\n    \r\n        exports.Z = {};\r\n    \r\n        exports.Z.TEST = function(range, x, sd) {\r\n            range = utils.parseNumberArray(utils.flatten(range));\r\n            x = utils.parseNumber(x);\r\n            if (utils.anyIsError(range, x)) {\r\n                return error.value;\r\n            }\r\n    \r\n            sd = sd || exports.STDEV.S(range);\r\n            var n = range.length;\r\n            return 1 - exports.NORM.S.DIST((exports.AVERAGE(range) - x) / (sd / Math.sqrt(n)), true);\r\n        };\r\n    \r\n        return exports;\r\n    })();\r\n\r\n    jexcel.methods.utils = (function() {\r\n        var exports = {};\r\n\r\n        exports.PROGRESS = function(p, c) {\r\n            var color = c ? c : 'red';\r\n            var value = p ? p : '0';\r\n\r\n            return '<div style=\"width:' + value + '%;height:4px;background-color:' + color + ';margin-top:1px;\"></div>';\r\n        };\r\n\r\n        exports.RATING = function(v) {\r\n            var html = '<div class=\"jrating\">';\r\n            for (var i = 0; i < 5; i++) {\r\n                if (i < v) {\r\n                    html += '<div class=\"jrating-selected\"></div>';\r\n                } else {\r\n                    html += '<div></div>';\r\n                }\r\n            }\r\n            html += '</div>';\r\n            return html;\r\n        }\r\n\r\n        return exports;\r\n    })();\r\n\r\n    for (var i = 0; i < Object.keys(jexcel.methods).length; i++) {\r\n        var methods = jexcel.methods[Object.keys(jexcel.methods)[i]];\r\n        for (var j = 0; j < Object.keys(methods).length; j++) {\r\n            if (typeof(methods[Object.keys(methods)[j]]) == 'function') {\r\n                window[Object.keys(methods)[j]] = methods[Object.keys(methods)[j]];\r\n            } else {\r\n                window[Object.keys(methods)[j]] = function() {\r\n                    return Object.keys(methods)[j] + 'Not implemented';\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return jexcel;\r\n})));\r\n"],"sourceRoot":""}